TY  - CONF
TI  - Keynote Speaker: DL Testing: the What, the How, and the Why
T2  - 2021 IEEE International Conference on Artificial Intelligence Testing (AITest)
SP  - xv
EP  - xv
AU  - P. Tonella
PY  - 2021
DO  - 10.1109/AITEST52744.2021.00009
JO  - 2021 IEEE International Conference on Artificial Intelligence Testing (AITest)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 IEEE International Conference on Artificial Intelligence Testing (AITest)
Y1  - 23-26 Aug. 2021
AB  - Summary form only given. The complete presentation was not made available for publication as part of the conference proceedings. The literature on deep learning (DL) testing has grown exponentially in recent years, due to the widespread adoption of deep neural networks in safety and business critical domains, such as autonomous driving, financial trading and medical diagnosis. Many novel techniques have been proposed to assess the robustness of DL based systems facing execution conditions that are missing or under-represented in the data used to train them. In this talk, I will discuss the “what”, “how” and “why” of DL faults: what types of faults affect a DL system, how they can be exposed, and why a given test input can indeed expose them. More specifically, I will describe a fault taxonomy obtained from multiple sources, such as software repository and forum mining, as well as interviews with developers. I will introduce an input generation technique, based on the notion of frontier of behaviors, which can expose DL faults. Finally, I will describe a feature map representation of the input space that provides a human interpretable characterization of failure inducing inputs.
ER  - 

TY  - CONF
TI  - Towards Automated Metamorphic Test Identification for Ocean System Models
T2  - 2021 IEEE/ACM 6th International Workshop on Metamorphic Testing (MET)
SP  - 42
EP  - 46
AU  - D. J Hiremath
AU  - M. Claus
AU  - W. Hasselbring
AU  - W. Rath
PY  - 2021
DO  - 10.1109/MET52542.2021.00014
JO  - 2021 IEEE/ACM 6th International Workshop on Metamorphic Testing (MET)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 IEEE/ACM 6th International Workshop on Metamorphic Testing (MET)
Y1  - 2-2 June 2021
AB  - Metamorphic testing seeks to verify software in the absence of test oracles. Our application domain is ocean system modeling, where test oracles rarely exist, but where symmetries of the simulated physical systems are known. The input data set is large owing to the requirements of the application domain.This paper presents work in progress for the automated generation of metamorphic test scenarios using machine learning. We extended our previously proposed method [1] to identify metamorphic relations with reduced computational complexity. Initially, we represent metamorphic relations as identity maps. We construct a cost function that minimizes for identifying a metamorphic relation orthogonal to previously found metamorphic relations and penalize for the identity map. A machine learning algorithm is used to identify all possible metamorphic relations minimizing the defined cost function. We propose applying dimensionality reduction techniques to identify attributes in the input which have high variance among the identified metamorphic relations. We apply mutation on these selected attributes to identify distinct metamorphic relations with reduced computational complexity. For experimental evaluation, we subject the two implementations of an ocean-modeling application to the proposed method to present the use of metamorphic relations to test the two implementations of this application.
ER  - 

TY  - CONF
TI  - Callisto: Entropy-based Test Generation and Data Quality Assessment for Machine Learning Systems
T2  - 2020 IEEE 13th International Conference on Software Testing, Validation and Verification (ICST)
SP  - 448
EP  - 453
AU  - S. Udeshi
AU  - X. Jiang
AU  - S. Chattopadhyay
PY  - 2020
DO  - 10.1109/ICST46399.2020.00060
JO  - 2020 IEEE 13th International Conference on Software Testing, Validation and Verification (ICST)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2020 IEEE 13th International Conference on Software Testing, Validation and Verification (ICST)
Y1  - 24-28 Oct. 2020
AB  - Machine Learning (ML) has seen massive progress in the last decade and as a result, there is a pressing need for validating ML-based systems. To this end, we propose, design and evaluate CALLISTO- a novel test generation and data quality assessment framework. To the best of our knowledge, CALLISTO is the first black box framework to leverage the uncertainty in the prediction and systematically generate new test cases for ML classifiers. Our evaluation of CALLISTO on four real world data sets reveals thousands of errors. We also show that leveraging the uncertainty in prediction can increase the number of erroneous test cases up to a factor of 20, as compared to when no such knowledge is used for testing.CALLISTO has the capability to detect low quality data in the datasets that may contain mislabelled data. We conduct and present an extensive user study to validate the results of CALLISTO on identifying low quality data from four state-of-the-art real world datasets.
ER  - 

TY  - CONF
TI  - A Top-k Learning to Rank Approach to Cross-Project Software Defect Prediction
T2  - 2018 25th Asia-Pacific Software Engineering Conference (APSEC)
SP  - 335
EP  - 344
AU  - F. Wang
AU  - J. Huang
AU  - Y. Ma
PY  - 2018
DO  - 10.1109/APSEC.2018.00048
JO  - 2018 25th Asia-Pacific Software Engineering Conference (APSEC)
IS  - 
SN  - 2640-0715
VO  - 
VL  - 
JA  - 2018 25th Asia-Pacific Software Engineering Conference (APSEC)
Y1  - 4-7 Dec. 2018
AB  - Cross-project defect prediction (CPDP) has recently attracted increasing attention in the field of Software Engineering. Most of the previous studies, which treated it as a binary classification problem or a regression problem, are not practical for software testing activities. To provide developers with a more valuable ranking of the most severe entities (e.g., classes and modules), in this paper, we propose a top-k learning to rank (LTR) approach in the scenario of CPDP. In particular, we first convert the number of defects into graded relevance to a specific query according to the three-sigma rule; then, we put forward a new data resampling method called SMOTE-PENN to tackle the imbalanced data problem. An empirical study on the PROMISE dataset shows that SMOTE-PENN outperforms the other six competitive resampling algorithms and RankNet performs the best for the proposed approach framework. Thus, our work could lay a foundation for efficient search engines for top-ranked defective entities in real software testing activities without local historical data for a target project.
ER  - 

TY  - CONF
TI  - Research on Intelligent Evaluation Method of Transient Analysis Software Function Test
T2  - 2019 International Conference on Advances in Construction Machinery and Vehicle Engineering (ICACMVE)
SP  - 58
EP  - 61
AU  - C. Ping
AU  - Z. Jun-Zhe
PY  - 2019
DO  - 10.1109/ICACMVE.2019.00020
JO  - 2019 International Conference on Advances in Construction Machinery and Vehicle Engineering (ICACMVE)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2019 International Conference on Advances in Construction Machinery and Vehicle Engineering (ICACMVE)
Y1  - 14-16 May 2019
AB  - In transient distributed cloud computing environment, software is vulnerable to attack, which leads to software functional completeness, so it is necessary to carry out functional testing. In order to solve the problem of high overhead and high complexity of unsupervised test methods, an intelligent evaluation method for transient analysis software function testing based on active depth learning algorithm is proposed. Firstly, the active deep learning mathematical model of transient analysis software function test is constructed by using association rule mining method, and the correlation dimension characteristics of software function failure are analyzed. Then the reliability of the software is measured by the spectral density distribution method of software functional completeness. The intelligent evaluation model of transient analysis software function testing is established in the transient distributed cloud computing environment, and the function testing and reliability intelligent evaluation are realized. Finally, the performance of the transient analysis software is verified by the simulation experiment. The results show that the accuracy of the software functional integrity positioning is high and the intelligent evaluation of the transient analysis software function testing has a good self-adaptability by using this method to carry out the function test of the transient analysis software. It ensures the safe and reliable operation of the software.
ER  - 

TY  - CONF
TI  - Application of Convolution Neural Networks and Randomforest for Software Test
T2  - 2022 8th International Conference on Contemporary Information Technology and Mathematics (ICCITM)
SP  - 146
EP  - 152
AU  - N. Sulaiman
AU  - S. O. Hasoon
PY  - 2022
DO  - 10.1109/ICCITM56309.2022.10031789
JO  - 2022 8th International Conference on Contemporary Information Technology and Mathematics (ICCITM)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2022 8th International Conference on Contemporary Information Technology and Mathematics (ICCITM)
Y1  - 31 Aug.-1 Sept. 2022
AB  - The system development life cycle includes a phase called software testing. Lots of tests are done to test the software. Here, we will focus on how to use Oracle Testing to test system output using black box testing methodology. We will test credit card software as an example, and the results will indicate whether or not a financial institution can authorize credit cards to its customers. This paper explains how to check the output of the credit card application using Convolutional Neural Networks and the Random Forest Algorithm, which will represent the Oracle test, according to the black box testing methodology, using machine learning algorithms, which can be adopted in the next versions of the credit card software to verify the validity of the results. The aim of this paper is to give results about whether a financial institution can approve credit cards for its customers. The decision to approve the card is made by the financial companies based on consideration of various reasons related to individuals which vary from creditworthiness, loans, repayment history and income criteria.
ER  - 

TY  - CONF
TI  - FUNologo: An Android-based Mobile Virtual Reality Assisted Learning with Speech Recognition Using Diamond-Square Algorithm for Children with Phonological Dyslexia
T2  - 2023 8th International Conference on Business and Industrial Research (ICBIR)
SP  - 403
EP  - 408
AU  - R. E. P. Maculada
AU  - A. R. Caballero
AU  - C. G. Villarin
AU  - E. M. Albina
PY  - 2023
DO  - 10.1109/ICBIR57571.2023.10147727
JO  - 2023 8th International Conference on Business and Industrial Research (ICBIR)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2023 8th International Conference on Business and Industrial Research (ICBIR)
Y1  - 18-19 May 2023
AB  - The study aims to provide a synergy of mobile development and virtual reality application into a fun and interactive speech-controlled game designed for children with phonological dyslexia. It also focuses on the approach conducted to specify, design, and implement the virtual reality application using Diamond-Square Algorithm. With the integration of a learning technique called the OrtonGillingham multisensory approach, the Android-based virtual reality assisted learning application will help these children establish their phonological awareness in terms of rhyming and syllabication as they immerse themselves into an audio-visual learning experience. The methodology used in this research are system storyboard, rapid application development, and testing and evaluation of the software using ISO 9126. The performance of the proposed system was evaluated by implementing an evaluation plan. When this stage was completed, it was guaranteed that all input from the tests generated throughout each iteration of the process were addressed, resulting in a more improved and satisfactory software product. The summary results from the data analysis supported the claim that the V.R. application had increased the results with an average percentage of 71% and has a potential as an alternative platform to traditional teaming.
ER  - 

TY  - CONF
TI  - An Empirical Study on the Correlation between Neuron Coverage and Code Coverage
T2  - 2023 3rd International Symposium on Computer Technology and Information Science (ISCTIS)
SP  - 1
EP  - 5
AU  - Y. Li
AU  - G. Li
PY  - 2023
DO  - 10.1109/ISCTIS58954.2023.10213091
JO  - 2023 3rd International Symposium on Computer Technology and Information Science (ISCTIS)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2023 3rd International Symposium on Computer Technology and Information Science (ISCTIS)
Y1  - 7-9 July 2023
AB  - Deep learning techniques have been widely used in many important areas. Therefore, testing of deep neural network is very important. In recent years, a few neuron coverage metrics have been proposed that are similar to the concept of traditional code coverage metrics. However, it is little known how such neuron coverage metrics are related to the traditional code coverage metrics. In this paper, we propose an automated approach to correlating neuron coverage to traditional code coverage and based on the approach we conduct an empirical study on the correlation between neuron coverage and code coverage. The experimental results confirm that neuron coverage is positive correlate to code coverage in testing individual Java methods. Our result also suggests that we do not have to reach a high neuron coverage because it may request much more test cases than those requested by high code coverage. To the best of our knowledge, we are the first to investigate the correlation between neuron coverage and code coverage.
ER  - 

TY  - CONF
TI  - TauPad: Test Data Augmentation of Point Clouds by Adversarial Mutation
T2  - 2022 IEEE/ACM 44th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
SP  - 212
EP  - 216
AU  - G. Liu
AU  - J. Liu
AU  - Q. Zhang
AU  - C. Fang
AU  - X. Zhang
PY  - 2022
DO  - 10.1145/3510454.3517050
JO  - 2022 IEEE/ACM 44th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
IS  - 
SN  - 2574-1926
VO  - 
VL  - 
JA  - 2022 IEEE/ACM 44th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
Y1  - 22-24 May 2022
AB  - Point clouds have been widely used in a large number of application scenarios to handle with various deep learning (DL) tasks. Testing is an essential means to guarantee the robustness of DL models, which places high demands on test data. Therefore, it is crucial to design a reliable and effective test data augmentation tool of point clouds to generate high-quality data to test the robustness of the target model. However, although common mutation methods can increase the amount of point clouds, the quality of the augmented data still needs to be improved based on the specify of the spatial structure of the point clouds. In this paper, we develop a point clouds augmentation tool, namely TauPad, of which the specific mutation direction is guided by adversarial attacks. Based on the point clouds pre-processing, point clouds adversarial mutation, and spatial distribution restoration, TauPad can generate augmented test data that are significantly deceptive to the target model. Preliminary experiments show that TauPad can reliably and effectively augment point clouds for testing. Its video is at https://youtu.be/Y9nDIEW13_g/ and TauPad can be used at http://1.13.193.98:2600/.
ER  - 

TY  - JOUR
TI  - An Empirical Study of Fault Localization Families and Their Combinations
T2  - IEEE Transactions on Software Engineering
SP  - 332
EP  - 347
AU  - D. Zou
AU  - J. Liang
AU  - Y. Xiong
AU  - M. D. Ernst
AU  - L. Zhang
PY  - 2021
DO  - 10.1109/TSE.2019.2892102
JO  - IEEE Transactions on Software Engineering
IS  - 2
SN  - 1939-3520
VO  - 47
VL  - 47
JA  - IEEE Transactions on Software Engineering
Y1  - 1 Feb. 2021
AB  - The performance of fault localization techniques is critical to their adoption in practice. This paper reports on an empirical study of a wide range of fault localization techniques on real-world faults. Different from previous studies, this paper (1) considers a wide range of techniques from different families, (2) combines different techniques, and (3) considers the execution time of different techniques. Our results reveal that a combined technique significantly outperforms any individual technique (200 percent increase in faults localized in Top 1), suggesting that combination may be a desirable way to apply fault localization techniques and that future techniques should also be evaluated in the combined setting. Our implementation is publicly available for evaluating and combining fault localization techniques.
ER  - 

TY  - CONF
TI  - FlakyCat: Predicting Flaky Tests Categories using Few-Shot Learning
T2  - 2023 IEEE/ACM International Conference on Automation of Software Test (AST)
SP  - 140
EP  - 151
AU  - A. Akli
AU  - G. Haben
AU  - S. Habchi
AU  - M. Papadakis
AU  - Y. Le Traon
PY  - 2023
DO  - 10.1109/AST58925.2023.00018
JO  - 2023 IEEE/ACM International Conference on Automation of Software Test (AST)
IS  - 
SN  - 2833-9061
VO  - 
VL  - 
JA  - 2023 IEEE/ACM International Conference on Automation of Software Test (AST)
Y1  - 15-16 May 2023
AB  - Flaky tests are tests that yield different outcomes when run on the same version of a program. This non-deterministic behaviour plagues continuous integration with false signals, wasting developers’ time and reducing their trust in test suites. Studies highlighted the importance of keeping tests flakiness-free. Recently, the research community has been pushing towards the detection of flaky tests by suggesting many static and dynamic approaches. While promising, those approaches mainly focus on classifying tests as flaky or not and, even when high performances are reported, it remains challenging to understand the cause of flakiness. This part is crucial for researchers and developers that aim to fix it. To help with the comprehension of a given flaky test, we propose FlakyCat, the first approach to classify flaky tests based on their root cause category. FlakyCat relies on CodeBERT for code representation and leverages Siamese networks to train a multi-class classifier. We train and evaluate FlakyCat on a set of 451 flaky tests collected from open-source Java projects. Our evaluation shows that FlakyCat categorises flaky tests accurately, with an F1 score of 73%. Furthermore, we investigate the performance of our approach for each category, revealing that Async waits, Unordered collections and Time-related flaky tests are accurately classified, while Concurrency-related flaky tests are more challenging to predict. Finally, to facilitate the comprehension of FlakyCat’s predictions, we present a new technique for CodeBERT-based model interpretability that highlights code statements influencing the categorization.
ER  - 

TY  - CONF
TI  - Distribution Awareness for AI System Testing
T2  - 2021 IEEE/ACM 43rd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
SP  - 96
EP  - 98
AU  - D. Berend
PY  - 2021
DO  - 10.1109/ICSE-Companion52605.2021.00045
JO  - 2021 IEEE/ACM 43rd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
IS  - 
SN  - 2574-1926
VO  - 
VL  - 
JA  - 2021 IEEE/ACM 43rd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
Y1  - 25-28 May 2021
AB  - As Deep Learning (DL) is continuously adopted in many safety critical applications, its quality and reliability start to raise concerns. Similar to the traditional software development process, testing the DL software to uncover its defects at an early stage is an effective way to reduce risks after deployment. Although recent progress has been made in designing novel testing techniques for DL software, the distribution of generated test data is not taken into consideration. It is therefore hard to judge whether the identified errors are indeed meaningful errors to the DL application. Therefore, we propose a new distribution aware testing technique which aims to generate new unseen test cases relevant to the underlying DL system task. Our results show that this technique is able to filter up to 55.44% of error test case on CIFAR-10 and is 10.05% more effective in enhancing robustness.
ER  - 

TY  - CONF
TI  - Industry and Academia Partnership for Short-time High-level Qualification
T2  - 2018 IEEE Frontiers in Education Conference (FIE)
SP  - 1
EP  - 8
AU  - J. R. H. Carvalho
AU  - A. Vnicenzi
AU  - J. C. Maldonado
AU  - M. Gonçalves
PY  - 2018
DO  - 10.1109/FIE.2018.8659248
JO  - 2018 IEEE Frontiers in Education Conference (FIE)
IS  - 
SN  - 2377-634X
VO  - 
VL  - 
JA  - 2018 IEEE Frontiers in Education Conference (FIE)
Y1  - 3-6 Oct. 2018
AB  - This Innovate Practice Full Paper reports a Industry/Academia partnership to improve the qualification of both students and professionals. Consider the following scenario: a city located in a third world country, with one of the lowest countrywide educational performances, hosting an industrial pole based on Federal tax incentives aiming to develop a R&D cluster. The city has basic services issues, from health to urban violence, making the attraction of professionals from other locations unfeasible. As a consequence, the lack of professionals with R&D profile is now considered a relevant risk to the continuation of the city's industrial policies. Therefore, initiatives that shorten the qualification life-cycle of local professionals, while preparing senior students with real-world experience, are welcome. An example of such initiative, reported in this paper, was the software test residence, formed by professionals from the industry, and senior undergraduate and graduate students of a local university. The proposal consisted on defining a set of learning activities where students and professionals would be partners, but still being aware that they belong to different realities (with respect to timing, accountability and accreditation). The challenge can be summarized as follows: how to jointly qualify students and professionals, while respecting the peculiarities of both audiences. In order to address the issue in a short time period, representatives from a global company with R&D site in the city partnered with a local university to define a learning program inspired by the software residence approach. The university's course syllabus in Software Test was reviewed and customized to the on-the-job training subject of interest. Moreover, the approach was based on three nonnegotiable principles: Accountability, Excellence and Sustainability. The experience was successful, reaching 25 participants from four R&D organizations and the university. Results obtained include qualification of 23 participants (only two dropped off), the development of an open source educational material composed by a set of slides for testing automation classes, theory-practice of software testing targeting Test Maturity Model integration (TMMi) level 2, and the improvement in the collaboration between academia and industry for other projects. The paper will detail the experience, and list some lessons learned, including how to synchronize the schedules.
ER  - 

TY  - CONF
TI  - Identify Coincidental Correct Test Cases Based on Fuzzy Classification
T2  - 2016 International Conference on Software Analysis, Testing and Evolution (SATE)
SP  - 72
EP  - 77
AU  - Z. Li
AU  - M. Li
AU  - Y. Liu
AU  - J. Geng
PY  - 2016
DO  - 10.1109/SATE.2016.19
JO  - 2016 International Conference on Software Analysis, Testing and Evolution (SATE)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2016 International Conference on Software Analysis, Testing and Evolution (SATE)
Y1  - 3-4 Nov. 2016
AB  - In software testing, Coincidental Correct (CC) test case, which implement the faulty statement but with a correct output, has been investigated with a negative effects on coverage-based fault localization. Coincidental correct test case identification and manipulation had been studied and many identification methods are proposed, in which clustering based method is widely used. In this paper, a machine learning based fuzzy classification technique is proposed. We first present an approach to identify truly CC test cases for single fault version programs. Then KNN algorithm is adopted to classify the remaining passed test cases and three types of modified fuzzy suspiciousness metrics are presented based on three proposed CC test cases manipulation strategies. Empirical studies are conducted on 102 faulty versions of six programs, and the results indicate that the proposed approach makes the recall and false positive of CC test cases are 82% and 5% in average. In addition, the proposed fuzzy CC test cases manipulation strategies can improve the effectiveness of fault localization.
ER  - 

TY  - JOUR
TI  - Enhancing Dynamic Symbolic Execution by Automatically Learning Search Heuristics
T2  - IEEE Transactions on Software Engineering
SP  - 3640
EP  - 3663
AU  - S. Cha
AU  - S. Hong
AU  - J. Bak
AU  - J. Kim
AU  - J. Lee
AU  - H. Oh
PY  - 2022
DO  - 10.1109/TSE.2021.3101870
JO  - IEEE Transactions on Software Engineering
IS  - 9
SN  - 1939-3520
VO  - 48
VL  - 48
JA  - IEEE Transactions on Software Engineering
Y1  - 1 Sept. 2022
AB  - We present a technique to automatically generate search heuristics for dynamic symbolic execution. A key challenge in dynamic symbolic execution is how to effectively explore the program's execution paths to achieve high code coverage in a limited time budget. Dynamic symbolic execution employs a search heuristic to address this challenge, which favors exploring particular types of paths that are most likely to maximize the final coverage. However, manually designing a good search heuristic is nontrivial and typically ends up with suboptimal and unstable outcomes. The goal of this paper is to overcome this shortcoming of dynamic symbolic execution by automatically learning search heuristics. We define a class of search heuristics, namely a parametric search heuristic, and present an algorithm that efficiently finds an optimal heuristic for each subject program. Experimental results with industrial-strength symbolic execution tools (e.g., KLEE) show that our technique can successfully generate search heuristics that significantly outperform existing manually-crafted heuristics in terms of branch coverage and bug-finding.
ER  - 

TY  - CONF
TI  - Multi-objective Search for Model-based Testing
T2  - 2020 IEEE 20th International Conference on Software Quality, Reliability and Security (QRS)
SP  - 130
EP  - 141
AU  - R. Wang
AU  - C. Artho
AU  - L. M. Kristensen
AU  - V. Stolz
PY  - 2020
DO  - 10.1109/QRS51102.2020.00029
JO  - 2020 IEEE 20th International Conference on Software Quality, Reliability and Security (QRS)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE 20th International Conference on Software Quality, Reliability and Security (QRS)
Y1  - 11-14 Dec. 2020
AB  - This paper presents a search-based approach relying on multi-objective reinforcement learning and optimization for test case generation in model-based software testing. Our approach considers test case generation as an exploration versus exploitation dilemma, and we address this dilemma by implementing a particular strategy of multi-objective multi-armed bandits with multiple rewards. After optimizing our strategy using the jMetal multi-objective optimization framework, the resulting parameter setting is then used by an extended version of the Modbat tool for model-based testing. We experimentally evaluate our search-based approach on a collection of examples, such as the ZooKeeper distributed service and PostgreSQL database system, by comparing it to the use of random search for test case generation. Our results show that test cases generated using our search-based approach can obtain more predictable and better state/transition coverage, find failures earlier, and provide improved path coverage.
ER  - 

TY  - CONF
TI  - Implementation of LSSVM in Classification of Software Defect Prediction Data with Feature Selection
T2  - 2022 9th International Conference on Electrical Engineering, Computer Science and Informatics (EECSI)
SP  - 126
EP  - 131
AU  - T. F. Husin
AU  - M. R. Pribadi
AU  - Yohannes
PY  - 2022
DO  - 10.23919/EECSI56542.2022.9946611
JO  - 2022 9th International Conference on Electrical Engineering, Computer Science and Informatics (EECSI)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2022 9th International Conference on Electrical Engineering, Computer Science and Informatics (EECSI)
Y1  - 6-7 Oct. 2022
AB  - Software defect prediction enhances the quality, efficiency, and effectiveness of time and expenses for software testing by focusing on defect modules. Software defect prediction technology uses machine learning to predict defect modules, making allocating limited resources easier quickly. Software defect prediction datasets naturally have imbalanced class problems with significantly few defective modules compared to non-defective modules. In this study, software defect prediction data was classified by implementing the LSSVM algorithm with ReliefF (K=10) feature selection and applying the SMOTE method to overcome the imbalanced class problem in the dataset. The datasets used are software defect prediction datasets of the public NASA MDP Promise project, namely CM1, PC1, KC1, and KC2. Dataset divided into training and testing data using Fold Cross-Validation with ten folds. The classifier achieved the highest average accuracy on the PC1 dataset, which was 93,87%, while the highest Area Under the ROC Curve (AUC) was achieved by the classifier for the KC2 dataset, which was 78,35%. The results also indicate that AUC values for classifiers that use SMOTE always higher than non-SMOTE in each dataset
ER  - 

TY  - CONF
TI  - Case Studies in Learning Models and Testing Without Reset
T2  - 2019 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 40
EP  - 45
AU  - N. Bremond
AU  - R. Groz
PY  - 2019
DO  - 10.1109/ICSTW.2019.00030
JO  - 2019 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2019 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 22-23 April 2019
AB  - This paper assesses a method to reverse engineer models from software or cyber-physical systems that cannot be reset. This is done through active learning, and can compare favourably as a systematic testing method.
ER  - 

TY  - CONF
TI  - WebTA: Automated iterative critique of student programming assignments
T2  - 2015 IEEE Frontiers in Education Conference (FIE)
SP  - 1
EP  - 9
AU  - L. C. Ureel
AU  - C. Wallace
PY  - 2015
DO  - 10.1109/FIE.2015.7344225
JO  - 2015 IEEE Frontiers in Education Conference (FIE)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2015 IEEE Frontiers in Education Conference (FIE)
Y1  - 21-24 Oct. 2015
AB  - We introduce an interactive tool called WebTA that facilitates learning through automatic critique of student source code. Our tool provides immediate feedback to students and gives them experience with test-driven development. Students receive the benefits of cognitive apprenticeship through the feedback they receive in the tool. This facilitates tight, productive cycles of inquiry, critique and learning. WebTA compiles each student submission and executes it over a series of shakedown tests. Immediate feedback is given concerning errors and warnings, coupled with suggestions for debugging. The tool performs a textual analysis of the students source code and critiques programming style based on standard programming guidelines. To encourage inquiry through test-driven development, edge-case coverage, and API compliance, students develop and submit their own tests to be evaluated by the software. We report on use of WebTA in one first-year programming course and one second-year data structures course. Lab and assignment scores have improved with WebTA, and student comments attest to the effectiveness of the tool. Preliminary results indicate students receive higher grades with WebTA. One area with mixed results is WebTAs analysis of student developed JUnit tests; this feature improved API compliance but reduced edge-case testing. With these successful initial results, we offer suggestions for future development.
ER  - 

TY  - CONF
TI  - More Effective Test Case Generation with Multiple Tribes of AI
T2  - 2022 IEEE/ACM 44th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
SP  - 286
EP  - 290
AU  - M. Olsthoorn
PY  - 2022
DO  - 10.1145/3510454.3517066
JO  - 2022 IEEE/ACM 44th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
IS  - 
SN  - 2574-1926
VO  - 
VL  - 
JA  - 2022 IEEE/ACM 44th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
Y1  - 22-24 May 2022
AB  - Software testing is a critical activity in the software development life cycle for quality assurance. Automated Test Case Generation (TCG) can assist developers by speeding up this process. It accomplishes this by evolving an initial set of randomly generated test cases over time to optimize for predefined coverage criteria. One of the key challenges for automated TCG approaches is navigating the large input space. Existing state-of-the-art TCG algorithms struggle with generating highly-structured input data and preserving patterns in test structures, among others. I hypothesize that combining multiple tribes of AI can improve the effectiveness and efficiency of automated TCG. To test this hypothesis, I propose using grammar-based fuzzing and machine learning to augment evolutionary algorithms for generating more structured input data and preserving promising patterns within test cases. Additionally, I propose to use behavioral modeling and interprocedural control dependency analysis to improve test effectiveness. Finally, I propose integrating these novel approaches into a testing framework to promote the adoption of automated TCG in industry.
ER  - 

TY  - CONF
TI  - A Model-Based Approach to Generate Dynamic Synthetic Test Data: A Conceptual Model
T2  - 2019 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 11
EP  - 14
AU  - C. Tan
AU  - R. Behjati
AU  - E. Arisholm
PY  - 2019
DO  - 10.1109/ICSTW.2019.00026
JO  - 2019 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2019 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 22-23 April 2019
AB  - Having access to high-quality test data is an important requirement to ensure effective cross-organizational integration testing in the Norwegian public sector. Evogent is a PhD project that aims to provide model-based solutions for generating synthetic test data that is statistically representative of real (reference) population, and is dynamic in the same way that the actual population is. This project is carried out in collaboration with the Modernization of the National Registry project (MF) within the Norwegian Tax Department, which serves as our case study. In this paper, we present a conceptual model and related algorithms for event generation.
ER  - 

TY  - CONF
TI  - Hybrid testing approach for web services composition using genetic algorithm
T2  - 2016 IEEE Conference on e-Learning, e-Management and e-Services (IC3e)
SP  - 188
EP  - 193
AU  - E. Maythaisong
AU  - W. Songpan
PY  - 2016
DO  - 10.1109/IC3e.2016.8009064
JO  - 2016 IEEE Conference on e-Learning, e-Management and e-Services (IC3e)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2016 IEEE Conference on e-Learning, e-Management and e-Services (IC3e)
Y1  - 10-12 Oct. 2016
AB  - Web service composition is aimed to compose new web service form to respond the goal of business process. The web service selection brings to consider accurate and reliability composition. Mostly a web service is exist tested quality of service (QoS) that is called non-functional testing described time, availability and cost. However, the web services composition need to meet the business requirement to plan the best form of composition. This paper presents framework of hybrid testing approach for web services composition using genetic algorithm in order to employa both of functional testing as equivalence class testing (ECT), which is a technique of software testing and applied to process of this web service composition and non-functional testing in order to choose the proper web service from this kind of quality testing. As a web services are various serve. In addition, web service compositions can be composed various pattern. Therefore, the problem is solved by genetic algorithm (GA). The contribution of research is to help choosing web service composition which is taken the minimum defect via proposed functional and non-functional mechanism. The experimental results are worked with different two business process goal to guide the composed web services efficiently to support suitable web service composition.
ER  - 

TY  - CONF
TI  - IRRT: An Automated Software Requirements Traceability Tool based on Information Retrieval Model
T2  - 2022 IEEE 22nd International Conference on Software Quality, Reliability, and Security Companion (QRS-C)
SP  - 525
EP  - 532
AU  - S. Zhang
AU  - H. Wan
AU  - Y. Xiao
AU  - Z. Li
PY  - 2022
DO  - 10.1109/QRS-C57518.2022.00084
JO  - 2022 IEEE 22nd International Conference on Software Quality, Reliability, and Security Companion (QRS-C)
IS  - 
SN  - 2693-9371
VO  - 
VL  - 
JA  - 2022 IEEE 22nd International Conference on Software Quality, Reliability, and Security Companion (QRS-C)
Y1  - 5-9 Dec. 2022
AB  - In the software development process, requirements traceability is a key part for ensuring the success of the entire project. It is very important to generate requirements traceability links, which can promote the software development and maintenance processes, such as software requirements integrity analysis, software evaluation, software testing, software validating, etc. However, the generation of the requirements traceability links is usually time-consuming and labor-intensive. In order to solve it, we designed and developed an automated software requirements traceability tool based on information retrieval (IR) model. The tool can not only automatically generate trace links but also evaluate trace links. It uses Vector Space Model (VSM) and the trace recommendation-based code class structure (TRCCS) links to generate trace links. We measure the performance in term of Precision, Recall, and $\boldsymbol{F}_{2}$ are used to evaluate the trace links. The experimental results show that the tool can improve the efficiency of requirements traceability links generation and better support software development activities.
ER  - 

TY  - CONF
TI  - Flexible and extended IWS (Item Writing System) as a part of INT-test design software
T2  - 2015 Science and Information Conference (SAI)
SP  - 781
EP  - 785
AU  - E. V. Volkova
AU  - M. N. Nilopets
PY  - 2015
DO  - 10.1109/SAI.2015.7237232
JO  - 2015 Science and Information Conference (SAI)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2015 Science and Information Conference (SAI)
Y1  - 28-30 July 2015
AB  - The purpose of this paper is to describe INT-Test Design Software that helps psychologists and educators in developing innovative diagnostic tools and e-cognitive learning technologies. The main feature of the system is that any psychological test, created on its basis, is not a monolithic formation, but is gathered from relatively independent fragments, like a mosaic, according to a Scenario. Such an organization enables psychologists to create a test battery, in which conditional transitions among subtests, adaptive testing, flexible processing of test data and consistent interpretation of the results are possible. The task of increasing the presentation capabilities of non-standard tests is solved through creating new Controls, integrated into an existing system of Frame Design.
ER  - 

TY  - CONF
TI  - Testing acoustic scene classifiers using Metamorphic Relations
T2  - 2020 IEEE International Conference On Artificial Intelligence Testing (AITest)
SP  - 47
EP  - 54
AU  - D. Moreira
AU  - A. P. Furtado
AU  - S. Nogueira
PY  - 2020
DO  - 10.1109/AITEST49225.2020.00014
JO  - 2020 IEEE International Conference On Artificial Intelligence Testing (AITest)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE International Conference On Artificial Intelligence Testing (AITest)
Y1  - 3-6 Aug. 2020
AB  - Context: Artificial Intelligence (AI) applications appear as one of the main demands for the software industry nowadays; within this context, speech recognition and acoustic scene detection and classification achieve near-human performance. However, performing systematic testing on these applications is challenging and very costly if we follow traditional testing methodologies. In this scenario, Metamorphic Testing presents an efficient approach to ensuring the quality of machine learning-based systems. Objective: analyze techniques and applications of metamorphic testing and propose metamorphic relations to perform verification and validation of acoustic scene classifiers. Method: the use of Design Science Research to provide iterative and incremental research development, through which the results achieved in the first cycle of research are presented. Results: in the first design cycle, the use of two metamorphic relations focused on attributes and samples permutation were adopted to verify and validate 6 learning algorithms in an acoustic scene classification system, wherein one of the applied relations, on the random forest algorithm, presented a violation, leading to prediction errors and 2.34% drop in its accuracy in one of the tests performed. In the second design cycle, three new relations based on acoustic variations were proposed to validate the audio attributes, where in all of them the ZCR attribute was more effective to deal with the proposed variations. Conclusion: At the end of the two cycles, our approach has revealed verification flaws and has also proven effective for validation purposes of the systems under test, allowing developers of acoustic scene classification systems to apply them to their learning components, audio extraction processes, and to the test and training dataset.
ER  - 

TY  - CONF
TI  - STAGE - Software Tool for Automatic Grading of Testing Exercises - Case Study Paper
T2  - 2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C)
SP  - 491
EP  - 500
AU  - S. Pape
AU  - J. Flake
AU  - A. Beckmann
AU  - J. Jürjens
PY  - 2016
DO  - 
JO  - 2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C)
Y1  - 14-22 May 2016
AB  - We report on an approach and associated tool-support for automatically evaluating and grading exercises in Software Engineering courses, by connecting various third-party tools to the online learning platform Moodle. In the case study presented here, the tool was used in several instances of a lecture course to automatically measure the test coverage criteria wrt. the test cases defined by the students for given Java code. We report on empirical evidence gathered using this case-study (involving more than 250 students), including the results of a survey conducted after the exercises (which yielded positive feedback from the students), as well as a performance evaluation of our tool implementation.
ER  - 

TY  - CONF
TI  - On Using k-means Clustering for Test Suite Reduction
T2  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 380
EP  - 385
AU  - N. Chetouane
AU  - F. Wotawa
AU  - H. Felbinger
AU  - M. Nica
PY  - 2020
DO  - 10.1109/ICSTW50294.2020.00068
JO  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 24-28 Oct. 2020
AB  - Testing large software or other systems where test execution is time consuming or requires high computational resources is difficult and requires the selection of appropriate test cases. In the context of testing, appropriate means to have tests that most likely reveal faults or at least indicate when passing that the important functionality of the system works. In practice it is often the case that we have to reduce available test suites in order to finalize testing in a given time not exceeding other resources. In this paper, we introduce a machine learning based algorithm for test suite reduction that combines k-means clustering with binary search. The idea behind the algorithm is to cluster test cases that are close together and to select a representative test case from each of the clusters to be used in the new reduced test suite. We use binary search for looking for the proper number of clusters that allows to reduce the test suite under the condition of not substantially deviating from coverage or mutation score obtained from the initial tests suite. Besides discussing the algorithm, we present experimental results using small to larger Java programs with different types of inputs and outputs. For all example cases we were able to considerably reduce the number of test cases requiring a short reduction time especially compared to other test suite reduction approaches.
ER  - 

TY  - CONF
TI  - Collaboration of Software Architect and Test Architect Helps to Systematically Bridge Product Lifecycle Gap
T2  - 2016 IEEE/ACM 1st International Workshop on Bringing Architectural Design Thinking Into Developers' Daily Activities (BRIDGE)
SP  - 11
EP  - 13
AU  - F. Paulisch
AU  - P. Zimmerer
PY  - 2016
DO  - 10.1145/2896935.2896936
JO  - 2016 IEEE/ACM 1st International Workshop on Bringing Architectural Design Thinking Into Developers' Daily Activities (BRIDGE)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2016 IEEE/ACM 1st International Workshop on Bringing Architectural Design Thinking Into Developers' Daily Activities (BRIDGE)
Y1  - 17-17 May 2016
AB  - In this position paper for the BRIDGE workshop we describe an approach used at Siemens to address the gap between high-level design and low-level implementation. This approach is a key part of our organization-wide qualification and training program for software-related roles. These roles include both a “software architect” and a “test architect” and these roles (as well as other roles) must collaborate closely as a kind of “joint venture”.
ER  - 

TY  - CONF
TI  - Data Driven Testing of Cyber Physical Systems
T2  - 2021 IEEE/ACM 14th International Workshop on Search-Based Software Testing (SBST)
SP  - 16
EP  - 19
AU  - D. Humeniuk
AU  - G. Antoniol
AU  - F. Khomh
PY  - 2021
DO  - 10.1109/SBST52555.2021.00010
JO  - 2021 IEEE/ACM 14th International Workshop on Search-Based Software Testing (SBST)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 IEEE/ACM 14th International Workshop on Search-Based Software Testing (SBST)
Y1  - 31-31 May 2021
AB  - Consumer grade cyber-physical systems (CPS) are becoming an integral part of our life, automatizing and simplifying everyday tasks. Indeed, due to complex interactions between hardware, networking and software, developing and testing such systems is known to be a challenging task. Various quality assurance and testing strategies have been proposed. The most common approach for pre-deployment testing is to model the system and run simulations with models or software in the loop. In practice, most often, tests are run for a small number of simulations, which are selected based on the engineers' domain knowledge and experience. In this paper we propose an approach to automatically generate fault-revealing test cases for CPS. We have implemented our approach in Python, using standard frameworks and used it to generate scenarios violating temperature constraints for a smart thermostat implemented as a part of our IoT testbed. Data collected from an application managing a smart building have been used to learn models of the environment under ever changing conditions. The suggested approach allowed us to identify several pit-fails, scenarios (i.e., environment conditions and inputs), where the system behaves not as expected.
ER  - 

TY  - CONF
TI  - An Agent-based Architecture for AI-Enhanced Automated Testing for XR Systems, a Short Paper
T2  - 2021 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 213
EP  - 217
AU  - I. S. W. B. Prasetya
AU  - S. Shirzadehhajimahmood
AU  - S. G. Ansari
AU  - P. Fernandes
AU  - R. Prada
PY  - 2021
DO  - 10.1109/ICSTW52544.2021.00044
JO  - 2021 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 12-16 April 2021
AB  - This short paper presents an architectural overview of an agent-based framework called iv4XR for automated testing that is currently under development by an H2020 project with the same name. The framework’s intended main use case of is testing the family of Extended Reality (XR) based systems (e.g. 3D games, VR sytems, AR systems), though the approach can indeed be adapted to target other types of interactive systems. The framework is unique in that it is an agent-based system. Agents are inherently reactive, and therefore are arguably a natural match to deal with interactive systems. Moreover, it is also a natural vessel for mounting and combining different AI capabilities, e.g. reasoning, navigation, and learning.
ER  - 

TY  - CONF
TI  - How we use Hermetic, Ephemeral Test Environments at Google to reduce Test Flakiness
T2  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 99
EP  - 99
AU  - C. Arguelles
PY  - 2023
DO  - 10.1109/ICSTW58534.2023.00029
JO  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 16-20 April 2023
AB  - At Google we’ve reduced test flakiness by using ephemeral, hermetic test environments. This addresses a number of root causes (unreliable dependencies, hardware issues if communication between your system and its dependencies happens over the network, tests failing to clean up or concurrently modifying state), but it has been challenging to implement at scale, and has brought its own set of problems. Come learn about our journey!
ER  - 

TY  - CONF
TI  - Selective Regression Testing based on Big Data: Comparing Feature Extraction Techniques
T2  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 322
EP  - 329
AU  - K. W. Al-Sabbagh
AU  - M. Staron
AU  - M. Ochodek
AU  - R. Hebig
AU  - W. Meding
PY  - 2020
DO  - 10.1109/ICSTW50294.2020.00058
JO  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 24-28 Oct. 2020
AB  - Regression testing is a necessary activity in continuous integration (CI) since it provides confidence that modified parts of the system are correct at each integration cycle. CI provides large volumes of data which can be used to support regression testing activities. By using machine learning, patterns about faulty changes in the modified program can be induced, allowing test orchestrators to make inferences about test cases that need to be executed at each CI cycle. However, one challenge in using learning models lies in finding a suitable way for characterizing source code changes and preserving important information. In this paper, we empirically evaluate the effect of three feature extraction algorithms on the performance of an existing ML-based selective regression testing technique. We designed and performed an experiment to empirically investigate the effect of Bag of Words (BoW), Word Embeddings (WE), and content-based feature extraction (CBF). We used stratified cross validation on the space of features generated by the three FE techniques and evaluated the performance of three machine learning models using the precision and recall metrics. The results from this experiment showed a significant difference between the models' precision and recall scores, suggesting that the BoWfed model outperforms the other two models with respect to precision, whereas a CBF-fed model outperforms the rest with respect to recall.
ER  - 

TY  - CONF
TI  - Synthetic Data Generation Using Combinatorial Testing and Variational Autoencoder
T2  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 228
EP  - 236
AU  - K. Khadka
AU  - J. Chandrasekaran
AU  - Y. Lei
AU  - R. N. Kacker
AU  - D. Richard Kuhn
PY  - 2023
DO  - 10.1109/ICSTW58534.2023.00048
JO  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 16-20 April 2023
AB  - Data is a crucial component in machine learning. However, many datasets contain sensitive information such as personally identifiable health and financial data. Access to these datasets must be restricted to avoid potential security concerns. Synthetic data generation addresses this problem by generating artificial data that are similar to, and thus could be used in place of, the original real-world data. This research introduces a synthetic data generation approach called CT-VAE that uses Combinatorial Testing (CT) and Variational Autoencoder (VAE). We first use VAE to learn the distribution of the real-world data and encode it in a latent, lower-dimensional space. Next, we use CT to sample the latent space by generating a t-way set of latent vectors, each of which represents a data point in the latent space. A synthetic dataset is generated from the t-way set by decoding each latent vector in the set. Our experimental evaluation suggests that machine learning models trained with synthetic datasets generated using our approach could achieve performance that is very similar to those trained with real-world datasets. Furthermore, our approach performs better than several state-of-the-art synthetic data generation approaches.
ER  - 

TY  - JOUR
TI  - DeepFuzzer: Accelerated Deep Greybox Fuzzing
T2  - IEEE Transactions on Dependable and Secure Computing
SP  - 2675
EP  - 2688
AU  - J. Liang
AU  - Y. Jiang
AU  - M. Wang
AU  - X. Jiao
AU  - Y. Chen
AU  - H. Song
AU  - K. -K. R. Choo
PY  - 2021
DO  - 10.1109/TDSC.2019.2961339
JO  - IEEE Transactions on Dependable and Secure Computing
IS  - 6
SN  - 1941-0018
VO  - 18
VL  - 18
JA  - IEEE Transactions on Dependable and Secure Computing
Y1  - 1 Nov.-Dec. 2021
AB  - Fuzzing is one of the most effective vulnerability detection techniques, widely used in practice. However, the performance of fuzzers may be limited by their inability to pass complicated checks, inappropriate mutation frequency, arbitrary mutation strategy, or the variability of the environment. In this article, we present DeepFuzzer, an enhanced greybox fuzzer with qualified seed generation, balanced seed selection, and hybrid seed mutation. First, we use symbolic execution in a lightweight approach to generate qualified initial seeds which then guide the fuzzer through complex checks. Second, we apply a statistical seed selection algorithm to balance the mutation frequency between different seeds. Further, we develop a hybrid mutation strategy. The random and restricted mutation strategies are combined to maintain a dynamic balance between global exploration and deep search. We evaluate DeepFuzzer on the widely used benchmark Google fuzzer-test-suite which consists of real-world programs. Compared with AFL, AFLFast, FairFuzz, QSYM, and MOPT in the 24-hour experiment, DeepFuzzer discovers 30, 240, 102, 147, and 257 percent more unique crashes, executes 40, 36, 36, 98, and 15 percent more paths, and covers 37, 34, 34, 101, and 11 percent more branches, respectively. Furthermore, we present the practice of fuzzing a message middleware from Huawei with DeepFuzzer, and nine new vulnerabilities are reported.
ER  - 

TY  - CONF
TI  - Research on Real-Time Signal Transmission System of Competitive Sports Competition under Computer Big Data Technology
T2  - 2023 IEEE International Conference on Control, Electronics and Computer Technology (ICCECT)
SP  - 444
EP  - 448
AU  - Q. Shi
PY  - 2023
DO  - 10.1109/ICCECT57938.2023.10141050
JO  - 2023 IEEE International Conference on Control, Electronics and Computer Technology (ICCECT)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2023 IEEE International Conference on Control, Electronics and Computer Technology (ICCECT)
Y1  - 28-30 April 2023
AB  - This paper makes a detailed description of the construction, workflow, software testing and live effects of the virtual system through the use of the virtual system in the live broadcast of competitive sports competitions. This paper innovatively proposes a real-time signal transmission system for sports competitions based on computer big data technology. The system is mainly composed of video system composition, signal production process, and several major functional architectures of system core equipment. Aiming at real-time signal transmission, this paper innovatively proposes a chaotic system based on Duffing oscillator to detect weak sinusoidal signals in the background of color noise. The experimental research shows that the method proposed in this paper has practicability for the detection of real-time signals of competitive sports, especially the detection of weak signals submerged in the background of strong color noise is superior to the traditional time domain detection method.
ER  - 

TY  - CONF
TI  - Avionics Testing with Artificial Intelligence Support
T2  - 2020 AIAA/IEEE 39th Digital Avionics Systems Conference (DASC)
SP  - 1
EP  - 5
AU  - P. Paces
PY  - 2020
DO  - 10.1109/DASC50938.2020.9256563
JO  - 2020 AIAA/IEEE 39th Digital Avionics Systems Conference (DASC)
IS  - 
SN  - 2155-7209
VO  - 
VL  - 
JA  - 2020 AIAA/IEEE 39th Digital Avionics Systems Conference (DASC)
Y1  - 11-15 Oct. 2020
AB  - This paper describes a concept allowing for automated testing of avionics installed on a test bench where concepts of Artificial Intelligence are used. This test bench technology provides means for fast discovery of changes in behavior of new releases of avionics software where feature corrections can lead to modified behavior of other functions. The tested avionics is installed in a simulator test bench allowing to simulate behavior and systems of the respective airplane type. The test bench allows the pilot himself to test the functionality which can be repeated by the automation system itself. The technology behind the simulator collects all the data from the test bench internal buses under different conditions to be used as a reference to identity deviations from expected behavior of the avionic systems. The Artificial Intelligence methods used in our approach include state space search algorithms for determination of required control routines and data learning related to identification of deviations in behavior.
ER  - 

TY  - CONF
TI  - Augmenting Equivalent Mutant Dataset Using Symbolic Execution
T2  - 2022 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 150
EP  - 159
AU  - S. Chung
AU  - S. Yoo
PY  - 2022
DO  - 10.1109/ICSTW55395.2022.00038
JO  - 2022 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2022 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 4-13 April 2022
AB  - Mutation testing aims to ensure that a test suite is capable of detecting real faults, by checking whether they can reveal (i.e., kill) small and arbitrary lexical changes made to the program (i.e., mutants). Some of these arbitrary changes may result in a mutant that is syntactically different but is semantically equivalent to the original program under test: such mutants are called equivalent mutants. Since program equivalence is undecidable in general, equivalent mutants pose a serious challenge to mutation testing. Given an unkilled mutant, it is not possible to automatically decide whether the cause is the weakness of test cases or the equivalence of the mutant. Recently machine learning has been adopted to train binary classification models for mutant equivalence. However, training such classification models requires a pool of equivalent mutants, the labelling for which involves a significant amount of human investigation. In this paper, we introduce two techniques that can be used to augment the equivalent mutant benchmarks. First, we propose a symbolic execution-based validation of mutant equivalence, instead of manual classification. Second, we introduce a synthesis technique for equivalent mutants: for a subset of mutation operators, the technique identifies potential mutation locations that are guaranteed to produce equivalent mutants. We compare these two techniques to MutantBench, a manually labelled equivalent mutant benchmark. For the 19 programs studied, MutantBench contains 462 equivalent mutants, whereas our technique is capable of generating 1,725 equivalent mutants automatically, of which 1,349 are new and unique. We further show that the additional equivalent mutants can lead to more accurate equivalent mutant classification models.
ER  - 

TY  - CONF
TI  - Model-Based Policy Synthesis and Test-Case Generation for Autonomous Systems
T2  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 18
EP  - 27
AU  - R. Gu
AU  - E. Enoiu
PY  - 2023
DO  - 10.1109/ICSTW58534.2023.00017
JO  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 16-20 April 2023
AB  - Autonomous systems are supposed to automatically plan their actions and execute the plan without human intervention. In this paper, we propose a model-based two-layer frame-work for policy synthesis and test-case generation for autonomous systems. At the high-level layer of the framework, we have two kinds of methods for synthesising policies whose correctness is guaranteed by model checking. The autonomous system’s controller executes synthesised policies at the low-level layer. As the kinematics of autonomous systems is often nonlinear and the environment may influence the results of their actions, formally verifying the controllers is extremely difficult. We propose a novel method for generating test cases for the controllers at the low-level layer. The method employs reinforcement learning for test-case generation and model checking to ensure that the test cases faithfully realise the execution of the policy. The framework is designed in Uppaal Stratego, which integrates model checkers and algorithms for policy synthesis. Therefore, the framework separates concerns and seamlessly interchanges the information between two layers.
ER  - 

TY  - CONF
TI  - An Effective Crowdsourced Test Report Clustering Model Based on Sentence Embedding
T2  - 2021 IEEE 21st International Conference on Software Quality, Reliability and Security (QRS)
SP  - 888
EP  - 899
AU  - H. Chen
AU  - S. Huang
AU  - Y. Liu
AU  - R. Luo
AU  - Y. Xie
PY  - 2021
DO  - 10.1109/QRS54544.2021.00098
JO  - 2021 IEEE 21st International Conference on Software Quality, Reliability and Security (QRS)
IS  - 
SN  - 2693-9177
VO  - 
VL  - 
JA  - 2021 IEEE 21st International Conference on Software Quality, Reliability and Security (QRS)
Y1  - 6-10 Dec. 2021
AB  - In the crowdsourced testing industry, efficient and automated classification of true bugs from test reports can greatly reduce the cost of software testing. Most of the existing methods are based on TF-IDF or machine learning methods to vectorize the test report and then construct a classifier. However, the document vector constructed by keywords more or less ignores the description information in the document, which affects the performance of classification and detection of real defects. In order to use the description information to construct an effective report clustering model, we propose a model called RCSE to encode test report description information at the sentence level, calculate the similarity between the test reports from the feature similarity of the description sentence, then cluster the test report. We evaluated the model on 3,442 reports. The experimental results show that the clustering model based on sentence embedding has an average purity of 12.3 % and an ARI of 22.0% higher than the keyword-based model on three report datasets.
ER  - 

TY  - JOUR
TI  - An Empirical Study on the Ability Relationships Between Programming and Testing
T2  - IEEE Access
SP  - 161438
EP  - 161448
AU  - P. Yang
AU  - Z. Liu
AU  - J. Xu
AU  - Y. Huang
AU  - Y. Pan
PY  - 2020
DO  - 10.1109/ACCESS.2020.3018718
JO  - IEEE Access
IS  - 
SN  - 2169-3536
VO  - 8
VL  - 8
JA  - IEEE Access
Y1  - 2020
AB  - Under the software quality management mechanism, developers are generally required to review and test their own code firstly to ensure that the submitted code meets specific quality standards. At the same time, with the popularity of test-driven development (TDD) and extreme programming (XP), programming and testing are complementary in the process of software development, i.e., software testing has become as important as programming. Despite its importance, there is no empirical study that investigates the ability relationships between programming and testing. This article presents such a study, where we designed software tasks to investigate the ability of programming and testing. We distributed the program tasks to software vocational students and analyzed the results from multiple dimensions. Our main findings show that (i) almost half of the developers with strong programming ability do not have a good testing ability; (ii) some developers with weak programming ability can do well in testing; (iii) compared with programming ability, testing fundamentals have a greater impact on the testing ability; and (iv) most developers can do well at finding bugs but lack experience in writing test scripts.
ER  - 

TY  - CONF
TI  - Automatic Equivalent Mutants Classification Using Abstract Syntax Tree Neural Networks
T2  - 2021 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 13
EP  - 18
AU  - S. Peacock
AU  - L. Deng
AU  - J. Dehlinger
AU  - S. Chakraborty
PY  - 2021
DO  - 10.1109/ICSTW52544.2021.00016
JO  - 2021 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 12-16 April 2021
AB  - Mutation testing is a testing technique that is effective at designing tests and evaluating an existing test suite. Even though mutation testing has been developed to be applicable and effective towards different types of software systems and programing languages for many years, wide industrial use of mutation testing has not yet been seen. One primary reason that prevents developers and testers from using mutation testing is the expensive computational cost. Specifically, the need to manually identify equivalent mutants is a major obstacle and makes mutation testing very time consuming and labor intensive. This paper addresses this limitation and proposes a machine learning-based approach that designs and trains an abstract syntax tree recurrent neural network model to automatically classify equivalent mutants during the process of mutation testing. A pilot study with 582 mutants shows that the proposed machine learning-based approach can automatically classify equivalent mutants with an accuracy higher than 90%. The approach can significantly save the manual effort and time spent on identifying equivalent mutants during the process of mutation testing.
ER  - 

TY  - CONF
TI  - AI-assisted Software Engineering: a tertiary study
T2  - 2023 12th Mediterranean Conference on Embedded Computing (MECO)
SP  - 1
EP  - 6
AU  - O. Cico
AU  - B. Cico
AU  - A. Cico
PY  - 2023
DO  - 10.1109/MECO58584.2023.10154972
JO  - 2023 12th Mediterranean Conference on Embedded Computing (MECO)
IS  - 
SN  - 2637-9511
VO  - 
VL  - 
JA  - 2023 12th Mediterranean Conference on Embedded Computing (MECO)
Y1  - 6-10 June 2023
AB  - The research in Artificial Intelligence (AI) and its applications across the software engineering (SE) domain has progressed significantly in the last decade, evidenced by an increase in systematic literature reviews. Our study aims to provide an overview of existing systematic reviews within this research area and synthesize the findings related to AI subfields (Machine Learning, Search-based, Evolutionary Computation, Vision, Robotics, Expert Systems, Speech Processing, Natural Language Processing, and Planning) supporting the five main SE processes: requirements, design, development, testing, and maintenance. For our tertiary study, we used the methodology based on Kitchenham's guidelines. We selected 11 reviews published between 2000 and 2021, including results from 513 primary studies. The selected reviews cover the AI subfields across the five main SE processes. Studies have covered Machine Learning, Natural Language Processing, and Evolutionary Computations as AI subfields assisting SE processes. We have found that reviews in AI-assisted software testing are the most common, followed by software maintenance and development. Our study can help researchers identify missing reviews on AI-assisted SE topics to help further consolidate this research area.
ER  - 

TY  - CONF
TI  - BinaryRTS: Cross-language Regression Test Selection for C++ Binaries in CI
T2  - 2023 IEEE Conference on Software Testing, Verification and Validation (ICST)
SP  - 327
EP  - 338
AU  - D. Elsner
AU  - S. Kacianka
AU  - S. Lipp
AU  - A. Pretschner
AU  - A. Habermann
AU  - M. Graber
AU  - S. Reimer
PY  - 2023
DO  - 10.1109/ICST57152.2023.00038
JO  - 2023 IEEE Conference on Software Testing, Verification and Validation (ICST)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2023 IEEE Conference on Software Testing, Verification and Validation (ICST)
Y1  - 16-20 April 2023
AB  - Continuous integration (CI) pipelines are commonly used to execute regression tests before pull requests are merged. Regression test selection (RTS) aims to reduce the required testing effort and feedback time for developers. However, existing RTS techniques are imprecise for tests with cross-language links to compiled C++ binaries or unsafe if tests use external files. This is problematic because modern software in fact involves several programming languages and (non-)code artifacts such as configuration files. In this paper, we present BinaryRTS, a novel RTS technique that leverages dynamic binary instrumentation to collect the covered functions and accessed external files for each test. BinaryRTS then selects tests depending on changes issued to C++ binaries or external (non-)code artifacts. When evaluating BinaryRTS in our large-scale industrial context, we are able to exclude on average up to 74% of tests without missing real failures. We release BinaryRTS as the first publicly available RTS tool for software involving C++ code.
ER  - 

TY  - CONF
TI  - DIRTS: Dependency Injection Aware Regression Test Selection
T2  - 2023 IEEE Conference on Software Testing, Verification and Validation (ICST)
SP  - 422
EP  - 432
AU  - S. Hundsdorfer
AU  - D. Elsner
AU  - A. Pretschner
PY  - 2023
DO  - 10.1109/ICST57152.2023.00046
JO  - 2023 IEEE Conference on Software Testing, Verification and Validation (ICST)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2023 IEEE Conference on Software Testing, Verification and Validation (ICST)
Y1  - 16-20 April 2023
AB  - Regression test selection (RTS) aims to reduce regression testing effort by selecting only those tests that are affected by introduced changes. RTS techniques are considered to be safe if they select all affected test cases. Several supposedly safe RTS tools have been developed over the past decades, lately especially for Java projects. However, recent studies have shown that state-of-the-art RTS tools for Java can become unsafe when confronted with dependency injection (DI) mechanisms: despite the widespread use of DI frameworks in Java projects, no existing technique acknowledges DI-related changes. In this paper, we analyze the reasons behind unsafe RTS behavior for DI-related changes and develop Dirts, a novel DI-aware RTS tool for Java. To counteract effects of DI on RTS, Dirts efficiently analyzes source code annotations and metadata employed by popular DI frameworks, and generates a dependency graph including edges for dynamically injected objects. We evaluate Dirts on 228 commits from 9 open-source Java projects that use DI. Our results indicate that in 33.3% of those commits DI-related changes affect some tests, and in 3.1% (7) Dirts identifies affected tests that are clearly missed by the static RTS tool STARTS. Still, Dirts is comparatively efficient and precise. We publish Dirts 1, 2 as an RTS tool that can either be used as a safety extension for existing RTS tools or as a standalone RTS solution.
ER  - 

TY  - CONF
TI  - XCSF with Experience Replay for Automatic Test Case Prioritization
T2  - 2020 IEEE Symposium Series on Computational Intelligence (SSCI)
SP  - 1307
EP  - 1314
AU  - L. Rosenbauer
AU  - A. Stein
AU  - D. Pätzel
AU  - J. Hähner
PY  - 2020
DO  - 10.1109/SSCI47803.2020.9308379
JO  - 2020 IEEE Symposium Series on Computational Intelligence (SSCI)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE Symposium Series on Computational Intelligence (SSCI)
Y1  - 1-4 Dec. 2020
AB  - The verification of a new product is of major importance for companies. With the rise of test automation, companies start to rely on huge numbers of tests. Often, it is not feasible to run all available tests due to time constraints. Thus, a test suite of critical tests has to be determined. Recent research has shown that reinforcement learning is suitable for this prioritization problem: neural networks and XCS(F) learning classifier systems have been applied to this task. We extend the existing XCSF-based agent by incorporating experience replay (ER) in order to improve learning efficiency. In an experimental evaluation we show that this not only boosts performance but also enables our agent to exceed the aforementioned solutions. For XCSF without ER and neural networks, the most suitable reward function is strongly dependent on the underlying data set. This is in practice a downside as reward functions usually need to be chosen a priori in order to ensure the quality of the chosen test suite. However, for our improved agent this is not the case and we can give a clear recommendation for the reward function.
ER  - 

TY  - JOUR
TI  - Generative Adversarial Networks-Based Imbalance Learning in Software Aging-Related Bug Prediction
T2  - IEEE Transactions on Reliability
SP  - 626
EP  - 642
AU  - S. S. Chouhan
AU  - S. S. Rathore
PY  - 2021
DO  - 10.1109/TR.2021.3052510
JO  - IEEE Transactions on Reliability
IS  - 2
SN  - 1558-1721
VO  - 70
VL  - 70
JA  - IEEE Transactions on Reliability
Y1  - June 2021
AB  - Software aging refers to a problem of performance decay in the software systems, which are running for a long period. The primary cause of this phenomenon is the accumulation of run-time errors in the software, which are also known as aging-related bugs (ARBs). Many efforts have been reported earlier to predict the origin of ARBs in the software so that these bugs can be identified and fixed during testing. Imbalanced dataset, where the representation of ARBs patterns is very less as compared to the representation of the non-ARBs pattern significantly hinders the performance of the ARBs prediction models. Therefore, in this article, we present an oversampling approach, generative adversarial networks-based synthetic data generation-based ARBs prediction models. The approach uses generative adversarial networks to generate synthetic samples for the ARBs patterns in the given datasets implicitly and build the prediction models on the processed datasets. To validate the performance of the presented approach, we perform an experimental study for the seven ARBs datasets collected from the public repository and use various performance measures to evaluate the results. The experimental results showed that the presented approach led to the improved performance of prediction models for the ARBs prediction as compared to the other state-of-the-art models.
ER  - 

TY  - CONF
TI  - Advanced Framework for Automated Testing of Mobile Applications
T2  - 2022 4th Novel Intelligent and Leading Emerging Sciences Conference (NILES)
SP  - 233
EP  - 238
AU  - M. A. Salam
AU  - S. Taha
AU  - M. G. Hamed
PY  - 2022
DO  - 10.1109/NILES56402.2022.9942374
JO  - 2022 4th Novel Intelligent and Leading Emerging Sciences Conference (NILES)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2022 4th Novel Intelligent and Leading Emerging Sciences Conference (NILES)
Y1  - 22-24 Oct. 2022
AB  - The stage of software testing should be at the same degree of speed as development and software release, so the automation test is necessary to be aligned with other stages of the life cycle of development for software. In two weeks of sprints developing, testers should run a complete test with high quality and at reasonable speed. Manual testing can not be sufficient to deliver a product with high quality with Agile methodology because it may not cover all possibilities of occurrence for all expected bugs. The paper explains the advanced automation testing framework, which depends on open source tools such as Appium for handling automation testing to resolve these issues. The automation framework makes functional testing for two mobile platforms possible. To reduce effort and skillset development, the framework implements custom methods and libraries. This framework is an enhancement to the precedent environment in which we tried to solve the drawbacks of this precedent environment.
ER  - 

TY  - CONF
TI  - An Empirical Framework for Code Smell Prediction using Extreme Learning Machine
T2  - 2019 9th Annual Information Technology, Electromechanical Engineering and Microelectronics Conference (IEMECON)
SP  - 189
EP  - 195
AU  - H. Gupta
AU  - L. Kumar
AU  - L. B. M. Neti
PY  - 2019
DO  - 10.1109/IEMECONX.2019.8877082
JO  - 2019 9th Annual Information Technology, Electromechanical Engineering and Microelectronics Conference (IEMECON)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2019 9th Annual Information Technology, Electromechanical Engineering and Microelectronics Conference (IEMECON)
Y1  - 13-15 March 2019
AB  - The software containing code smells indicates the violation of standard design and coding practices by developer during the development of the software system. Recent empirical studies observed that classes having code smells have higher probability of change proneness or fault proneness with respect to classes having no code smells [1]. The effort of removing bugs due to code smells increases exponentially if the smells are not identified during the earlier phases of software development. The code smell prediction using source code metrics can be used in starting phases of software development life cycle to reduce the maintenance and testing effort of software and also help in improving the quality of the software. The work in this paper empirically investigates and evaluates different classification techniques, feature selection techniques, and data sampling techniques to handle imbalance data in predicting 7 different types of code smell. The conclusion of this research is assessed over 629 application packages. The experimental finding confirms the estimating capability of different classifiers, feature selection, and data imbalance techniques for developing code smell prediction models. Our analysis also reveals that the models developed using one technique are superior than the models developed using other techniques.
ER  - 

TY  - CONF
TI  - Hammer and Nails - Crucial Practices and Tools in Ad Hoc Student Teams
T2  - 2016 IEEE 29th International Conference on Software Engineering Education and Training (CSEET)
SP  - 142
EP  - 146
AU  - M. Leppänen
AU  - S. Lahtinen
AU  - P. Ihantola
PY  - 2016
DO  - 10.1109/CSEET.2016.38
JO  - 2016 IEEE 29th International Conference on Software Engineering Education and Training (CSEET)
IS  - 
SN  - 2377-570X
VO  - 
VL  - 
JA  - 2016 IEEE 29th International Conference on Software Engineering Education and Training (CSEET)
Y1  - 5-6 April 2016
AB  - We have observed students teams on a software engineering project course to understand what software engineering practices they end up using and how do they experience the usefulness of the selected practices and tools. In our context, the most often applied practices and tools were planning meeting, commitment to using tasks, self-selected communication tools, a revision control, and project management systems. We found out that student valued various face-to-face activities the most - even more than they were able to practice them. Finally, the wide variety of communication tools students take even from their leisure time and apply in the course setting surprised us.
ER  - 

TY  - CONF
TI  - Learning Test Input Constraints from Branch Conditions
T2  - 2023 IEEE/ACM 45th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
SP  - 248
EP  - 250
AU  - L. Bettscheider
PY  - 2023
DO  - 10.1109/ICSE-Companion58688.2023.00067
JO  - 2023 IEEE/ACM 45th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
IS  - 
SN  - 2574-1934
VO  - 
VL  - 
JA  - 2023 IEEE/ACM 45th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
Y1  - 14-20 May 2023
AB  - Precise input specifications are the holy grail of blackbox test generation. In order to test programs that process structured inputs effectively, inputs should match the expected input format. Otherwise, they are likely to be rejected during initial input validation, and fail to reach the main application logic. While the structure and constraints of widely used data formats such as XML are known, the input constraints imposed by application logic are vast, unstructured, and encoded in branch conditions. Hence, they are rarely specified manually, leaving large parts of the program unexplored by blackbox techniques. We propose to address this issue by dynamically externalizing local constraints and exposing them to system-level test generators. These could combine such constraints with an existing input specification in order to find global solutions. This could provide a means to explore application logic systematically.
ER  - 

TY  - CONF
TI  - Cross-Project Aging Related Bug Prediction
T2  - 2015 IEEE International Conference on Software Quality, Reliability and Security
SP  - 43
EP  - 48
AU  - F. Qin
AU  - Z. Zheng
AU  - C. Bai
AU  - Y. Qiao
AU  - Z. Zhang
AU  - C. Chen
PY  - 2015
DO  - 10.1109/QRS.2015.17
JO  - 2015 IEEE International Conference on Software Quality, Reliability and Security
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2015 IEEE International Conference on Software Quality, Reliability and Security
Y1  - 3-5 Aug. 2015
AB  - In a long running system, software tends to encounter performance degradation and increasing failure rate during execution, which is called software aging. The bugs contributing to the phenomenon of software aging are defined as Aging Related Bugs (ARBs). Lots of manpower and economic costs will be saved if ARBs can be found in the testing phase. However, due to the low presence probability and reproducing difficulty of ARBs, it is usually hard to predict ARBs within a project. In this paper, we study whether and how ARBs can be located through cross-project prediction. We propose a transfer learning based aging related bug prediction approach (TLAP), which takes advantage of transfer learning to reduce the distribution difference between training sets and testing sets while preserving their data variance. Furthermore, in order to mitigate the severe class imbalance, class imbalance learning is conducted on the transferred latent space. Finally, we employ machine learning methods to handle the bug prediction tasks. The effectiveness of our approach is validated and evaluated by experiments on two real software systems. It indicates that after the processing of TLAP, the performance of ARB bug prediction can be dramatically improved.
ER  - 

TY  - CONF
TI  - Uncertainty-Driven Black-Box Test Data Generation
T2  - 2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)
SP  - 253
EP  - 263
AU  - N. Walkinshaw
AU  - G. Fraser
PY  - 2017
DO  - 10.1109/ICST.2017.30
JO  - 2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)
Y1  - 13-17 March 2017
AB  - We can never be certain that a software system is correct simply by testing it, but with every additional successful test we become less uncertain about its correctness. In absence of source code or elaborate specifications and models, tests are usually generated or chosen randomly. However, rather than randomly choosing tests, it would be preferable to choose those tests that decrease our uncertainty about correctness the most. In order to guide test generation, we apply what is referred to in Machine Learning as "Query Strategy Framework": We infer a behavioural model of the system under test and select those tests which the inferred model is "least certain" about. Running these tests on the system under test thus directly targets those parts about which tests so far have failed to inform the model. We provide an implementation that uses a genetic programming engine for model inference in order to enable an uncertainty sampling technique known as "query by committee", and evaluate it on eight subject systems from the Apache Commons Math framework and JodaTime. The results indicate that test generation using uncertainty sampling outperforms conventional and Adaptive Random Testing.
ER  - 

TY  - CONF
TI  - A Combinatorial Approach to Testing Deep Neural Network-based Autonomous Driving Systems
T2  - 2021 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 57
EP  - 66
AU  - J. Chandrasekaran
AU  - Y. Lei
AU  - R. Kacker
AU  - D. Richard Kuhn
PY  - 2021
DO  - 10.1109/ICSTW52544.2021.00022
JO  - 2021 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 12-16 April 2021
AB  - Recent advancements in the field of deep learning have enabled its application in Autonomous Driving Systems (ADS). A Deep Neural Network (DNN) model is often used to perform tasks such as pedestrian detection, object detection, and steering control in ADS. Unfortunately, DNN models could exhibit incorrect or unexpected behavior in real-world scenarios. There is a need to rigorously test these models with real-world driving scenarios so that safety-critical bugs can be detected before their deployment in the real world.In this paper, we propose a combinatorial approach to testing DNN models. Our approach generates test images by applying a set of combinations of some basic image transformation operations to a seed image. First, we identify a set of valid transformation operations or simply transformations. Next, we design an input parameter model based on the valid transformations and generate a t-way (t=2) combinatorial test set. Each test represents a combination of transformations, and can be used to produce a test image. We execute the test images on a DNN model and distinguish between consistent and inconsistent behavior using a relation. We conducted an experimental evaluation of our approach on three DNN models that are used in the Udacity challenge. Our results suggest that test images generated by our approach can effectively identify inconsistent behaviors and can significantly increase neuron coverage. To the best of our knowledge, our work is the first effort to use a combinatorial testing approach to generating test images based on image transformations for testing DNNs used in ADS.
ER  - 

TY  - CONF
TI  - Towards Code Generation from BDD Test Case Specifications: A Vision
T2  - 2023 IEEE/ACM 2nd International Conference on AI Engineering – Software Engineering for AI (CAIN)
SP  - 139
EP  - 144
AU  - L. Chemnitz
AU  - D. Reichenbach
AU  - H. Aldebes
AU  - M. Naveed
AU  - K. Narasimhan
AU  - M. Mezini
PY  - 2023
DO  - 10.1109/CAIN58948.2023.00031
JO  - 2023 IEEE/ACM 2nd International Conference on AI Engineering – Software Engineering for AI (CAIN)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2023 IEEE/ACM 2nd International Conference on AI Engineering – Software Engineering for AI (CAIN)
Y1  - 15-16 May 2023
AB  - Automatic code generation has recently attracted large attention and is becoming more significant to the software development process. Solutions based on Machine Learning and Artificial Intelligence are being used to increase human and software efficiency in potent and innovative ways. In this paper, we aim to leverage these developments and introduce a novel approach to generating frontend component code for the popular Angular framework. We propose to do this using behavior-driven development test specifications as input to a transformer-based machine learning model; however, we do not provide any proof-of-concept solution in this work. Our approach aims to drastically reduce the development time needed for web applications while potentially increasing software quality and introducing new research ideas toward automatic code generation.
ER  - 

TY  - CONF
TI  - An evaluation method for panoramic understanding of programming by comparison with visual examples
T2  - 2015 IEEE Frontiers in Education Conference (FIE)
SP  - 1
EP  - 8
AU  - D. M. Calderon
AU  - K. Man
AU  - H. Kiyomitsu
AU  - K. Ohtsuki
AU  - Y. Miyamoto
AU  - Y. Sun
PY  - 2015
DO  - 10.1109/FIE.2015.7344104
JO  - 2015 IEEE Frontiers in Education Conference (FIE)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2015 IEEE Frontiers in Education Conference (FIE)
Y1  - 21-24 Oct. 2015
AB  - In recent years, professionals in different fields have become able to do programming by using simplified software tools, as a consequence of this they are becoming able to understand programming in a general or “panoramic” way. This understanding is not evaluated by current programming abilities testing methods such as written paper tests or practical programming. This paper proposes a Programmed Visual Contents Comparison Method to assess programming ability, and additionally, a testing system based on this method. With this method, by comparing 2 displayed images and interactive animations produced by programming samples (a question) a subject must decide which one of the programs is more difficult to build with programming than the other, or, if the difficulty is similar for both of them. The validity of the method is confirmed by comparing the ability reported by programming teachers with the results of an experiment performed with a testing system.
ER  - 

TY  - CONF
TI  - Unbalanced data processing for software defect prediction
T2  - 2022 4th International Conference on Data-driven Optimization of Complex Systems (DOCS)
SP  - 1
EP  - 6
AU  - Y. Qu
AU  - Z. Li
AU  - J. Zhao
AU  - H. Li
PY  - 2022
DO  - 10.1109/DOCS55193.2022.9967755
JO  - 2022 4th International Conference on Data-driven Optimization of Complex Systems (DOCS)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2022 4th International Conference on Data-driven Optimization of Complex Systems (DOCS)
Y1  - 28-30 Oct. 2022
AB  - How to solve the imbalance of defect classification in software defect prediction and improve the accuracy of prediction is an important problem in software testing. Thus many machining learning based model, such as self-adaptive Robust Synthetic Minority Over-Sampling Technique (RSMOTE), ware presented for software defect prediction. However, the imbalanced data distribution limited the prediction performance. Addressing to this issue, a RSMOTE-based Data Imbalance Processing (RDIP) model is presented in this paper. Specifically, the normalized outlier data is removed according to the European distance between points in data denoising, and then the fuzzy membership and fuzzy labels of each point are calculated using the Computational Class Fuzzy Algorithm (FCMD), which removes the hazard points and noise points according to the selection boundary point algorithm (BRS). Experimental results the date sets of NASA, Promise show that the average F1-measure of software defect prediction method for data imbalance is 6.98% higher than other comparison algorithms, which can effectively solve the problem of defect classification imbalance in software defect prediction.
ER  - 

TY  - CONF
TI  - Manual and Automated Web-based Testing of the NPTEL Portal
T2  - 2023 International Conference on Artificial Intelligence and Knowledge Discovery in Concurrent Engineering (ICECONF)
SP  - 1
EP  - 7
AU  - D. S. N
AU  - S. M. D A
AU  - G. J
PY  - 2023
DO  - 10.1109/ICECONF57129.2023.10084058
JO  - 2023 International Conference on Artificial Intelligence and Knowledge Discovery in Concurrent Engineering (ICECONF)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2023 International Conference on Artificial Intelligence and Knowledge Discovery in Concurrent Engineering (ICECONF)
Y1  - 5-7 Jan. 2023
AB  - The NPTEL (National Programme on Technology Enhanced Learning) program is an initiative to provide accessibility to the resources of well-structured courses that are developed in the reputed institutions of the country. In this study, we attempt to identify the correctness, completeness, and quality of the developed NPTEL web portal. In the many forms and page redirects, we attempt to test the validation of input fields and performance using the automated software testing tool, Selenium. By incorporating the black-box testing strategy and its conditions, the NPTEL portal and its subsidiary portal, the GATE portal, were tested. The goal of the study is to analyse the presence of vulnerabilities in the NPTEL Portal and assess it for robustness and adaptability.
ER  - 

TY  - CONF
TI  - Cross project source code based risk analysis to identify fault prone modules
T2  - 2016 3rd International Conference on Computing for Sustainable Global Development (INDIACom)
SP  - 3801
EP  - 3807
AU  - I. Kaur
AU  - N. Kapoor
PY  - 2016
DO  - 
JO  - 2016 3rd International Conference on Computing for Sustainable Global Development (INDIACom)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2016 3rd International Conference on Computing for Sustainable Global Development (INDIACom)
Y1  - 16-18 March 2016
AB  - Manual software testing requires a lot of resources and time. Fault prone module prediction is an emerging approach to efficiently use the available resources. The accurate prediction of fault prone modules will enable the testing process focus on the complex software modules. In this paper, the authors have studied various emerging metrics and techniques to predict the fault prone modules and their advantages and disadvantages. Also, a new approach has been proposed to solve the disadvantages found in the studied techniques.
ER  - 

TY  - JOUR
TI  - Advanced Crowdsourced Test Report Prioritization Based on Adaptive Strategy
T2  - IEEE Access
SP  - 53522
EP  - 53532
AU  - P. Zhu
AU  - Y. Li
AU  - T. Li
AU  - H. Ren
AU  - X. Sun
PY  - 2022
DO  - 10.1109/ACCESS.2022.3176086
JO  - IEEE Access
IS  - 
SN  - 2169-3536
VO  - 10
VL  - 10
JA  - IEEE Access
Y1  - 2022
AB  - Crowdsourced testing is an emerging trend in software testing, which takes advantage of the efficiency of crowdsourced and cloud platforms. Crowdsourced testing has gradually been applied in many fields. In crowdsourced software testing, after the crowdsourced workers complete the test tasks, they submit the test results in test reports. Therefore, in crowdsourced software testing, checking a large number of test reports is an arduous but unavoidable software maintenance task. Crowdsourced test reports are numerous, complex, and need to be sorted to improve inspection efficiency. There are no systematic methods for prioritizing reports in crowdsourcing test report prioritization. However, in regression testing, test case prioritization technology has matured. Therefore, we migrate the test case prioritization method to crowdsourced test report prioritization and evaluate the effectiveness of these methods. We use natural language processing technology and word segmentation to process the text in the test reports. Then we use four methods to prioritize the reports: total greedy algorithm, additional greedy algorithm, genetic algorithm, and ART. The results show that these methods all perform well in prioritizing crowdsourced test reports, with an average APFD of more than 0.8.
ER  - 

TY  - CONF
TI  - Automated Testing of Definition-Use Data Flow for Multithreaded Programs
T2  - 2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)
SP  - 172
EP  - 183
AU  - X. Zhang
AU  - Z. Yang
AU  - Q. Zheng
AU  - P. Liu
AU  - J. Chang
AU  - Y. Hao
AU  - T. Liu
PY  - 2017
DO  - 10.1109/ICST.2017.23
JO  - 2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)
Y1  - 13-17 March 2017
AB  - With the advent of multicore processors, there is a trend towards multithreading to take advantage of parallel computing resources. Due to greatly increased complexity, programmers need effective testing methodology that can thoroughly test multithreaded programs. There has been significant progress based on symbolic execution that attempts to exhaustively explore all the intra-thread paths and inter-thread interleavings. However, such testing approach faces two insuperable challenges. Firstly, exploring an astronomically large number of paths and interleavings limits its scalability. Secondly, a path itself does not directly help programmers understand program behavior. In this paper, we propose an alternate testing methodology that focuses on definition-use data flow instead of paths/interleavings. Such approach not only leads to orders of magnitude reduction in testing complexity, but also gives programmers direct help on examining the shared variable usage in a multithreaded program.
ER  - 

TY  - CONF
TI  - What Are We Really Testing in Mutation Testing for Machine Learning? A Critical Reflection
T2  - 2021 IEEE/ACM 43rd International Conference on Software Engineering: New Ideas and Emerging Results (ICSE-NIER)
SP  - 66
EP  - 70
AU  - A. Panichella
AU  - C. C. S. Liem
PY  - 2021
DO  - 10.1109/ICSE-NIER52604.2021.00022
JO  - 2021 IEEE/ACM 43rd International Conference on Software Engineering: New Ideas and Emerging Results (ICSE-NIER)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 IEEE/ACM 43rd International Conference on Software Engineering: New Ideas and Emerging Results (ICSE-NIER)
Y1  - 25-28 May 2021
AB  - Mutation testing is a well-established technique for assessing a test suite's quality by injecting artificial faults into production code. In recent years, mutation testing has been extended to machine learning (ML) systems, and deep learning (DL) in particular; researchers have proposed approaches, tools, and statistically sound heuristics to determine whether mutants in DL systems are killed or not. However, as we will argue in this work, questions can be raised to what extent currently used mutation testing techniques in DL are actually in line with the classical interpretation of mutation testing. We observe that ML model development resembles a test-driven development (TDD) process, in which a training algorithm ('programmer') generates a model (program) that fits the data points (test data) to labels (implicit assertions), up to a certain threshold. However, considering proposed mutation testing techniques for ML systems under this TDD metaphor, in current approaches, the distinction between production and test code is blurry, and the realism of mutation operators can be challenged. We also consider the fundamental hypotheses underlying classical mutation testing: the competent programmer hypothesis and coupling effect hypothesis. As we will illustrate, these hypotheses do not trivially translate to ML system development, and more conscious and explicit scoping and concept mapping will be needed to truly draw parallels. Based on our observations, we propose several action points for better alignment of mutation testing techniques for ML with paradigms and vocabularies of classical mutation testing.
ER  - 

TY  - CONF
TI  - Automating Testing of Visual Observed Concurrency
T2  - 2021 IEEE/ACM Ninth Workshop on Education for High Performance Computing (EduHPC)
SP  - 32
EP  - 42
AU  - P. Dewan
AU  - A. Wortas
AU  - Z. Liu
AU  - S. George
AU  - B. Gu
AU  - H. Wang
PY  - 2021
DO  - 10.1109/EduHPC54835.2021.00010
JO  - 2021 IEEE/ACM Ninth Workshop on Education for High Performance Computing (EduHPC)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 IEEE/ACM Ninth Workshop on Education for High Performance Computing (EduHPC)
Y1  - 14-14 Nov. 2021
AB  - Existing techniques for automating the testing of sequential programming assignments are fundamentally at odds with concurrent programming as they are oblivious to the algorithm used to implement the assignments. We have developed a framework that addresses this limitation for those object-based concurrent assignments whose user-interface (a) is implemented using the observer pattern and (b) makes apparent whether concurrency requirements are met. It has two components. The first component reduces the number of steps a human grader needs to take to interact with and score the user-interfaces of the submitted programs. The second component completely automates assessment by observing the events sent by the student-implemented observable objects. Both components are used to score the final submission and log interaction. The second component is also used to provide feedback during assignment implementation. Our experience shows that the framework is used extensively by students, leads to more partial credit, reduces grading time, and gives statistics about incremental student progress.
ER  - 

TY  - CONF
TI  - Collective Risk Minimization via a Bayesian Model for Statistical Software Testing
T2  - 2020 IEEE/ACM 15th International Symposium on Software Engineering for Adaptive and Self-Managing Systems (SEAMS)
SP  - 45
EP  - 56
AU  - J. Haensel
AU  - C. M. Adriano
AU  - J. Dyck
AU  - H. Giese
PY  - 2020
DO  - 10.1145/3387939.3388616
JO  - 2020 IEEE/ACM 15th International Symposium on Software Engineering for Adaptive and Self-Managing Systems (SEAMS)
IS  - 
SN  - 2157-2321
VO  - 
VL  - 
JA  - 2020 IEEE/ACM 15th International Symposium on Software Engineering for Adaptive and Self-Managing Systems (SEAMS)
Y1  - 25-26 May 2020
AB  - In the last four years, the number of distinct autonomous vehicles platforms deployed in the streets of California increased 6-fold, while the reported accidents increased 12-fold. This can become a trend with no signs of subsiding as it is fueled by a constant stream of innovations in hardware sensors and machine learning software. Meanwhile, if we expect the public and regulators to trust the autonomous vehicle platforms, we need to find better ways to solve the problem of adding technological complexity without increasing the risk of accidents. We studied this problem from the perspective of reliability engineering in which a given risk of an accident has severity and probability of occurring. Timely information on accidents is important for engineers to anticipate and reuse previous failures to approximate the risk of accidents in a new city. However, this is challenging in the context of autonomous vehicles because of the sparse nature of data on the operational scenarios (driving trajectories in a new city). Our approach was to mitigate data sparsity by reducing the state space through monitoring of multiple-vehicles operations. We then minimized the risk of accidents by determining proper allocation of tests for each equivalence class. Our contributions comprise (1) a set of strategies to monitor the operational data of multiple autonomous vehicles, (2) a Bayesian model that estimates changes in the risk of accidents, and (3) a feedback control-loop that minimizes these risks by reallocating test effort. Our results are promising in the sense that we were able to measure and control risk for a diversity of changes in the operational scenarios. We evaluated our models with data from two real cities with distinct traffic patterns and made the data available for the community.
ER  - 

TY  - CONF
TI  - DeepEvolution: A Search-Based Testing Approach for Deep Neural Networks
T2  - 2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)
SP  - 454
EP  - 458
AU  - H. Ben Braiek
AU  - F. Khomh
PY  - 2019
DO  - 10.1109/ICSME.2019.00078
JO  - 2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)
IS  - 
SN  - 2576-3148
VO  - 
VL  - 
JA  - 2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)
Y1  - 29 Sept.-4 Oct. 2019
AB  - The increasing inclusion of Deep Learning (DL) models in safety-critical systems such as autonomous vehicles have led to the development of multiple model-based DL testing techniques. One common denominator of these testing techniques is the automated generation of test cases, e.g., new inputs transformed from the original training data with the aim to optimize some test adequacy criteria. So far, the effectiveness of these approaches has been hindered by their reliance on random fuzzing or transformations that do not always produce test cases with a good diversity. To overcome these limitations, we propose, DeepEvolution, a novel search-based approach for testing DL models that relies on metaheuristics to ensure a maximum diversity in generated test cases. We assess the effectiveness of DeepEvolution in testing computer-vision DL models and found that it significantly increases the neuronal coverage of generated test cases. Moreover, using DeepEvolution, we could successfully find several corner-case behaviors. Finally, DeepEvolution outperformed Tensorfuzz (a coverage-guided fuzzing tool developed at Google Brain) in detecting latent defects introduced during the quantization of the models. These results suggest that search-based approaches can help build effective testing tools for DL systems.
ER  - 

TY  - CONF
TI  - Cognitive Computing in Software evaluation
T2  - 2020 International Conference on Decision Aid Sciences and Application (DASA)
SP  - 509
EP  - 514
AU  - H. M. Nayak
AU  - N. E
AU  - S. P. Shankar
AU  - A. B. J
PY  - 2020
DO  - 10.1109/DASA51403.2020.9317134
JO  - 2020 International Conference on Decision Aid Sciences and Application (DASA)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 International Conference on Decision Aid Sciences and Application (DASA)
Y1  - 8-9 Nov. 2020
AB  - Due to the rapid growth of software field, there is a tremendous increase in the building a software, websites and also applications. Eventually with the increase of the software products, the standards of the product also play a vital role. Based on the good standards of the product, the level of that particular product will always be high. Software evaluation is a method whose main objective is to judge a product and to verify whether the software meets all the prerequisites. Cognitive computing is a combination of several different fields and it imitates the human intellectual capacity in making decisions. The proposed work describes about the software evaluation using cognitive computing which is very inventive with wide range of benefits and provides excellent result. It also improves the efficiency of the company and helps to build advanced software's. The results are very accurate and saves lot of time in performing the software processes.
ER  - 

TY  - CONF
TI  - Evolving Software to be ML-Driven Utilizing Real-World A/B Testing: Experiences, Insights, Challenges
T2  - 2021 IEEE/ACM 43rd International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP)
SP  - 170
EP  - 179
AU  - P. L. Li
AU  - X. Chai
AU  - F. Campbell
AU  - J. Liao
AU  - N. Abburu
AU  - M. Kang
AU  - I. Niculescu
AU  - G. Brake
AU  - S. Patil
AU  - J. Dooley
AU  - B. Paddock
PY  - 2021
DO  - 10.1109/ICSE-SEIP52600.2021.00026
JO  - 2021 IEEE/ACM 43rd International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 IEEE/ACM 43rd International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP)
Y1  - 25-28 May 2021
AB  - ML-driven software is heralded as the next majoradvancement in software engineering; existing software todaycan benefit from being evolved to be ML-driven. In this paper, we contribute practical knowledge about evolving software tobe ML-driven, utilizing real-world A/B testing. We draw onexperiences evolving two software features from the Windowsoperating system to be ML-driven, with more than ten real-world A/B tests on millions of PCs over more than two years.We discuss practical reasons for using A/B testing to engineerML-driven software, insights for success, as well as on-going real-world challenges. This knowledge may help practitioners, as wellas help direct future research and innovations.
ER  - 

TY  - CONF
TI  - An analysis and extension of Category partition testing for constrained systems
T2  - 2015 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)
SP  - 55
EP  - 56
AU  - S. K. Khalsa
AU  - Y. Labiche
PY  - 2015
DO  - 10.1109/ISSREW.2015.7392039
JO  - 2015 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2015 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)
Y1  - 2-5 Nov. 2015
AB  - Software systems are overly complex and testing them is a challenging task. Testing such systems in the absence of systematic techniques results either in incomplete testing or testing with unmanageable (time, cost) number of test cases.
ER  - 

TY  - CONF
TI  - The Effect of Team Exploratory Testing -- Experience Report from F-Secure
T2  - 2016 IEEE Ninth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 295
EP  - 304
AU  - P. Raappana
AU  - S. Saukkoriipi
AU  - I. Tervonen
AU  - M. V. Mäntylä
PY  - 2016
DO  - 10.1109/ICSTW.2016.13
JO  - 2016 IEEE Ninth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2016 IEEE Ninth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 11-15 April 2016
AB  - Practitioners have found exploratory testing (ET) to be cost effective in detecting defects. The team exploratory testing (TET) approach scales exploratory testing to team level. This paper reports the effectiveness of (TET), and the experiences of the participants of TET sessions. The research was carried at F-Secure Corporation, where two projects were investigated. The results show that the TET sessions have good effectiveness and higher efficiency than other testing methods in the company measured in number of defects detected. Furthermore, the TET sessions found more usability defects that other methods. The session participants saw benefits in especially in the joint discussion and learning of the target application. However, with respect to test effectiveness and efficiency we should be cautions as further studies are needed to compensate the limitations of this work.
ER  - 

TY  - CONF
TI  - Dataset Coverage for Testing Machine Learning Computer Programs
T2  - 2016 23rd Asia-Pacific Software Engineering Conference (APSEC)
SP  - 297
EP  - 304
AU  - S. Nakajima
AU  - H. N. Bui
PY  - 2016
DO  - 10.1109/APSEC.2016.049
JO  - 2016 23rd Asia-Pacific Software Engineering Conference (APSEC)
IS  - 
SN  - 1530-1362
VO  - 
VL  - 
JA  - 2016 23rd Asia-Pacific Software Engineering Conference (APSEC)
Y1  - 6-9 Dec. 2016
AB  - Machine learning programs are non-testable, and thus testing with pseudo oracles is recommended. Although metamorphic testing is effective for testing with pseudo oracles, identifying metamorphic properties has been mostly ad hoc. This paper proposes a systematic method to derive a set of metamorphic properties for machine learning classifiers, support vector machines. The proposal includes a new notion of test coverage for the machine learning programs; this test coverage provides a clear guideline for conducting a series of metamorphic testing.
ER  - 

TY  - CONF
TI  - Tackling Feature Selection Problems with Genetic Algorithms in Software Defect Prediction for Optimization
T2  - 2020 International Conference on Informatics, Multimedia, Cyber and Information System (ICIMCIS)
SP  - 64
EP  - 69
AU  - R. B. Bahaweres
AU  - A. Imam Suroso
AU  - A. Wahyu Hutomo
AU  - I. Permana Solihin
AU  - I. Hermadi
AU  - Y. Arkeman
PY  - 2020
DO  - 10.1109/ICIMCIS51567.2020.9354282
JO  - 2020 International Conference on Informatics, Multimedia, Cyber and Information System (ICIMCIS)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 International Conference on Informatics, Multimedia, Cyber and Information System (ICIMCIS)
Y1  - 19-20 Nov. 2020
AB  - Software defect prediction is a way to improve quality by finding and tracking defective modules in the software which helps reduce costs during the software testing process. The use of machine learning methods for predicting software defects can be applied to predict defects in each software module. However, basically the software defect prediction dataset has two problems, namely class imbalance with very few defective modules compared to non-defective modules and contains noisy attributes due to irrelevant features. With these two problems, it will result in overfitting and lead to biased classification results so that it will have an impact on significantly reducing the performance of the machine learning model. In this study, we propose the implementation of bagging techniques and genetic algorithms to improve the classification performance of machine learning models in predicting software defects based Logistic Regression, Naive Bayes, SVM, KNN, Decision Tree. Bagging techniques and Genetic algorithms are approaches that can handle two main problems in software defects prediction, each of which can handle the class imbalance and feature selection problem. We used 6 NASA Promise datasets to evaluate the classification performance results based on AUC and G-Means values. The results using 10 cross-validations show that the proposed method can improve classification performance when compared to the original algorithm. The Decision Tree shows the highest performance of the 3 datasets tested, with the highest value of 94.61 % on the KC4 dataset. We also compare GA performance with another natural algorithm, Particle Swarm Optimization (PSO). The results show that the performance of all machine learning models with GA can outperform the algorithms with PSO
ER  - 

TY  - CONF
TI  - VCC Ceres: Challenges and Lessons Learned in an Undergraduate CubeSat Project
T2  - 2020 IEEE Aerospace Conference
SP  - 1
EP  - 11
AU  - G. Gargioni
AU  - S. Hitefield
AU  - H. Avagyan
AU  - N. Angle
AU  - M. Du
AU  - G. Brown
AU  - B. Clegg
AU  - M. Brodnax
AU  - S. Noel
AU  - Z. Leffke
AU  - K. Shinpaugh
AU  - J. Black
PY  - 2020
DO  - 10.1109/AERO47225.2020.9172353
JO  - 2020 IEEE Aerospace Conference
IS  - 
SN  - 1095-323X
VO  - 
VL  - 
JA  - 2020 IEEE Aerospace Conference
Y1  - 7-14 March 2020
AB  - This paper describes challenges and lessons learned throughout the assembling, integrating, and testing for hardware and software of VCC Ceres, the first Virginia Tech CubeSat built and designed by undergraduates. The project started in 2016 as part of the Virginia CubeSat Constellation (VCC), Virginia Tech (VT), Old Dominion University (ODU), University of Virginia (UVA), and Hampton University in collaboration with the Virginia Space Grant Consortium (VSGC). In July of 2019, the three CubeSats were successfully launched from the International Space Station (ISS). The project's mission is to obtain measurements of properties of the Earth's atmosphere in low earth orbit as well as to collect orbital data throughout their lifespan to develop a drag profile for CubeSats launched from the ISS. To develop the Virginia Tech's spacecraft, VCC Ceres, over 50 different undergraduate students participated. In this process, they reached many breaking points and tough decisions. This paper builds the challenges and lessons learned from assembling, integrating, and testing hardware and software. Furthermore, it describes the initial period of the operations phase, right after deployment, where the students had the opportunity to attempt contact with their satellite. This study comprises of an analytical point of view from the senior monitoring group and other engineers that work at the Center for Space Science and Engineering Research, known as (Space@VT), summarizing the experience from an undergraduate CubeSat project. The outcome of this paper is to share an experience that leads to bolster future CubeSat missions at Virginia Tech and other institutions.
ER  - 

TY  - CONF
TI  - Dependency-aware Form Understanding
T2  - 2021 IEEE 32nd International Symposium on Software Reliability Engineering (ISSRE)
SP  - 139
EP  - 149
AU  - S. Zhang
AU  - Y. Li
AU  - W. Yan
AU  - Y. Guo
AU  - X. Chen
PY  - 2021
DO  - 10.1109/ISSRE52982.2021.00026
JO  - 2021 IEEE 32nd International Symposium on Software Reliability Engineering (ISSRE)
IS  - 
SN  - 2332-6549
VO  - 
VL  - 
JA  - 2021 IEEE 32nd International Symposium on Software Reliability Engineering (ISSRE)
Y1  - 25-28 Oct. 2021
AB  - Form understanding is an important task in many fields such as software testing, AI assistants, and improving accessibility. One key goal of understanding a complex set of forms is to identify the dependencies between form elements. However, it remains a challenge to capture the dependencies accurately due to the diversity of UI design patterns and the variety in development experiences. In this paper, we propose a deep-learning-based approach called DependEX, which integrates convolutional neural networks (CNNs) and transformers to help understand dependencies within forms. DependEX extracts semantic features from UI images using CNN-based models, captures contextual patterns using a multilayer transformer encoder module, and models dependencies between form elements using two embedding layers. We evaluate DependEX with a large-scale dataset from mobile Web applications. Experimental results show that our proposed model achieves over 92% accuracy in identifying dependencies between UI elements, which significantly outperforms other competitive methods, especially for heuristic-based methods. We also conduct case studies on automatic form filling and test case generation from natural language (NL) instructions, which demonstrates the applicability of our approach.
ER  - 

TY  - CONF
TI  - Metamorphic Testing on Multi-module UAV Systems
T2  - 2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE)
SP  - 1171
EP  - 1173
AU  - R. Li
AU  - H. Liu
AU  - G. Lou
AU  - X. Zheng
AU  - X. Liu
AU  - T. Y. Chen
PY  - 2021
DO  - 10.1109/ASE51524.2021.9678841
JO  - 2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE)
IS  - 
SN  - 2643-1572
VO  - 
VL  - 
JA  - 2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE)
Y1  - 15-19 Nov. 2021
AB  - Recent years have seen a rapid development of machine learning based multi-module unmanned aerial vehicle (UAV) systems. To address the oracle problem in autonomous systems, numerous studies have been conducted to use metamorphic testing to automatically generate test scenes for various modules, e.g., those in self-driving cars. However, as most of the studies are based on unit testing including end-to-end model-based testing, a similar testing approach may not be equally effective for UAV systems where multiple modules are working closely together. Therefore, in this paper, instead of unit testing, we propose a novel metamorphic system testing framework for UAV, named MSTU, to detect the defects in multi-module UAV systems. A preliminary evaluation plan to apply MSTU on an emerging autonomous multi-module UAV system is also presented to demonstrate the feasibility of the proposed testing framework.
ER  - 

TY  - CONF
TI  - Test Design as Code: JCUnit
T2  - 2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)
SP  - 508
EP  - 515
AU  - H. Ukai
AU  - X. Qu
PY  - 2017
DO  - 10.1109/ICST.2017.58
JO  - 2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)
Y1  - 13-17 March 2017
AB  - In a development process where testing is highly automated, there is a major challenge to cope with issues such as huge test size and test stability. In this paper, we propose a model-based testing (MBT) tool called JCUnit, which generates a test suite from a model given as a Java class. Unlike other tools, it is designed to generate small and stable test suites and supports various popular models. With this tool, developers can apply MBT approach to their products without learning domain-specific language of proprietary MBT tools. Moreover, features such as portability and pluggability make it useful in a wide range of phases from unit testing to system testing. As a result, the efforts required in practical software testing will be reduced.
ER  - 

TY  - CONF
TI  - RiverGame - a game testing tool using artificial intelligence
T2  - 2022 IEEE Conference on Software Testing, Verification and Validation (ICST)
SP  - 422
EP  - 432
AU  - C. Paduraru
AU  - M. Paduraru
AU  - A. Stefanescu
PY  - 2022
DO  - 10.1109/ICST53961.2022.00048
JO  - 2022 IEEE Conference on Software Testing, Verification and Validation (ICST)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2022 IEEE Conference on Software Testing, Verification and Validation (ICST)
Y1  - 4-14 April 2022
AB  - As is the case with any very complex and interactive software, many video games are released with various minor or major issues that can potentially affect the user experience, cause security issues for players, or exploit the companies that deliver the products. To test their games, companies invest important resources in quality assurance personnel who usually perform the testing mostly manually. The main goal of our work is to automate various parts of the testing process that involve human users (testers) and thus to reduce costs and run more tests in less time. The secondary goal is to provide mechanisms to make test specification writing easier and more efficient. We focus on solving initial real-world problems that have emerged from several discussions with industry partners. In this paper, we present RiverGame, a tool that allows game developers to automatically test their products from different points of view: the rendered output, the sound played by the game, the animation and movement of the entities, the performance and various statistical analyses. We also address the problem of input priorities, scheduling, and directing the testing effort towards custom and dynamic directions. At the core of our methods, we use state-of-the-art artificial intelligence methods for analysis and a behavior-driven development (BDD) methodology for test specifications. Our technical solution is open-source, independent of game engine, platform, and programming language.
ER  - 

TY  - CONF
TI  - Automatically Authoring Regression Tests for Machine-Learning Based Systems
T2  - 2021 IEEE/ACM 43rd International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP)
SP  - 374
EP  - 383
AU  - J. Zhu
AU  - T. Long
AU  - A. Memon
PY  - 2021
DO  - 10.1109/ICSE-SEIP52600.2021.00049
JO  - 2021 IEEE/ACM 43rd International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 IEEE/ACM 43rd International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP)
Y1  - 25-28 May 2021
AB  - Two key design characteristics of machine learning (ML) systems-their ever-improving nature, and learning-based emergent functional behavior - create a moving target, posing new challenges for authoring/maintaining functional regression tests. We identify four specific challenges and address them by developing a new general methodology to automatically author and maintain tests. In particular, we use the volume of production data to periodically refresh our large corpus of test inputs and expected outputs; we use perturbation of the data to obtain coverage-adequate tests; and we use clustering to help identify patterns of failures that are indicative of software bugs. We demonstrate our methodology on an ML-based context-aware Speller. Our coverage-adequate, approx. 1 million regression test cases, automatically authored and maintained for Speller (1) are virtually maintenance free, (2) detect a higher number of Speller failures than previous manually-curated tests, (3) have better coverage of previously unknown functional boundaries of the ML component, and (4) lend themselves to automatic failure triaging by clustering and prioritizing subcategories of tests with over-represented failures. We identify several systematic failure patterns which were due to previously undetected bugs in the Speller, e.g., (1) when the user misses the first letter in a short word, and (2) when the user mistakenly inserts a character in the last token of an address; these have since been fixed.
ER  - 

TY  - CONF
TI  - An Extended Abstract of "Metamorphic Testing: Testing the Untestable"
T2  - 2019 IEEE 43rd Annual Computer Software and Applications Conference (COMPSAC)
SP  - 209
EP  - 210
AU  - S. Segura
AU  - D. Towey
AU  - Z. Q. Zhou
AU  - T. Y. Chen
PY  - 2019
DO  - 10.1109/COMPSAC.2019.00037
JO  - 2019 IEEE 43rd Annual Computer Software and Applications Conference (COMPSAC)
IS  - 
SN  - 0730-3157
VO  - 1
VL  - 1
JA  - 2019 IEEE 43rd Annual Computer Software and Applications Conference (COMPSAC)
Y1  - 15-19 Jul 2019
AB  - This document is an extended abstract of an IEEE Software paper, "Metamorphic Testing: Testing the Untestable," presented as a J1C2 (Journal publication first, Conference presentation following) at the IEEE Computer Society signature conference on Computers, Software and Applications (COMPSAC 2019), hosted by Marquette University, Milwaukee, Wisconsin, USA.
ER  - 

TY  - CONF
TI  - A Comparative Evaluation on the Quality of Manual and Automatic Test Case Generation Techniques for Scientific Software - a Case Study of a Python Project for Material Science Workflows
T2  - 2022 IEEE/ACM 15th International Workshop on Search-Based Software Testing (SBST)
SP  - 6
EP  - 13
AU  - D. Trübenbach
AU  - S. Müller
AU  - L. Grunske
PY  - 2022
DO  - 10.1145/3526072.3527523
JO  - 2022 IEEE/ACM 15th International Workshop on Search-Based Software Testing (SBST)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2022 IEEE/ACM 15th International Workshop on Search-Based Software Testing (SBST)
Y1  - 9-9 May 2022
AB  - Writing software tests is essential to ensure a high quality of the software project under test. However, writing tests manually is time consuming and expensive. Especially in research fields of the natural sciences, scientists do not have a formal education in software engineering. Thus, automatic test case generation is particularly promising to help build good test suites. In this case study, we investigate the efficacy of automated test case generation approaches for the Python project Atomic Simulation Environment (ASE) used in the material sciences. We compare the branch and mutation coverages reached by both the automatic approaches, as well as a manually created test suite. Finally, we statistically evaluate the measured coverages by each approach against those reached by any of the other approaches. We find that while all evaluated approaches are able to improve upon the original test suite of ASE, none of the automated test case generation algorithms manage to come close to the coverages reached by the manually created test suite. We hypothesize this may be due to the fact that none of the employed test case generation approaches were developed to work on complex structured inputs. Thus, we conclude that more work may be needed if automated test case generation is used on software that requires this type of input.
ER  - 

TY  - CONF
TI  - DeepGauge: Multi-Granularity Testing Criteria for Deep Learning Systems
T2  - 2018 33rd IEEE/ACM International Conference on Automated Software Engineering (ASE)
SP  - 120
EP  - 131
AU  - L. Ma
AU  - F. Juefei-Xu
AU  - F. Zhang
AU  - J. Sun
AU  - M. Xue
AU  - B. Li
AU  - C. Chen
AU  - T. Su
AU  - L. Li
AU  - Y. Liu
AU  - J. Zhao
AU  - Y. Wang
PY  - 2018
DO  - 10.1145/3238147.3238202
JO  - 2018 33rd IEEE/ACM International Conference on Automated Software Engineering (ASE)
IS  - 
SN  - 2643-1572
VO  - 
VL  - 
JA  - 2018 33rd IEEE/ACM International Conference on Automated Software Engineering (ASE)
Y1  - 3-7 Sept. 2018
AB  - Deep learning (DL) defines a new data-driven programming paradigm that constructs the internal system logic of a crafted neuron network through a set of training data. We have seen wide adoption of DL in many safety-critical scenarios. However, a plethora of studies have shown that the state-of-the-art DL systems suffer from various vulnerabilities which can lead to severe consequences when applied to real-world applications. Currently, the testing adequacy of a DL system is usually measured by the accuracy of test data. Considering the limitation of accessible high quality test data, good accuracy performance on test data can hardly provide confidence to the testing adequacy and generality of DL systems. Unlike traditional software systems that have clear and controllable logic and functionality, the lack of interpretability in a DL system makes system analysis and defect detection difficult, which could potentially hinder its real-world deployment. In this paper, we propose DeepGauge, a set of multi-granularity testing criteria for DL systems, which aims at rendering a multi-faceted portrayal of the testbed. The in-depth evaluation of our proposed testing criteria is demonstrated on two well-known datasets, five DL systems, and with four state-of-the-art adversarial attack techniques against DL. The potential usefulness of DeepGauge sheds light on the construction of more generic and robust DL systems.
ER  - 

TY  - CONF
TI  - Wait, Wait. No, Tell Me. Analyzing Selenium Configuration Effects on Test Flakiness
T2  - 2019 IEEE/ACM 14th International Workshop on Automation of Software Test (AST)
SP  - 7
EP  - 13
AU  - K. Presler-Marshall
AU  - E. Horton
AU  - S. Heckman
AU  - K. Stolee
PY  - 2019
DO  - 10.1109/AST.2019.000-1
JO  - 2019 IEEE/ACM 14th International Workshop on Automation of Software Test (AST)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2019 IEEE/ACM 14th International Workshop on Automation of Software Test (AST)
Y1  - 27-27 May 2019
AB  - Flaky tests are a source of frustration and uncertainty for developers. In an educational environment, flaky tests can create doubts related to software behavior and student grades, especially when the grades depend on tests passing. NC State University's junior-level software engineering course models industrial practice through team-based development and testing of new features on a large electronic health record (EHR) system, iTrust2. Students are expected to maintain and supplement an extensive suite of UI tests using Selenium WebDriver. Team builds are run on the course's continuous integration (CI) infrastructure. Students report, and we confirm, that tests that pass on one build will inexplicably fail on the next, impacting productivity and confidence in code quality and the CI system. The goal of this work is to find and fix the sources of flaky tests in iTrust2. We analyze configurations of Selenium using different underlying web browsers and timeout strategies (waits) for both test stability and runtime performance. We also consider underlying hardware and operating systems. Our results show that HtmlUnit with Thread waits provides the lowest number of test failures and best runtime on poor-performing hardware. When given more resources (e.g., more memory and a faster CPU), Google Chrome with Angular waits is less flaky and faster than HtmlUnit, especially if the browser instance is not restarted between tests. The outcomes of this research are a more stable and substantially faster teaching application and a recommendation on how to configure Selenium for applications similar to iTrust2 that run in a CI environment.
ER  - 

TY  - CONF
TI  - Machine Learning Augmented Fuzzing
T2  - 2018 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)
SP  - 178
EP  - 183
AU  - L. Joffe
PY  - 2018
DO  - 10.1109/ISSREW.2018.000-1
JO  - 2018 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2018 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)
Y1  - 15-18 Oct. 2018
AB  - The proposed thesis introduces cutting edge Machine Learning (ML) tools into Search Based Software Engineering (SBST). The contribution is three-fold. The first is an ML driven property targeting search strategy. It uses a deep neural network to process execution trace information to yield a likelihood score of a presence of a crash, which is in turn used as a fitness function for search. This method clearly outperforms the baseline search technique. The second contribution is a method for defining a property agnostic search landscape. This is achieved by training an autoencoder on a corpus of execution traces to produce a "latent space" representation. The expectation is to observe a tendency for arbitrary properties of executions to group in distinct regions of the latent space. Location in this space would in turn be used to direct an SBST process. The third contribution is to augment an automated tool with a generative model. The intention is to produce approximately valid input seeds that would target desired locations of a fitness landscape. These contributions will provide novel ideas for future research in the intersection of SBST and ML.
ER  - 

TY  - JOUR
TI  - Identifying Similar Test Cases That Are Specified in Natural Language
T2  - IEEE Transactions on Software Engineering
SP  - 1027
EP  - 1043
AU  - M. Viggiato
AU  - D. Paas
AU  - C. Buzon
AU  - C. -P. Bezemer
PY  - 2023
DO  - 10.1109/TSE.2022.3170272
JO  - IEEE Transactions on Software Engineering
IS  - 3
SN  - 1939-3520
VO  - 49
VL  - 49
JA  - IEEE Transactions on Software Engineering
Y1  - 1 March 2023
AB  - Software testing is still a manual process in many industries, despite the recent improvements in automated testing techniques. As a result, test cases (which consist of one or more test steps that need to be executed manually by the tester) are often specified in natural language by different employees and many redundant test cases might exist in the test suite. This increases the (already high) cost of test execution. Manually identifying similar test cases is a time-consuming and error-prone task. Therefore, in this paper, we propose an unsupervised approach to identify similar test cases. Our approach uses a combination of text embedding, text similarity and clustering techniques to identify similar test cases. We evaluate five different text embedding techniques, two text similarity metrics, and two clustering techniques to cluster similar test steps and three techniques to identify similar test cases from the test step clusters. Through an evaluation in an industrial setting, we showed that our approach achieves a high performance to cluster test steps (an F-score of 87.39%) and identify similar test cases (an F-score of 86.13%). Furthermore, a validation with developers indicates several different practical usages of our approach (such as identifying redundant test cases), which help to reduce the testing manual effort and time.
ER  - 

TY  - CONF
TI  - Engineering an Intelligent Essay Scoring and Feedback System: An Experience Report
T2  - 2021 IEEE/ACM 1st Workshop on AI Engineering - Software Engineering for AI (WAIN)
SP  - 141
EP  - 144
AU  - A. Chadda
AU  - K. Song
AU  - R. Chandrasekar
AU  - I. Gorton
PY  - 2021
DO  - 10.1109/WAIN52551.2021.00029
JO  - 2021 IEEE/ACM 1st Workshop on AI Engineering - Software Engineering for AI (WAIN)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 IEEE/ACM 1st Workshop on AI Engineering - Software Engineering for AI (WAIN)
Y1  - 30-31 May 2021
AB  - Artificial Intelligence (AI)/Machine Learning (ML)-based systems are widely sought-after commercial solutions that can automate and augment core business services. Intelligent systems can improve the quality of services offered and support scalability through automation. In this paper we describe our experience in engineering an exploratory system for assessing the quality of essays supplied by customers of a specialized recruitment support service. The problem domain is challenging because the open-ended customer-supplied source text has considerable scope for ambiguity and error, making models for analysis hard to build. There is also a need to incorporate specialized business domain knowledge into the intelligent processing systems. To address these challenges, we experimented with and exploited a number of cloud-based machine learning models and composed them into an application-specific processing pipeline. This design allows for modification of the underlying algorithms as more data and improved techniques become available. We describe our design, and the main challenges we faced, namely keeping a check on the quality control of the models, testing the software and deploying the computationally expensive ML models on the cloud.
ER  - 

TY  - CONF
TI  - CS/SE Instructors Can Improve Student Writing without Reducing Class Time Devoted to Technical Content: Experimental Results
T2  - 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering
SP  - 455
EP  - 464
AU  - P. V. Anderson
AU  - S. Heckman
AU  - M. Vouk
AU  - D. Wright
AU  - M. Carter
AU  - J. E. Burge
AU  - G. C. Gannod
PY  - 2015
DO  - 10.1109/ICSE.2015.178
JO  - 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering
IS  - 
SN  - 1558-1225
VO  - 2
VL  - 2
JA  - 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering
Y1  - 16-24 May 2015
AB  - The Computer Science and Software Engineering (CS/SE) profession reports that new college graduates lack the communication skills needed for personal and organizational success. Many CS/SE faculty may omit communication instruction from their courses because they do not want to reduce technical content. We experimented in a software-engineering-intensive second-semester programming course with strategies for improving students' writing of black box test plans that included no instruction on writing the plans beyond the standard lecture on testing. The treatment version of the course used 1) a modified assignment that focused on the plan's readers, 2) a model plan students could consult online, and 3) a modified grading rubric that identified the readers' needs. Three external raters found that students in the treatment sections outperformed students in the control sections on writing for five of nine criteria on rubrics for evaluating the plans and on the raters' holistic impression of the students' technical and communication abilities from the perspectives of a manager and a tester.
ER  - 

TY  - CONF
TI  - Neural Network Classification for Improving Continuous Regression Testing
T2  - 2020 IEEE International Conference On Artificial Intelligence Testing (AITest)
SP  - 123
EP  - 124
AU  - D. Marijan
AU  - A. Gotlieb
AU  - A. Sapkota
PY  - 2020
DO  - 10.1109/AITEST49225.2020.00025
JO  - 2020 IEEE International Conference On Artificial Intelligence Testing (AITest)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE International Conference On Artificial Intelligence Testing (AITest)
Y1  - 3-6 Aug. 2020
AB  - Continuous regression testing is a time constrained process aimed at detecting potential regressions introduced in source code integration. Test prioritization is an approach to increase the efficiency of continuous regression testing, by finding an order of tests that can detect regressions faster. The challenge for test prioritization in continuous integration is the scalability of continuous prioritization as more test execution data becomes available. In this paper we propose an approach that learns to prioritize regression tests by training a prediction model based on the existing fault detection ability of tests. We perform experiments in a case study of regression testing of industrial software developed in continuous integration. The initial results show that a learning-based approach can reduce test prioritization time, compared to a non-learning approach, while achieving a comparable fault detection effectiveness.
ER  - 

TY  - CONF
TI  - A guide to lean software development in action
T2  - 2015 IEEE Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 1
EP  - 2
AU  - A. Janes
PY  - 2015
DO  - 10.1109/ICSTW.2015.7107412
JO  - 2015 IEEE Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2015 IEEE Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 13-17 April 2015
AB  - Inspired by the success of Lean Manufacturing, various attempts have been made to translate Lean principles into the software engineering domain. As a result, Lean Software Development has gained large attention in the software development community as well as in academia. Unfortunately, it is still difficult to actually implement Lean Thinking as suggested by the pioneers of Lean Software Development, since Lean adopts a more scientific style: a style that invites the practitioner to investigate him or herself where value is created or wasted and to constantly improve in doing so. This extended abstract points out the core ideas presented in the book “Lean Software Development in Action”, published by Springer in 2014, which aims to fill this gap.
ER  - 

TY  - CONF
TI  - Test Case Prioritization Based on Method Call Sequences
T2  - 2018 IEEE 42nd Annual Computer Software and Applications Conference (COMPSAC)
SP  - 251
EP  - 256
AU  - J. Chi
AU  - Y. Qu
AU  - Q. Zheng
AU  - Z. Yang
AU  - W. Jin
AU  - D. Cui
AU  - T. Liu
PY  - 2018
DO  - 10.1109/COMPSAC.2018.00039
JO  - 2018 IEEE 42nd Annual Computer Software and Applications Conference (COMPSAC)
IS  - 
SN  - 0730-3157
VO  - 01
VL  - 01
JA  - 2018 IEEE 42nd Annual Computer Software and Applications Conference (COMPSAC)
Y1  - 23-27 July 2018
AB  - Test case prioritization is widely used in testing with the purpose of detecting faults as early as possible. Most existing techniques exploit coverage to prioritize test cases based on the hypothesis that a test case with higher coverage is more likely to catch bugs. Statement coverage and function coverage are the two widely used coverage granularity. The former typically achieves better test case prioritization in terms of fault detection capability, while the latter is more efficient because it incurs less overhead. In this paper we argue that static information such as statement and function coverage may not be the best criteria for guiding dynamic executions. Executions that cover the same set of statements /functions can may exhibit very different behavior. Therefore, the abstraction that reduces program behavior to statement/function coverage can be too simplistic to predicate fault detection capability. We propose a new approach that exploits function call sequences to prioritize test cases. This is based on the observation that the function call sequences rather than the set of executed functions is a better indicator of program behavior. Test cases that reveal unique function call sequences may have better chance to encounter faults. We choose function instead of statement sequences due to the consideration of efficiency. We have developed and implemented a new prioritization strategy AGC (Additional Greedy method Call sequence), that exploit function call sequences. We compare AGC against existing test case prioritization techniques on eight real-world open source Java projects. Our experiments show that our approach outperforms existing techniques on large programs (but not on small programs) in terms of bug detection capability. The performance shows a growth trend when the size of program increases.
ER  - 

TY  - CONF
TI  - Attribute-based Granular Evaluation for Performance of Machine Learning Models
T2  - 2020 IEEE International Conference On Artificial Intelligence Testing (AITest)
SP  - 125
EP  - 132
AU  - H. Trenquier
AU  - F. Ishikawa
AU  - S. Tokumoto
PY  - 2020
DO  - 10.1109/AITEST49225.2020.00026
JO  - 2020 IEEE International Conference On Artificial Intelligence Testing (AITest)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE International Conference On Artificial Intelligence Testing (AITest)
Y1  - 3-6 Aug. 2020
AB  - There is an increasing demand for quality assurance of machine learning (ML) models as more and more ML applications are investigated in various domains. This means that we need to explicitly take account of the requirements and environmental assumptions for quality evaluation and improvement of ML models. The traditional approach has been performance evaluation, typically in accuracy, for the target dataset. However, this approach only focuses on the global accuracy over the whole dataset and obfuscates performance for individual specific aspects in the requirements and environmental assumptions. We then lack insights necessary to deal with high-priority requirements and to detect risks or weaknesses in specific situations. In response to this problem, we investigate a testing method based on attributes that capture aspects in the requirements and environmental assumptions. We divide the input space into explicit and explainable sub-spaces, which allows the divide-and-conquer style in a granular manner as we have done for traditional software testing. We demonstrate our method with simple attributes for CIFAR-10 and BDD100K datasets.
ER  - 

TY  - CONF
TI  - TOGA: A Neural Method for Test Oracle Generation
T2  - 2022 IEEE/ACM 44th International Conference on Software Engineering (ICSE)
SP  - 2130
EP  - 2141
AU  - E. Dinella
AU  - G. Ryan
AU  - T. Mytkowicz
AU  - S. K. Lahiri
PY  - 2022
DO  - 10.1145/3510003.3510141
JO  - 2022 IEEE/ACM 44th International Conference on Software Engineering (ICSE)
IS  - 
SN  - 1558-1225
VO  - 
VL  - 
JA  - 2022 IEEE/ACM 44th International Conference on Software Engineering (ICSE)
Y1  - 25-27 May 2022
AB  - Testing is widely recognized as an important stage of the software development lifecycle. Effective software testing can provide benefits such as bug finding, preventing regressions, and documentation. In terms of documentation, unit tests express a unit's intended functionality, as conceived by the developer. A test oracle, typically expressed as an condition, documents the intended behavior of a unit under a given test prefix. Synthesizing a functional test oracle is a challenging problem, as it must capture the intended functionality rather than the implemented functionality. In this paper, we propose TOGA (a neural method for Test Oracle GenerAtion), a unified transformer-based neural approach to infer both exceptional and assertion test oracles based on the context of the focal method. Our approach can handle units with ambiguous or missing documentation, and even units with a missing implementation. We evaluate our approach on both oracle inference accuracy and functional bug-finding. Our technique improves accuracy by 33% over existing oracle inference approaches, achieving 96% over-all accuracy on a held out test dataset. Furthermore, we show that when integrated with a automated test generation tool (EvoSuite), our approach finds 57 real world bugs in large-scale Java programs, including 30 bugs that are not found by any other automated testing method in our evaluation.
ER  - 

TY  - CONF
TI  - Remote Management Information System for Office of Student Organizations (RMIS - OSO)
T2  - 2021 IEEE International Conference on Educational Technology (ICET)
SP  - 144
EP  - 148
AU  - C. N. Villavicencio
AU  - J. -H. Jeng
AU  - D. S. Evale
AU  - J. -G. Hsieh
PY  - 2021
DO  - 10.1109/ICET52293.2021.9563131
JO  - 2021 IEEE International Conference on Educational Technology (ICET)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 IEEE International Conference on Educational Technology (ICET)
Y1  - 18-20 June 2021
AB  - This study aims to provide effective method for manual transaction management problems by satisfying the office of student organization's everyday processes. In this time of pandemic, performing manual or physical transactions became a huge challenge for many offices because physical contact and social interactions demands to be minimized. Upon careful analysis of the existing process, it was disclosed that there were several drawbacks in the process which may put student and staff at risk. The goal is to provide an online management information system to perform everyday transactions of the office remotely. The researchers utilized the Agile Software Development approach and devised a Data Flow Diagram to develop the proposed system. The system was evaluated using black box software testing method and results show that the system successfully passed all the requirements ensuring an effective method in managing the transactions of the office via web.
ER  - 

TY  - CONF
TI  - Automatic HMI Structure Exploration Via Curiosity-Based Reinforcement Learning
T2  - 2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE)
SP  - 1151
EP  - 1155
AU  - Y. Cao
AU  - Y. Zheng
AU  - S. -W. Lin
AU  - Y. Liu
AU  - Y. S. Teo
AU  - Y. Toh
AU  - V. V. Adiga
PY  - 2021
DO  - 10.1109/ASE51524.2021.9678703
JO  - 2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE)
IS  - 
SN  - 2643-1572
VO  - 
VL  - 
JA  - 2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE)
Y1  - 15-19 Nov. 2021
AB  - Discovering the underlying structure of HMI software efficiently and sufficiently for the purpose of testing without any prior knowledge on the software logic remains a difficult problem. The key challenge lies in the complexity of the HMI software and the high variance in the coverage of current methods. In this paper, we introduce the PathFinder, an effective and automatic HMI software exploration framework. PathFinder adopts a curiosity-based reinforcement learning framework to choose actions that lead to the discovery of more unknown states. Additionally, PathFinder progressively builds a navigation model during the exploration to further improve state coverage. We have conducted experiments on both simulations and real-world HMI software testing environment, which comprise a full tool chain of automobile dashboard instrument cluster. The exploration coverage outperforms manual and fuzzing methods which are the current industrial standards.
ER  - 

TY  - CONF
TI  - Fuzzy and ANN based model for Test case prioritization for Regression testing
T2  - 2023 International Conference on Advances in Computing, Communication and Applied Informatics (ACCAI)
SP  - 1
EP  - 9
AU  - B. Nithya
AU  - B. G. Prasanthi
PY  - 2023
DO  - 10.1109/ACCAI58221.2023.10199547
JO  - 2023 International Conference on Advances in Computing, Communication and Applied Informatics (ACCAI)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2023 International Conference on Advances in Computing, Communication and Applied Informatics (ACCAI)
Y1  - 25-26 May 2023
AB  - This research article performs the prioritization of the test case to test the software system after the occurrence of changes for Regression testing. The test expert here will categorize the sets as Optimistic test cases and Pessimistic test cases as formatted data for preprocessing by the Fuzzy rules. The optimistic test cases ensure that they are considered for regression testing by the tester. They are allowed to go into the next phase for deciding the prioritization. The test case is expected to have the details of case_id, case_name, case_details, predicted_result, obtained_result, seconds_time, and status. The ANN model deployed, gives the ranking to only Optimistic test cases by ensuring its capability to a dynamic environment. The efficiency of the regression testing on the proposed ANN model is evaluated by representing the faults, statements, and paths using the average percentage. The results provide a superior value above 95% when compared to the other methods taken in literature survey. The future scope of this ANN-based model can be used for prioritizing, selecting, and categorizing every cycle using reinforcement learning methods.
ER  - 

TY  - CONF
TI  - Software development for medication administration record in clinics and small nursing homes — A case study
T2  - 2015 10th Iberian Conference on Information Systems and Technologies (CISTI)
SP  - 1
EP  - 6
AU  - B. M. Matias
AU  - J. C. Metrôlho
AU  - F. R. Ribeiro
PY  - 2015
DO  - 10.1109/CISTI.2015.7170494
JO  - 2015 10th Iberian Conference on Information Systems and Technologies (CISTI)
IS  - 
SN  - 2166-0727
VO  - 
VL  - 
JA  - 2015 10th Iberian Conference on Information Systems and Technologies (CISTI)
Y1  - 17-20 June 2015
AB  - This paper presents a development process of an application to nursing homes, in order to support the nursing team, in particular electronic register medication delivery. For this is established the design of the process of functional prototype following the steps of software development. The project ends with a testing phase that according to the results obtained by satisfaction surveys, the use of this application in the institutions was considered an advantage in supporting the nursing work by providing an improved quality of the institution and organizational processes. This work was developed entirely within some disciplines of a higher education program, resulting in a practical application for health entities from knowledge and work within the academic route. Article give emphasis to the various technical aspects related to the developed application.
ER  - 

TY  - CONF
TI  - A comparative recapitulating study of recent sentiment analysis approaches
T2  - 2020 IEEE International Women in Engineering (WIE) Conference on Electrical and Computer Engineering (WIECON-ECE)
SP  - 173
EP  - 176
AU  - A. Gupta
AU  - R. P. Mahapatra
PY  - 2020
DO  - 10.1109/WIECON-ECE52138.2020.9397928
JO  - 2020 IEEE International Women in Engineering (WIE) Conference on Electrical and Computer Engineering (WIECON-ECE)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE International Women in Engineering (WIE) Conference on Electrical and Computer Engineering (WIECON-ECE)
Y1  - 26-27 Dec. 2020
AB  - In accordance with the convention, sentiments are defined as a thought, judgement or attitude prompted by feelings or a specific notion. With explosion of social networks, every individual/user actively manifests and share their ideas or emotions in disparate life aspects. Past few years have shown Sentiment Analysis as a pivotal activity in various systems and thus become a center of attention for the researchers. Considerable amount of research has already been done to inspect and examine user's sentiments, which are extracted either from web pages or social media, through lexicon, machine learning or deep learning techniques. This paper presents a vital contribution in this field of research through comprehensive exploration of most recent articles/studies, extremely aiming to highlight the applicability of sentiment analysis in software engineering field as well as through bio-inspired algorithms along with other modi operandi, and thereby helping practitioners to get detailed insights of some of the lately exercised feature extraction tactics, methodologies and datasets considered for the analysis of sentiment-specific studies.
ER  - 

TY  - CONF
TI  - Android GUI Test Generation with SARSA
T2  - 2022 IEEE 12th Annual Computing and Communication Workshop and Conference (CCWC)
SP  - 0487
EP  - 0493
AU  - M. K. Khan
AU  - R. Bryce
PY  - 2022
DO  - 10.1109/CCWC54503.2022.9720807
JO  - 2022 IEEE 12th Annual Computing and Communication Workshop and Conference (CCWC)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2022 IEEE 12th Annual Computing and Communication Workshop and Conference (CCWC)
Y1  - 26-29 Jan. 2022
AB  - Android applications are often challenging to test because of large event spaces with an exponential number of event sequences. Several studies employ reinforcement learning to generate test suites in an effort to optimize code coverage and fault-finding effectiveness under limited testing budgets. In this paper, we generate test cases using the SARSA rein-forcement learning algorithm for seven Android applications, each with a two-hour testing window. The SARSA generated test suites achieve 9.87% to 24.79% better line coverage, 6.9% to 20.09% better branch coverage, 7.88% to 28.48% better method coverage and 3.74% to 35.02% better class coverage than the test suites generated at random by the Monkey tool.
ER  - 

TY  - JOUR
TI  - Testing and Quality Validation for AI Software–Perspectives, Issues, and Practices
T2  - IEEE Access
SP  - 120164
EP  - 120175
AU  - C. Tao
AU  - J. Gao
AU  - T. Wang
PY  - 2019
DO  - 10.1109/ACCESS.2019.2937107
JO  - IEEE Access
IS  - 
SN  - 2169-3536
VO  - 7
VL  - 7
JA  - IEEE Access
Y1  - 2019
AB  - With the fast growth of artificial intelligence and big data computing technologies, more and more software service systems have been developed using diverse machine learning models and technologies to make business and intelligent decisions based on their multimedia input to achieve intelligent features, such as image recognition, recommendation, decision making, prediction, etc. Nevertheless, there are increasing quality problems resulting in erroneous testing costs in enterprises and businesses. Existing work seldom discusses how to perform testing and quality validation for AI software. This paper focuses on quality validation for AI software function features. The paper provides our understanding of AI software testing for new features and requirements. In addition, current AI software testing categories are presented and different testing approaches are discussed. Moreover, test quality assessment and criteria analysis are illustrated. Furthermore, a practical study on quality validation for an image recognition system is performed through a metamorphic testing method. Study results show the feasibility and effectiveness of the approach.
ER  - 

TY  - JOUR
TI  - Multiple Black Hole Inspired Meta-Heuristic Searching Optimization for Combinatorial Testing
T2  - IEEE Access
SP  - 33406
EP  - 33418
AU  - H. N. Nsaif Al-Sammarraie
AU  - D. N. A. Jawawi
PY  - 2020
DO  - 10.1109/ACCESS.2020.2973696
JO  - IEEE Access
IS  - 
SN  - 2169-3536
VO  - 8
VL  - 8
JA  - IEEE Access
Y1  - 2020
AB  - Combinatorial searching-based software testing (CSST) is a challenging optimization procedure. The achievement of optimal solutions involves a careful formulation of the optimization problem and the selection of an appropriate approach. Meta-heuristic searching procedures have proven to be effective for solving CSST issues. Black hole (BH) optimization is among the more recently developed meta-heuristic searching algorithms. While this approach has been observed to be an effective alternative to particle swarm optimization, its operation is based on only one swarm. To date, no efforts have been made to modify this approach to accommodate multiple swarms. This study proposes a new variant of BH that involves a combination of multiple swarms. The BH optimizer is modified from continuous searching to binary searching and subsequently applied for solving CSST. The evaluation is based on a modified-benchmarking mathematical function and well-known CSST problems. This modified BH method is superior to the original BH and the established particle swarm optimization (PSO) approach. In terms of CSST problems, binary multiple black hole (BMBH) optimizations generate reduction rates between 50% and more than 60% for t = 4 according to the problem.
ER  - 

TY  - JOUR
TI  - A Graph Convolution Network-Based Bug Triage System to Learn Heterogeneous Graph Representation of Bug Reports
T2  - IEEE Access
SP  - 20677
EP  - 20689
AU  - S. F. A. Zaidi
AU  - H. Woo
AU  - C. -G. Lee
PY  - 2022
DO  - 10.1109/ACCESS.2022.3153075
JO  - IEEE Access
IS  - 
SN  - 2169-3536
VO  - 10
VL  - 10
JA  - IEEE Access
Y1  - 2022
AB  - Many bugs and defects occur during software testing and maintenance. These bugs should be resolved as soon as possible, to improve software quality. However, bug triage aims to solve these bugs by assigning the reported bugs to an appropriate developer or list of developers. It is an arduous task for a human triager to assign an appropriate developer to a bug report, when there are several developers with different skills, and several automated and semi-automated triage systems have been proposed in the last decade. Some recent techniques have suggested possibilities for the development of an effective triage system. However, these techniques require improvement. In previous work, we proposed a heterogeneous graph representation for bug triage, using word&#x2013;word edges and word-bug document co-occurrences to build a heterogeneous graph of bug data. Cosine similarity is used to weight the word&#x2013;word edges. Then, a graph convolution network is used to learn a heterogeneous graph representation. This paper extends our previous work by adopting different similarity metrics and correlation metrics for weighting word&#x2013;word edges. The method was validated using different small and large datasets obtained from large-scale open-source projects. The top-k accuracy metric was used to evaluate the performance of the bug triage system. The experimental results showed that the point-wise mutual information of the proposed model was better than that of other word&#x2013;word weighting methods, and our method had better accuracy for large datasets than other recent state-of-the-art methods. The proposed method with point-wise mutual information showed 3&#x0025; to 6&#x0025; higher top-1 accuracy than state-of-the-art methods for large datasets.
ER  - 

TY  - CONF
TI  - Multiple-Boundary Clustering and Prioritization to Promote Neural Network Retraining
T2  - 2020 35th IEEE/ACM International Conference on Automated Software Engineering (ASE)
SP  - 410
EP  - 422
AU  - W. Shen
AU  - Y. Li
AU  - L. Chen
AU  - Y. Han
AU  - Y. Zhou
AU  - B. Xu
PY  - 2020
DO  - 
JO  - 2020 35th IEEE/ACM International Conference on Automated Software Engineering (ASE)
IS  - 
SN  - 2643-1572
VO  - 
VL  - 
JA  - 2020 35th IEEE/ACM International Conference on Automated Software Engineering (ASE)
Y1  - 21-25 Sept. 2020
AB  - With the increasing application of deep learning (DL) models in many safety-critical scenarios, effective and efficient DL testing techniques are much in demand to improve the quality of DL models. One of the major challenges is the data gap between the training data to construct the models and the testing data to evaluate them. To bridge the gap, testers aim to collect an effective subset of inputs from the testing contexts, with limited labeling effort, for retraining DL models.To assist the subset selection, we propose Multiple-Boundary Clustering and Prioritization (MCP), a technique to cluster test samples into the boundary areas of multiple boundaries for DL models and specify the priority to select samples evenly from all boundary areas, to make sure enough useful samples for each boundary reconstruction. To evaluate MCP, we conduct an extensive empirical study with three popular DL models and 33 simulated testing contexts. The experiment results show that, compared with state-of-the-art baseline methods, on effectiveness, our approach MCP has a significantly better performance by evaluating the improved quality of retrained DL models; on efficiency, MCP also has the advantages in time costs.
ER  - 

TY  - CONF
TI  - Selenium based Testing Systems for Analytical Data Generation of Website User Behavior
T2  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 216
EP  - 221
AU  - T. Tanaka
AU  - H. Niibori
AU  - L. Shiyingxue
AU  - S. Nomura
AU  - T. Nakao
AU  - K. Tsuda
PY  - 2020
DO  - 10.1109/ICSTW50294.2020.00045
JO  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 24-28 Oct. 2020
AB  - In recent years, websites have automatically sorted out content suitable for individual users on the website by learning user behavior patterns using AI. Website developers develop a function to generate behavioral data for analysis. The behavior data for analysis records the operation history of all functions such as content expression and button press. However, many consumer websites have a problem of enormous amount of testing due to continuous and frequent development. In this study, we propose a method for efficiently performing browser tests using Selenium by managing the specifications of the behavior data generation function.
ER  - 

