TY  - CONF
TI  - Assessing Computational Thinking Pedagogy in Serious Games Through Questionnaires, Think-aloud Testing, and Automated Data Logging
T2  - 2021 IEEE/ACIS 20th International Fall Conference on Computer and Information Science (ICIS Fall)
SP  - 149
EP  - 152
AU  - J. R. Fanfarelli
PY  - 2021
DO  - 10.1109/ICISFall51598.2021.9627365
JO  - 2021 IEEE/ACIS 20th International Fall Conference on Computer and Information Science (ICIS Fall)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 IEEE/ACIS 20th International Fall Conference on Computer and Information Science (ICIS Fall)
Y1  - 13-15 Oct. 2021
AB  - Computational thinking is an important skill for solving complex problems, including processes such as decomposition, pattern recognition, abstraction, and algorithmic design. Game-based learning has recently seen an increase in prevalence for teaching computational thinking, making games an important topic of study. However, there is currently no validated tool for assessing Computational Thinking (CT) that performs reliably across disciplines and age groups. In the absence of such a tool, this paper examines several software testing methods for the evaluation of CT pedagogy effectiveness within serious games. Namely, it makes recommendations for the application of standardized questionnaires, think-aloud testing, and automated data logging for evaluating games that promote CT learning. It concludes with a potential use case to demonstrate how the methods can be combined to achieve a granular and actionable understanding of a complex CT assessment problem and its causes.
ER  - 

TY  - CONF
TI  - Application Research of CDIO Education Initiative in Reforming Online-Offline Hybrid Teaching of "Software Testing" Course
T2  - 2022 IEEE International Conference on Teaching, Assessment and Learning for Engineering (TALE)
SP  - 270
EP  - 275
AU  - X. Song
PY  - 2022
DO  - 10.1109/TALE54877.2022.00052
JO  - 2022 IEEE International Conference on Teaching, Assessment and Learning for Engineering (TALE)
IS  - 
SN  - 2470-6698
VO  - 
VL  - 
JA  - 2022 IEEE International Conference on Teaching, Assessment and Learning for Engineering (TALE)
Y1  - 4-7 Dec. 2022
AB  - CDIO is an innovative educational concept used around the world to improve the quality of undergraduate engineering education. It is very suitable to be applied to guide the teaching reform of software testing course, which is an important part of software engineering education. Due to problems like the lack of practice in traditional software testing teaching and that of students' interest in learning, we proposed a novel CDIO-based online-offline hybrid teaching reform model for software testing course. In this reformed teaching model, guided by the CDIO educational initiative, we redesigned the course structure to adjust the teaching content, developed multiple online course practice trainings in an online curriculum resource library, and built a teaching evaluation mechanism corresponding to case-based offline teaching. This teaching reform, to a certain extent, has achieved the goal of strengthening practice, enhancing students' interest in learning, and improving their professional quality and software testing skills. This teaching practice provides reference and inspiration for the innovation and reform of software engineering education in colleges and universities.
ER  - 

TY  - CONF
TI  - Awesome Bug Manifesto: Teaching an Engaging and Inspiring Course on Software Testing (Position Paper)
T2  - 2021 Third International Workshop on Software Engineering Education for the Next Generation (SEENG)
SP  - 16
EP  - 20
AU  - N. Silvis-Cividjian
PY  - 2021
DO  - 10.1109/SEENG53126.2021.00010
JO  - 2021 Third International Workshop on Software Engineering Education for the Next Generation (SEENG)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 Third International Workshop on Software Engineering Education for the Next Generation (SEENG)
Y1  - 24-24 May 2021
AB  - Although testing software is paramount to safeguard our digitizing society, students are reluctant to consider a career in the field. A reason could be that dedicated courses on software testing are rare. However, even when such a course exists, students perceive testing as a boring, unrewarding and even dogmatic chore. For more than 10 years, we have been teaching a software testing course at the Vrije Universiteit in Amsterdam. Driven by our belief that an abundant exposure to software bugs makes good testers, we experimented with many ideas to engage students and make them love the topic. The most unorthodox, yet effective interventions we are proud of, were: (1) to scare students by analyzing past, software-related accidents, such as Therac-25 or Boeing 737-MAX; (2) to thrill them using bug-hunting gamification, enabled by the in-house developed VU-BugZoo; (3) to trust them an end-to-end testing of safety-critical software- intensive systems, such as model trains, automatic insulin pumps and even radiotherapy facilities, and (4) to inspire their career, by opening a dialog with test professionals from industry. The result is a mature course, read yearly by 50 computer science graduates, where almost 80% of the participants find the topic interesting and challenging, and 40% consider a future carrier in testing. These positive results make us confident that we found a formula that works. In this position paper, we would like to share our innovative ideas and lessons learned. Also in the future, we will stay committed to educate enthusiastic and responsible software testers.
ER  - 

TY  - CONF
TI  - Research On Teaching Methods And Tools Of Software Testing
T2  - 2020 15th International Conference on Computer Science & Education (ICCSE)
SP  - 760
EP  - 763
AU  - H. Chen
AU  - X. Wang
AU  - L. Pan
PY  - 2020
DO  - 10.1109/ICCSE49874.2020.9201788
JO  - 2020 15th International Conference on Computer Science & Education (ICCSE)
IS  - 
SN  - 2473-9464
VO  - 
VL  - 
JA  - 2020 15th International Conference on Computer Science & Education (ICCSE)
Y1  - 18-22 Aug. 2020
AB  - With the rapid development of software industry, software testing, as an important means of software quality assurance, has been paid more and more attention by software enterprises. It has become an urgent need to train professional software testing talents, so software testing teaching is of great significance. This paper analyzes the current situation and existing problems of software testing curriculum teaching, discusses and improves the teaching methods of software testing courses, and develops a simple suspicious codes recognition tool based on abstract grammar tree and state machine for the difficulties of teaching content which based on defected modes testing , so as to help improve the quality of classroom teaching and better train professional software testing talents suitable for market demand.
ER  - 

TY  - CONF
TI  - Gamification to Aid the Learning of Test Coverage Concepts
T2  - 2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T)
SP  - 1
EP  - 5
AU  - E. Sherif
AU  - A. Liu
AU  - B. Nguyen
AU  - S. Lerner
AU  - W. G. Griswold
PY  - 2020
DO  - 10.1109/CSEET49119.2020.9206224
JO  - 2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T)
IS  - 
SN  - 2377-570X
VO  - 
VL  - 
JA  - 2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T)
Y1  - 9-12 Nov. 2020
AB  - The ability to effectively and efficiently test software is an important practice in software testing that is often under-emphasized in computer science education. Many students find learning about testing to be uninteresting and difficult to learn. This causes numerous students to develop inadequate testing habits, which can be detrimental to their professional careers. To encourage students to develop better testing habits, we used gamification to make the learning experience more engaging and enjoyable. In this paper we explore this idea by integrating gamification and statement coverage into a turn-based game called CoverBot. To test the effectiveness of CoverBot with respect to both teaching statement coverage and increasing engagement and enjoyment, we conducted a user study. We found that gamification makes the learning about statement coverage more engaging and enjoyable while also enhancing the participants performance and understanding of statement coverage.
ER  - 

TY  - CONF
TI  - iLearnTest: Educational game for learning software testing
T2  - 2015 10th Iberian Conference on Information Systems and Technologies (CISTI)
SP  - 1
EP  - 6
AU  - T. P. B. Ribeiro
AU  - A. C. R. Paiva
PY  - 2015
DO  - 10.1109/CISTI.2015.7170608
JO  - 2015 10th Iberian Conference on Information Systems and Technologies (CISTI)
IS  - 
SN  - 2166-0727
VO  - 
VL  - 
JA  - 2015 10th Iberian Conference on Information Systems and Technologies (CISTI)
Y1  - 17-20 June 2015
AB  - This paper presents an educational game (iLearnTest) to teach software testing. The body of knowledge covered by the game corresponds to the ISTQB certification foundation level. The game was validated in an experiment with college students where it was intended to assess whether the results of an examination by the students who used the game in learning were better than those obtained by students who have not used it. The results show that the iLearnTest may be a good complement to traditional teaching.
ER  - 

TY  - CONF
TI  - Teaching Software Testing in an Algorithms and Data Structures Course
T2  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 419
EP  - 424
AU  - A. Arcuri
PY  - 2020
DO  - 10.1109/ICSTW50294.2020.00075
JO  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 24-28 Oct. 2020
AB  - In this paper, we report and share our experience on introducing the teaching of Software Testing in an Algorithms and Data Structures course. The goal was twofold: (1) help in the teaching of the complex subject of algorithms and data structures and (2) start to make the student familiar with the topic of software testing. We report on the lessons learned in such endeavor and on the results of a student survey, after the course was completed. How the teaching of software testing was introduced was positively evaluated by the students. All our teaching material is freely available online on GitHub.
ER  - 

TY  - CONF
TI  - Teaching Software Testing Concepts Using a Mutation Testing Game
T2  - 2017 IEEE/ACM 39th International Conference on Software Engineering: Software Engineering Education and Training Track (ICSE-SEET)
SP  - 33
EP  - 36
AU  - B. S. Clegg
AU  - J. M. Rojas
AU  - G. Fraser
PY  - 2017
DO  - 10.1109/ICSE-SEET.2017.1
JO  - 2017 IEEE/ACM 39th International Conference on Software Engineering: Software Engineering Education and Training Track (ICSE-SEET)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2017 IEEE/ACM 39th International Conference on Software Engineering: Software Engineering Education and Training Track (ICSE-SEET)
Y1  - 20-28 May 2017
AB  - Software testing is a core aspect of software development, but testing programs systematically is not always a core aspect of software engineering education. As a result, software developers often treat testing as a liability, and overall software quality suffers. One of the reasons for this is that standard testing techniques are often perceived as boring and difficult when compared to creative programming and design activities, which dominate education. To make software testing education more enjoyable, we recently introduced the Code Defenders game, in which players engage with testing activities in a fun and competitive way. In this short paper, we explore the idea of using Code Defenders to systematically teach software testing concepts. We present a mapping of core developer testing concepts, such as statement or branch coverage, to categories of puzzles in the framework of the game. As players progress through levels of this game, they incrementally learn and practice testing concepts. By presenting software testing as an enjoyable activity, we hope that learners will not only acquire better testing skills, but will in the long term become better software engineers.
ER  - 

TY  - CONF
TI  - Design of Blending Teaching Mode for Software Testing Course
T2  - 2020 15th International Conference on Computer Science & Education (ICCSE)
SP  - 816
EP  - 821
AU  - A. Liu
PY  - 2020
DO  - 10.1109/ICCSE49874.2020.9201740
JO  - 2020 15th International Conference on Computer Science & Education (ICCSE)
IS  - 
SN  - 2473-9464
VO  - 
VL  - 
JA  - 2020 15th International Conference on Computer Science & Education (ICCSE)
Y1  - 18-22 Aug. 2020
AB  - Software testing is a very practical course, in order to achieve the teaching requirements of professional ability training as the important target, this paper puts forward the design of blending teaching mode of software testing course from three aspects: teaching method, teaching content and teaching evaluation. Among them, online micro-video teaching is adopted before class, and offline teaching combined with the teaching mode of flipped classroom is adopted in class, running through the teaching methods of graded project-driven and case teaching, and that online recombination test paper is adopted to test students' learning effect after class. This will form a closed loop of pre-class, in-class and after-class learning, giving play to the advantages of online and offline teaching, promoting students' personalized independent learning and in-depth learning, so as to improve students' learning effect.
ER  - 

TY  - CONF
TI  - Improving Software Testing Education via Industry Sponsored Contests
T2  - 2018 IEEE Frontiers in Education Conference (FIE)
SP  - 1
EP  - 5
AU  - W. Eric Wong
AU  - L. Hu
AU  - H. Wang
AU  - Z. Chen
PY  - 2018
DO  - 10.1109/FIE.2018.8658960
JO  - 2018 IEEE Frontiers in Education Conference (FIE)
IS  - 
SN  - 2377-634X
VO  - 
VL  - 
JA  - 2018 IEEE Frontiers in Education Conference (FIE)
Y1  - 3-6 Oct. 2018
AB  - This Innovative Practice, Work in Progress Paper presents how we improve software testing education via industry sponsored contests. Over the past decades, we have built software to improve our efficiency, reliability, and safety in production, business, daily life, etc. These goals, however, cannot be accomplished if the software is not properly tested. Some universities provide classes to teach students the fundamental knowledge and techniques of software testing. However, these classes often ignore industry practices and can hardly offer real-world testing experiences to students. To address this, we partnered with industry sponsors to design and host several software testing contests along with software testing tutorials. Through the contests and tutorials, we brought real-world testing and tool experience to the students and provided excellent opportunities for them to practice their learned testing techniques to overcome industry testing challenges.
ER  - 

TY  - CONF
TI  - An experimental card game for software testing: Development, design and evaluation of a physical card game to deepen the knowledge of students in academic software testing education
T2  - 2016 IEEE Global Engineering Education Conference (EDUCON)
SP  - 576
EP  - 584
AU  - A. Soska
AU  - J. Mottok
AU  - C. Wolff
PY  - 2016
DO  - 10.1109/EDUCON.2016.7474609
JO  - 2016 IEEE Global Engineering Education Conference (EDUCON)
IS  - 
SN  - 2165-9567
VO  - 
VL  - 
JA  - 2016 IEEE Global Engineering Education Conference (EDUCON)
Y1  - 10-13 April 2016
AB  - Teaching software testing is a challenging task. Especially if you want to impart more in-depth and practical knowledge to the students. Therefore, most lectures still teach in a classic lecture format despite the fact that this way of instruction is in any case the optimal way of instruction for today's requirements anymore. In this paper we present our implementation of an active learning method to deepen the knowledge in academic software test education. We describe a card game for advanced learning that promotes students' collaboration and knowledge exchange in a playful and competitive manner. The design of the game is based on constructive and cooperative theories. A subsequent evaluation shows that the use of this card game for teaching software testing is a suitable method.
ER  - 

TY  - CONF
TI  - Teaching software testing skills: Metamorphic testing as vehicle for creativity and effectiveness in software testing
T2  - 2015 IEEE International Conference on Teaching, Assessment, and Learning for Engineering (TALE)
SP  - 161
EP  - 162
AU  - D. Towey
AU  - T. Y. Chen
PY  - 2015
DO  - 10.1109/TALE.2015.7386036
JO  - 2015 IEEE International Conference on Teaching, Assessment, and Learning for Engineering (TALE)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2015 IEEE International Conference on Teaching, Assessment, and Learning for Engineering (TALE)
Y1  - 10-12 Dec. 2015
AB  - In spite of its importance to software quality, software testing is often considered the "poor man" of software engineering processes, left to the end of many projects, and frequently omitted altogether. Compounding this is the reported perception of testing as a menial, low-level job, lacking any need for creativity or ingenuity, and of much lower status and attractiveness than others, such as design and implementation. When teaching about software testing, instructors often face very unmotivated students, professing little or no interest in becoming testers. This tutorial will address some testing misconceptions, and, through Metamorphic Testing - a new approach to testing which alleviates some of the major challenges in the field (including the Oracle Problem) - will provide a fresh and exciting new perspective on software testing.
ER  - 

TY  - CONF
TI  - Pattern oriented card game development: SOFTTY — A card game for academic learning of software testing
T2  - 2017 IEEE Global Engineering Education Conference (EDUCON)
SP  - 1166
EP  - 1173
AU  - A. Soska
AU  - J. Mottok
AU  - C. Wolff
PY  - 2017
DO  - 10.1109/EDUCON.2017.7942996
JO  - 2017 IEEE Global Engineering Education Conference (EDUCON)
IS  - 
SN  - 2165-9567
VO  - 
VL  - 
JA  - 2017 IEEE Global Engineering Education Conference (EDUCON)
Y1  - 25-28 April 2017
AB  - One of the biggest problems of educational games is the adequate integration of learning content into the game environment. Thereby the main challenge is to create a balance between gameplay and learning objectives and the correct transfer of learning principles into the game design. A useful approach is to identify game components and their specific learning constraints and the relationship between each other. By mapping learning elements to Game Design Pattern, we elaborate fundamentals for the concrete game design, focusing on card games. A shared description and an understanding of how the game design aligns with learning content facilitates the development of high quality educational games. A short illustration of our further developed implementation summarizes our experiences and shows an exemplary realization.
ER  - 

TY  - CONF
TI  - Process Oriented Guided Inquiry-based learning-like pedagogy (POGIL-like) in Online Software Testing and DevOps – A Replication Study
T2  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 438
EP  - 445
AU  - B. Gopal
AU  - S. Cooper
PY  - 2023
DO  - 10.1109/ICSTW58534.2023.00080
JO  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 16-20 April 2023
AB  - We present in this paper our findings from replicating our previously published study of a process oriented guided inquiry based learning approach called POGIL-like in the topics of unit testing, integration testing and continuous integration taught in an undergraduate, sophomore/junior level software engineering course. In our original paper we employed POGIL-like in an in-person classroom. In this replication study we discuss in detail the implementation of POGIL-like in a fully virtual, synchronous online classroom. We found a positive correlation between POGIL-like and student learning. We measured student learning outcomes using a cognitive pre- and post- survey instrument and observed statistically significant increases in learning outcomes. Our results reinforce the findings from our original study, and establish POGIL-like as a suitable pedagogical approach for teaching software testing and DevOps online at the undergraduate level.
ER  - 

TY  - CONF
TI  - Teaching Practices of Software Testing in Programming Education
T2  - 2020 IEEE Frontiers in Education Conference (FIE)
SP  - 1
EP  - 9
AU  - L. P. Scatalon
AU  - R. E. Garcia
AU  - E. F. Barbosa
PY  - 2020
DO  - 10.1109/FIE44824.2020.9274256
JO  - 2020 IEEE Frontiers in Education Conference (FIE)
IS  - 
SN  - 2377-634X
VO  - 
VL  - 
JA  - 2020 IEEE Frontiers in Education Conference (FIE)
Y1  - 21-24 Oct. 2020
AB  - This Research Full Paper presents an overview of the practices that have been used to integrate software testing into programming education. Introductory programming courses compose the core of several undergraduate programs, since programming is a crucial technical skill for professionals in many areas. Given the subject importance, researchers have been conducting several studies to investigate teaching approaches that can help overcoming students' learning difficulties. In particular, studies on introducing software testing into this context present evidence that testing practices can improve students' programming performance and habits. There are many teaching approaches in programming education, which involve different choices of programming paradigm and language, support tools and development practices, such as version control. Likewise, the integration of software testing into such diverse context can also happen in many different ways. Therefore, investigating the ways to teach programming and testing at the same time can help instructors with informed choices. In this sense, we identified teaching practices that have been adopted to integrate software testing into programming education. To do so, we further analyzed a subgroup of 195 papers that returned in our systematic mapping on this research domain. We selected papers describing empirical studies (e.g. survey, qualitative studies, experiments, case studies and experience reports), since this kind of study involves applying a given teaching practice in order to collect evidence or report the observed experience. Overall, our results shed light on how the integration of software testing has been done in different classroom contexts of programming education. We discuss the practices in terms of their application context (i.e. the course), how testing was introduced in theory and practice, and the adopted support tools. We also discuss an important gap regarding the lack of instruction in testing concepts, even when students are responsible to write their own tests.
ER  - 

TY  - CONF
TI  - Teaching Software Testing with the Code Defenders Testing Game: Experiences and Improvements
T2  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 461
EP  - 464
AU  - G. Fraser
AU  - A. Gambi
AU  - J. M. Rojas
PY  - 2020
DO  - 10.1109/ICSTW50294.2020.00082
JO  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 24-28 Oct. 2020
AB  - Code Defenders is a game that aims to engage students with software testing. Players compete over a Java class under test by producing tests and mutants, i.e., artificial faults, scoring points if tests reveal mutants, or mutants survive tests. While initially created as a fun way to introduce students to testing in one-off fun sessions, we have moved to integrating the game as an assessed core component of a software testing course. This has shown great potential in engaging students, but many challenges have been revealed as part of this integration. In this paper we describe how we integrated Code Defenders into a software testing course, and how we improved the game in order to address the resulting challenges.
ER  - 

TY  - CONF
TI  - Can Learning Formal Specification Be Fun? —Experience and Perspective
T2  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 437
EP  - 440
AU  - I. S. W. B. Prasetya
AU  - C. Q. H. D. Leek
AU  - R. Oosenbrug
AU  - P. Kostic
AU  - M. d. Vries
PY  - 2020
DO  - 10.1109/ICSTW50294.2020.00078
JO  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 24-28 Oct. 2020
AB  - Writing formal specifications is a useful skill for students to develop and to grow a positive mindset towards it. Unfortunately this is hampered by the stereotyping of formal method as dry and boring. In this short paper we discuss our experience in using of a computer game called FormalZ as an attempt to introduce some fun in teaching the skill. Two setups are discussed: as an embedded part of a course, and as a loose tutorial, after which we will conclude with the lessons learned.
ER  - 

TY  - CONF
TI  - How to Teach Software Testing? Experiences with a Sandwich Approach
T2  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 425
EP  - 428
AU  - L. Lambers
PY  - 2020
DO  - 10.1109/ICSTW50294.2020.00076
JO  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 24-28 Oct. 2020
AB  - We report on our experience with teaching software testing to graduate students. This experience was gained within a course offered yearly each winter term from 2015 till today. The course does not solely entail software testing as a topic, but also addresses briefly static analysis first (i.e. before testing) and verification afterwards (i.e. after testing). This is the reason for calling it with a twist from the testing perspective a sandwich approach. We motivate and present the overall structure and format of the course w.r.t. its learning objectives. We moreover describe some illustrative examples for structured interactions with students during the lecture as well as for project assignments, putting these into perspective w.r.t. the sandwich approach.
ER  - 

TY  - CONF
TI  - Model for teaching and training software testing in an agile context
T2  - 2020 IEEE Frontiers in Education Conference (FIE)
SP  - 1
EP  - 9
AU  - I. S. Elgrably
AU  - S. Ronaldo Bezerra Oliveira
PY  - 2020
DO  - 10.1109/FIE44824.2020.9274117
JO  - 2020 IEEE Frontiers in Education Conference (FIE)
IS  - 
SN  - 2377-634X
VO  - 
VL  - 
JA  - 2020 IEEE Frontiers in Education Conference (FIE)
Y1  - 21-24 Oct. 2020
AB  - This Research to Practice Full Paper presents a proposal for a model to improve the teaching process of software testing supported by elements of agile methods. It was developed to be used as a guide to support professors or specialists for decision making, selection of teaching materials according to the participants' cognitive learning for the execution of subjects or teaching units on topics related to software testing. In addition to suggesting several personalized activities, presenting an instance of application of a teaching syllabus that adheres to several reference syllabus, this model also seeks to be extensible, to be applied in other teaching areas, trying not to be limited to the software testing area. The construction of this model makes use of practical teaching approaches supported by practices, such as gamification and playful teaching to motivate and engage participants, bringing common tasks and technologies in the software industry in parallel to classic lecture classes, in order to develop certain skills, which were obtained through academic syllabus, together with technical skills in software testing for participants, in addition to knowledge of several open source tools that are used by testing professionals in the software industry. This construction is specified in several stages arranged in a teaching cycle, being sequenced when they are applied and can be adapted for other learning scenarios. Subsequently, the skills, competences and support materials that can be used are presented in addition to the possible effects expected on students from the application of this model in the teaching of software testing. As it uses practical teaching approaches, it is advisable that this model is used by professors who have a teaching facilitator profile, as it presents humanistic teaching learning, with a focus on participants and teamwork, principles found in agile methods, in which activities will have deliveries of products that approach what is performed in a software company and it will be necessary the interaction of all participants in the model. The evaluation process for this teaching model took place in two stages. First, there was an analysis and individual evaluation of the model through the questionnaire, then there was a consensus meeting between the evaluators, where they justified the marks attributed in the evaluation and their considerations on other responses. This meeting aimed to solve disagreements and collect opinions, enabling problems to be solved and reaching a final consensus among the evaluators. The authors consider that it is necessary to remodel teaching paradigms of computing subjects, using together some characteristics of traditional approaches with more practical teaching approaches that solidify the knowledge of the participants for the challenges that exist in the software industry.
ER  - 

TY  - CONF
TI  - Using flipped classroom to promote active learning and engagement in a Software Testing subject remotely during the COVID-19 pandemic
T2  - 2022 IEEE Frontiers in Education Conference (FIE)
SP  - 1
EP  - 6
AU  - I. S. Elgrably
AU  - S. Ronaldo Bezerra Oliveira
PY  - 2022
DO  - 10.1109/FIE56618.2022.9962379
JO  - 2022 IEEE Frontiers in Education Conference (FIE)
IS  - 
SN  - 2377-634X
VO  - 
VL  - 
JA  - 2022 IEEE Frontiers in Education Conference (FIE)
Y1  - 8-11 Oct. 2022
AB  - This Research to Practice Full Paper presents the results obtained in an implementation of a flipped classroom, taught remotely synchronously in a subject of software testing in a graduate class. Due to the maintenance of the COVID-19 pandemic in the year 2021 due to the emergence of some variants, some universities around the world, especially in countries with a still high transmission rate, decided to continue with remote classes in this academic period. In this context, Software Testing is an important topic of knowledge derived from Software Engineering and has been gaining prominence in development companies in recent years, however it is a subject that needs a more practical and dynamic way of learning to obtain skills and competences. by the students. In order to promote a good teaching and learning process, more and more teachers and professors have been taking greater care in the selection of teaching strategies to help build the knowledge of their students, one of these strategies is the flipped classroom, in which the student internalizes the contents pointed out before a class and then, together with the class, a discussion is held about the knowledge acquired with the help and guidance of the teacher / professor. However, this knowledge transfer process has some extra difficulties with content that are more easily taught in a practical and face-to-face manner. Assuming, this work presents how the authors got around these difficulties and what the students present in a graduate class in a Software Testing subject thought of the adopted teaching strategy. To present an experience report of the use of the flipped classroom strategy in a software testing subject in a graduate computer science class. In parallel also, analyze the motivation and engagement of students in this learning scenario of the strategy in remote teaching. For this subject, a specific curriculum was selected for the teaching of software testing that takes into account the academic competences of the Brazilian Ministry of Education – MEC. Both the learning of the content were evaluated, taking into account the evaluations that were used in the flipped classroom with other teaching strategies in two other previous classes, the feedback given by the students about the subject and specifically about this teaching strategy was also considered, which was obtained via a structured questionnaire answered anonymously by each of the students participating in the course. The results indicate that there was an increase in the students' grade compared to evaluations of the same subject in the two previous years. However, the most important result was the feedback given by the students in the perception questionnaire of each teaching strategy adopted in the subject, considering that there was an excellent acceptance according to the participants. This paper mainly aims to help teachers / professors and researchers of active teaching methodologies in the perspective of knowledge construction in remote teaching using the flipped classroom as a support strategy.
ER  - 

TY  - CONF
TI  - Remote teaching and learning of software testing using active methodologies in the COVID-19 pandemic context
T2  - 2021 IEEE Frontiers in Education Conference (FIE)
SP  - 1
EP  - 9
AU  - I. S. Elgrably
AU  - S. R. B. Oliveira
PY  - 2021
DO  - 10.1109/FIE49875.2021.9637426
JO  - 2021 IEEE Frontiers in Education Conference (FIE)
IS  - 
SN  - 2377-634X
VO  - 
VL  - 
JA  - 2021 IEEE Frontiers in Education Conference (FIE)
Y1  - 13-16 Oct. 2021
AB  - This Research for the Practice of Full Paper shows that in the face of the COVID-19 pandemic, the immense challenge of continuing the teaching-learning process without face-to-face classes arose. This required a rapid shift to distance education in order to enable continuity of university activities. Distance education still needs the help of other factors, as some subjects, for example software testing, may need other forms of active approaches and methodologies to make their teaching and learning process more efficient. In teaching some computer science subjects, there is a need for learning through the application of practical activities. The use of distance learning entails an even greater aggravation of this need, given the numerous limitations that exist in this modality, requiring good planning and rigorous monitoring before, during and after classes. Thus, this paper aims to identify and discuss the findings, good practices, recommendations and perceptions used in a software testing subject, in addition to analyzing the motivations and perceptions of students in a distance learning environment.
ER  - 

TY  - CONF
TI  - Exploration and Practice of Ideological and Political Construction of Software Testing
T2  - 2021 IEEE 3rd International Conference on Computer Science and Educational Informatization (CSEI)
SP  - 249
EP  - 253
AU  - R. Ding
AU  - Y. Sun
AU  - Y. Zhang
AU  - Y. Xin
PY  - 2021
DO  - 10.1109/CSEI51395.2021.9477711
JO  - 2021 IEEE 3rd International Conference on Computer Science and Educational Informatization (CSEI)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 IEEE 3rd International Conference on Computer Science and Educational Informatization (CSEI)
Y1  - 18-20 June 2021
AB  - In order to strengthen moral education in university, we take the course of software testing as an example to build the ideological and political teaching of first-class courses for general universities. In this paper, we organically integrate teaching content with ideological and political elements, and propose a student-centered reformation teaching mode and evaluation system. A comprehensive training model of inside and outside of class, before and after course, promoting learning by competition, and improving scientific research has gradually formed, so as to train socialist builders with both ability and political integrity and achieve a long-term training for students of different levels in and out of class. Two years' teaching practice shows that the innovative curriculum design has effectively improved the students' ideological level and political literacy and the educational function of professional courses has been effectively exerted, it forms a solid basic for further development of students.
ER  - 

TY  - CONF
TI  - Construction of a syllabus adhering to the teaching of software testing using agile practices
T2  - 2020 IEEE Frontiers in Education Conference (FIE)
SP  - 1
EP  - 9
AU  - I. S. Elgrably
AU  - S. Ronaldo Bezerra Oliveira
PY  - 2020
DO  - 10.1109/FIE44824.2020.9274266
JO  - 2020 IEEE Frontiers in Education Conference (FIE)
IS  - 
SN  - 2377-634X
VO  - 
VL  - 
JA  - 2020 IEEE Frontiers in Education Conference (FIE)
Y1  - 21-24 Oct. 2020
AB  - This Research to Practice full paper presents an investigation into the construction of a software testing syllabus, using agile practices as support to make it adherent to teaching by academic skills. In most Brazilian universities, software testing is approached mainly as subtopics of the subjects of Software Engineering or Software Quality; this little contact with the topic can become a discouraging problem for higher education students seeking knowledge about this important area. For the development of the syllabus, we had as reference the competence and syllabus guidelines of the Ministry of Education of Brazil, which is the regulator of the syllabus guidelines for undergraduate and graduate courses in computing in Brazil. In conjunction with these guidelines, other assets in the area were aligned, such as the academic syllabus of the Brazilian Computer Society and the ACM / IEEE, in conjunction with the SWEBOK test-oriented knowledge areas, the Test Maturity Model Integration process areas and guided by agile practices, principles and techniques found in the literature. After this stage, the construction of teaching units for teaching of software testing was carried out. These teaching units were evaluated as part of the software testing teaching model by means a focus group, composed of three doctors who are also specialists in the teaching of software engineering, with experience in teaching and research. Thus, this work also provides a set of skills that we consider favorable to the teaching of software testing, considering several academic syllabuses analyzed. Academic program managers and teachers can use the knowledge generated in this article to facilitate the construction of syllabuses or subjects related to tests, learning objects and academic syllabus. Our findings can also be learning facilitators for competency-based teaching and learning experiences for testing professionals.
ER  - 

TY  - CONF
TI  - Perception from the professors' point of view in the remote teaching of Software Testing using active methodologies during the Covid-19 pandemic
T2  - 2022 IEEE Frontiers in Education Conference (FIE)
SP  - 1
EP  - 9
AU  - I. S. Elgrably
AU  - S. Ronaldo Bezerra Oliveira
PY  - 2022
DO  - 10.1109/FIE56618.2022.9962481
JO  - 2022 IEEE Frontiers in Education Conference (FIE)
IS  - 
SN  - 2377-634X
VO  - 
VL  - 
JA  - 2022 IEEE Frontiers in Education Conference (FIE)
Y1  - 8-11 Oct. 2022
AB  - This Research Full Paper presents an analysis of the perception of research professors of Software Engineering on the use and difficulties in the context of developing classrooms with teaching strategies using active methodologies remotely. In recent years, due to the Covid-19 pandemic, professors have been facing several challenges to keep students engaged, motivated and learning. The active teaching methodologies that have been collaborating in recent years in the teaching and learning process of students, needed to adapt to the remote teaching class scenario that was implemented in several universities. This research measured the point of view of four professors, who are also researchers in computing education, about how their classes behaved in the last two years of the Software Testing subject in a graduate program at a Brazilian federal university. So that computing students have a way to obtain knowledge in a more practical way so that there is a decrease in the difficulty of students adapting to the job market. Professors are increasingly adopting active methodologies, group work and practical teaching approaches in order for students to acquire skills that will be decisive for their professional future. In view of the existing pandemic scenario and the need to adapt teaching plans for remote teaching, this paper sought to identify the perceptions that professors had, whether in the difficulties of adapting activities, adapting teaching plans to difficulties in keeping students attentive and motivated in the content that was being passed on. The objective of this work is to identify and discuss professors' perceptions about the use of active teaching methodologies using remote teaching in a software testing subject of a graduate class at a Brazilian federal university. It was also analyzed how the professors dealt with the issue of student motivation and engagement at that time. An analysis of the teaching plan of the software testing subject of the last two years of the graduate program in computing at a Brazilian federal university was carried out and each of the methodologies with the perception of the professors who participated in these subjects. The collection of these data was carried out by means of an interview with the four professors, the feedback from the students of the classes on each of the adopted methodologies was also analyzed and a triangulation of the data obtained was performed. The results indicate that there were great difficulties in adapting active methodologies from the point of view of the professors, however most of these challenges were overcome in the their views. It was also pointed out that certain methodologies and practices work better if the learning is done in an evolutionary way and that takes into account the students' previous knowledge about contents, tools and practices that the professors want to use. Thus, this paper aims to present an overview of professors' perspectives on the teaching of a computing subject that needs practical approaches using active methodologies in an emergency situation of remote teaching.
ER  - 

TY  - CONF
TI  - Code Critters: A Block-Based Testing Game
T2  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 426
EP  - 429
AU  - P. Straubinger
AU  - L. Caspari
AU  - G. Fraser
PY  - 2023
DO  - 10.1109/ICSTW58534.2023.00077
JO  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 16-20 April 2023
AB  - Learning to program has become common in schools, higher education and individual learning. Although testing is an important aspect of programming, it is often neglected in education due to a perceived lack of time and knowledge, or simply because testing is considered less important or fun. To make testing more engaging, we therefore introduce Code Critters, a Tower Defense game based on testing concepts: The aim of the game is to place magic mines along the route taken by small "critters" from their home to a tower, such that the mines distinguish between critters executing correct code from those executing buggy code. Code is shown and edited using a block-based language to make the game accessible for younger learners. The mines encode test inputs as well as test oracles, thus making testing an integral and fun component of the game.
ER  - 

TY  - CONF
TI  - The use of gamification to support the teaching-learning of software exploratory testing: an experience report based on the application of a framework
T2  - 2020 IEEE Frontiers in Education Conference (FIE)
SP  - 1
EP  - 9
AU  - I. E. Ferreira Costa
AU  - S. R. B. Oliveira
PY  - 2020
DO  - 10.1109/FIE44824.2020.9273943
JO  - 2020 IEEE Frontiers in Education Conference (FIE)
IS  - 
SN  - 2377-634X
VO  - 
VL  - 
JA  - 2020 IEEE Frontiers in Education Conference (FIE)
Y1  - 21-24 Oct. 2020
AB  - This Research to Practice Full Paper presents exploratory testing, an approach that has become quite relevant in the testing software, growing its application in the industrial scenario. The main reason for that is the emerging utilization of agile practices in the software development process to satisfy the needs of the market (Time to Market), which is essential for a company to remain active in the market. However, the systematic mapping study performed found few studies about the application of exploratory testing, a subject little discussed in the academic context. For this reason, this work uses gamification as a systematic strategy in exploratory test teaching and learning in the form of an experiment with two classes. One class has undergraduate students in Computer Science, and the other has students who graduated as Computer Technicians. The aim is to engage students to obtain a better performance, preparing them to use that test approach in the industrial and academic context. As a result, students achieved good overall performance; with reports from students that gamification facilitated and significantly collaborated to achieve a better performance converging with the quantitative data obtained. This can be evidenced mainly by the fact that both runs of the experiment (classes) reached a percentage higher than 70% of achievement, a great overall performance analyzed by the ratio of medals obtained by participation.
ER  - 

TY  - CONF
TI  - Teaching Software Testing with Free and Open Source Software
T2  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 412
EP  - 418
AU  - L. Deng
AU  - J. Dehlinger
AU  - S. Chakraborty
PY  - 2020
DO  - 10.1109/ICSTW50294.2020.00074
JO  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 24-28 Oct. 2020
AB  - Software quality assurance and testing is a vital phase in the software development lifecycle, oftentimes requiring a significant portion of the overall development budget. Providing authentic, real-world software quality assurance and testing experiences within the context of a Computer Science or Software Engineering curriculum is challenging. Based on prior experience leveraging Free and Open Source Software (FOSS) as an instructional medium for teaching Software Engineering concepts, this paper describes five increasingly involved learning interventions that utilize FOSS in a software testing course to provide students real-world hands-on software testing knowledge and experience. The proposed approach will be piloted and assessed in software testing courses at the undergraduate and graduate level.
ER  - 

TY  - CONF
TI  - Educational games: A contribution to software testing education
T2  - 2017 IEEE Frontiers in Education Conference (FIE)
SP  - 1
EP  - 8
AU  - P. Henrique Dias Valle
AU  - A. M. Toda
AU  - E. F. Barbosa
AU  - J. C. Maldonado
PY  - 2017
DO  - 10.1109/FIE.2017.8190470
JO  - 2017 IEEE Frontiers in Education Conference (FIE)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2017 IEEE Frontiers in Education Conference (FIE)
Y1  - 18-21 Oct. 2017
AB  - Software testing is a relevant activity to provide evidence of qualifty of software products. However, there is a lack of qualified professionals in this area. This can be caused due to difficulty in teaching software testing through approaches that use only theoretical classes and traditional tools. In addition, there is a lack of motivation due to the work environment and the strategies of allocation and responsibility of these professionals in development and testing teams. To mitigate these problems, approaches have been used to support software testing education, such as: educational games, integrated teaching of software testing with programming, educational modules, among others. The objective of this paper was to develop an educational game named Testing Game, addressing the following topics: functional testing, structural testing and mutation testing. To support the development of the Testing Game, we performed a systematic mapping aiming at selecting a game engine. To evaluate the efficiency of the game, we conducted a feasibility study to evaluate the quality regarding motivation, user experience and learning from the point of view of the students. We also evaluate the usability of the Testing Game. Approximately 85.64% of people who participated in the study assessed the quality of the game in a positive perspective regarding motivation, user experience and learning from the point of view of the students. Regarding the usability of the game, students identified minor problems. Through this work, we realize that the game Testing Game can constitute as a complementary resource to support software testing education.
ER  - 

TY  - CONF
TI  - Gamification In E-Learning For Playgroup
T2  - 2022 6th International Conference on Informatics and Computational Sciences (ICICoS)
SP  - 146
EP  - 151
AU  - Y. K. Triatmaja
AU  - G. Aryotejo
AU  - D. M. K. Nugraheni
AU  - B. Noranita
PY  - 2022
DO  - 10.1109/ICICoS56336.2022.9930568
JO  - 2022 6th International Conference on Informatics and Computational Sciences (ICICoS)
IS  - 
SN  - 2767-7087
VO  - 
VL  - 
JA  - 2022 6th International Conference on Informatics and Computational Sciences (ICICoS)
Y1  - 28-29 Sept. 2022
AB  - E-learning is an electronic learning system that includes various types of media that can provide and display text, audio, images, animation, and video streaming, and includes technology applications and processes such as audio or video tape, satellite TV, CD-ROM, and computer-based learning, whether using an intranet, extranet or website-based. Early childhood education, especially pre-school playgroup in the age range up to the age of 6 years is a very important education in providing the basis for knowledge, attitudes and skills so that E-Learning is one of the efforts to improve the abilities of pre-school playgroup children. Therefore, gamification in E-Learning as a game application is needed to teach knowledge, attitudes and skills towards Pre-school playgroup children by playing which can train the cognitive and motor skills of the child. Game application development from ELearning will be developed using the Game Development Life Cycle (GDLC) method with Construct 3 development software. Testing will be carried out using Alpha Test and Beta Test. The results of the Alpha Test and Beta Test tests carried out by end-users stated that the system was appropriate and the features were running well. This application is expected to help Preschool playgroup students in improving their learning abilities. The results of the Alpha Test and Beta Test tests carried out by end-users stated that the system was appropriate and the features were running well. This application is expected to help Pre-school playgroup students in improving their learning abilities. The results of the Alpha Test and Beta Test tests carried out by end-users stated that the system was appropriate and the features were running well. This application is expected to help Pre-school playgroup students in improving their learning abilities.
ER  - 

TY  - CONF
TI  - Tutorial on a Gamification Toolset for Improving Engagement of Students in Software Engineering Courses
T2  - 2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T)
SP  - 1
EP  - 3
AU  - T. E. J. Vos
AU  - G. Fraser
AU  - I. Martinez-Ortiz
AU  - R. Prada
AU  - A. R. Silva
AU  - I. S. W. B. Prasetya
PY  - 2020
DO  - 10.1109/CSEET49119.2020.9206212
JO  - 2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T)
IS  - 
SN  - 2377-570X
VO  - 
VL  - 
JA  - 2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T)
Y1  - 9-12 Nov. 2020
AB  - Few if any would dispute that educating software engineering is a challenging endeavour. Although programming and creating new artefacts can motivate the creativity of students. Other software engineering topics (like e.g. requirement specifications and testing) are not considered very exciting by students. However, these topics are important to develop quality software and insufficient knowledge of students — Europe's future software engineers — in the long run contributes to failing software. The EU Erasmus+ project IMPRESS was set to explore the use of gamification in educating software engineering at the university level. The objective has been to develop a toolset that can help to improve students' engagement, and hence their appreciation, for the taught subjects like software testing and specifications. The proposed tutorial will guide participants through the set of tools developed by the project and introduce how they can use them to improve students' engagement.
ER  - 

TY  - CONF
TI  - Intracompany Training in Software Testing: Experience Report
T2  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 422
EP  - 425
AU  - I. Itkin
AU  - N. Sirbiladze
AU  - E. Treshcheva
AU  - R. Yavorskiy
PY  - 2023
DO  - 10.1109/ICSTW58534.2023.00076
JO  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 16-20 April 2023
AB  - The objective of this short paper is to summarize the team’s experience in the area of software-testing education obtained through the development of an extensive internal training program for entry-level software testing specialists. The curriculum description is outlined in the context of most recent trends in the professional domain of software testing as well as the demand for new skills caused by the industry shift. We discuss the educational approach, course design, instruction tools and techniques along with the challenges and lessons learned in the setting of an international, multicultural, and geographically-distributed classroom.
ER  - 

TY  - CONF
TI  - A diagnosis on software testing education in the Brazilian Universities
T2  - 2021 IEEE Frontiers in Education Conference (FIE)
SP  - 1
EP  - 8
AU  - I. S. Elgrably
AU  - S. R. B. de Oliveira
PY  - 2021
DO  - 10.1109/FIE49875.2021.9637305
JO  - 2021 IEEE Frontiers in Education Conference (FIE)
IS  - 
SN  - 2377-634X
VO  - 
VL  - 
JA  - 2021 IEEE Frontiers in Education Conference (FIE)
Y1  - 13-16 Oct. 2021
AB  - This Research to Practice Full Paper presents an investigation on the teaching of software tests in Computer Science courses in Brazilian Institutions. In this work, we investigate the existence of subjects and contents related to the software testing theme in the academic curricula of the best Brazilian universities in the computer courses indicated by Folha's Universities Ranking in 2019. So that the software testing activity becomes widespread and recognizable, it needs to be widely taught and discussed, although there is a growing concern with this teaching theme, the organization and depth of teaching software testing varies widely in each curriculum matrix of the studied institutions, especially comparing them with the curriculum of updated reference of the ACM / IEEE (Association for Computing Machinery / Institute of Electrical and Electronic Engineers) and the curriculum guide of the SBC (Brazilian Computer Society) along with the areas of knowledge present in the SWEBOK Guide (Software Engineering Body of Knowledge), which are the main references for building of the curricula of Brazilian institutions. Thus, this work provides important inferences about how software testing has been approached, at the curricular level, in different Brazilian institutions, from specific subjetcs of software testing, subjects that contain topics related to tests and which are the main topics that are taught. Professors and academic managers can use the knowledge generated in this paper to help in a possible readjustment of how their institutions can deal with the teaching of software tests.
ER  - 

TY  - CONF
TI  - An adaptive delivery strategy for teaching software testing and maintenance
T2  - 2015 10th International Conference on Computer Science & Education (ICCSE)
SP  - 237
EP  - 242
AU  - M. Allison
AU  - S. F. Joo
PY  - 2015
DO  - 10.1109/ICCSE.2015.7250249
JO  - 2015 10th International Conference on Computer Science & Education (ICCSE)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2015 10th International Conference on Computer Science & Education (ICCSE)
Y1  - 22-24 July 2015
AB  - Today's classroom and learner cohorts are supported by new and innovative technology in an unprecedented manner. The pace of technological advancements however does present challenges to educators in keeping abreast of the state of the art while concurrently facilitating a learner-certered approach. Topics within software engineering are especially susceptible to this phenomena and demands a more individualized adaptive model to support significant learning. Although there is an abundance of sound theoretical models which may address the challenge, the literature is sparse as to contextualization, application or concrete operation. Within a blended classroom, we have implemented an adaptive approach to address the pace of technology advancements with consideration for the skillsets and declarative knowledge of the learner. In this paper we present our approach within a software testing and maintenance course and discuss the lessons learnt. We have based our approach on the scientific grounding of Vygotsky's zone of proximal development and discuss the necessary scaffolding, inherent challenges and present an evaluation based on pre/post testing.
ER  - 

TY  - CONF
TI  - Development of a virtual teaching pendant system for serial robots based on ROS-I
T2  - 2017 IEEE International Conference on Cybernetics and Intelligent Systems (CIS) and IEEE Conference on Robotics, Automation and Mechatronics (RAM)
SP  - 720
EP  - 724
AU  - L. Chen
AU  - Z. Wei
AU  - F. Zhao
AU  - T. Tao
PY  - 2017
DO  - 10.1109/ICCIS.2017.8274867
JO  - 2017 IEEE International Conference on Cybernetics and Intelligent Systems (CIS) and IEEE Conference on Robotics, Automation and Mechatronics (RAM)
IS  - 
SN  - 2326-8239
VO  - 
VL  - 
JA  - 2017 IEEE International Conference on Cybernetics and Intelligent Systems (CIS) and IEEE Conference on Robotics, Automation and Mechatronics (RAM)
Y1  - 19-21 Nov. 2017
AB  - The aim of this paper was to present a virtual teaching pendant system for serial industrial robots. Based on Robot Operating System Industrial (ROS-I), the virtual teaching pendant system we designed has the capacity for robot model establishment, direct and inverse kinematics manipulation, as well as motion planning. This virtual teaching pendant system not only contains the main teaching pendant functions but can drive any serial robots in both simulation and real-world. This paper will also highlight the many advantages of this virtual teaching pendant system which can be used as a good teaching tool to help students in understanding robotics. Several demonstrations are made to show the universality and functionality of the virtual teaching pendant system.
ER  - 

TY  - CONF
TI  - On the Current State of Academic Software Testing Education in Sweden
T2  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 397
EP  - 404
AU  - A. A. Barrett
AU  - E. Paul Enoiu
AU  - W. Afzal
PY  - 2023
DO  - 10.1109/ICSTW58534.2023.00073
JO  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 16-20 April 2023
AB  - Well-trained software development personnel, in the art and science of software testing, will effectively and efficiently develop quality software products with potentially fewer, less-critical defects. Thus software testing education is considered to be an important part of curricula for a university degree in Computer Science or Information Systems. The objective of this paper is to determine how much dedicated knowledge in the field of software testing is taught within Swedish universities. To achieve this objective, a systematic search of syllabi for software testing-related courses was done. From 25 Swedish universities offering Computer Science (or related) degrees, 14 currently offer dedicated courses in software testing. Some findings include: 32% of the individual courses were offered at the undergraduate level; 28% of the universities offer courses for specialised testing training; and, for the vast majority of the universities, dedicated software testing courses account for about 5% of the total degree credits. While some universities fare better than others, the overall state of academic software testing education in Sweden is limited but promising.
ER  - 

TY  - CONF
TI  - Teaching a Testing Concept (JUnit) with Active Learning
T2  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 411
EP  - 411
AU  - K. Baral
AU  - P. Ammann
PY  - 2020
DO  - 10.1109/ICSTW50294.2020.00073
JO  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 24-28 Oct. 2020
AB  - Active learning is an approach that facilitates learning through collaboration, communication and discussion in the classroom. Flipped classroom is a variant of active learning where lecture materials are recorded for viewing outside the classroom thereby freeing up class time for problem solving and discussions. In this demo, we show how we use active learning in the context of teaching the testing concept of property-based testing.
ER  - 

TY  - CONF
TI  - Role of Machine Learning in Software Testing
T2  - 2021 5th International Conference on Information Systems and Computer Networks (ISCON)
SP  - 1
EP  - 5
AU  - Vedpal
AU  - N. Chauhan
PY  - 2021
DO  - 10.1109/ISCON52037.2021.9702427
JO  - 2021 5th International Conference on Information Systems and Computer Networks (ISCON)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 5th International Conference on Information Systems and Computer Networks (ISCON)
Y1  - 22-23 Oct. 2021
AB  - Software reliability and robustness is the main objective to perform testing of the software. Now the machine learning approaches are used to develop applications in almost every area like health care, business prediction, etc. The testing of such type of software by using the conventional testing techniques does not give promising results. The testing techniques based on machine learning helps to produce reliable and robust software within time and allocated budget. In this paper the role of the machine learning algorithms in the design of testing approaches for testing the software has been presented. The machine learning-based testing techniques are used in the generation and execution order of the test cases. The outcomes of the machine learning based techniques showing the efficacy as compared to the other techniques.
ER  - 

TY  - CONF
TI  - CS curricula of the most relevant universities in Brazil and abroad: Perspective of software testing education
T2  - 2015 International Symposium on Computers in Education (SIIE)
SP  - 62
EP  - 68
AU  - P. H. D. Valle
AU  - E. F. Barbosa
AU  - J. C. Maldonado
PY  - 2015
DO  - 10.1109/SIIE.2015.7451649
JO  - 2015 International Symposium on Computers in Education (SIIE)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2015 International Symposium on Computers in Education (SIIE)
Y1  - 25-27 Nov. 2015
AB  - Software testing is a relevant activity to provide evidencies of the quality of software products. However, few courses in the computing area provide an adequate body of knowledge to the students and few of them pursue the software development practices and activities related to VV&T (Verification, Validation, and Testing), specifically testing, leading to a recognized lack of professionals that master the underlying VV&T concepts and principles. In this paper, we provide an overview concerning the software testing education in the most relevant brazilian universities and abroad. We analyze the reference curricula proposed by SBC (Brazilian Computer Society) and ACM (Association for Computing Machinery) for undergraduate computer courses as well as the curricula of the most relevant universities in Brazil and abroad. We identify the effort allocated, the main approaches and the main tendencies to facilitate the teaching of software testing. It is clear that there is a need to integrate software testing education with other disciplines along the CS undergraduate courses.
ER  - 

TY  - CONF
TI  - Analyzing Competences in Software Testing: Combining Thematic Analysis with Natural Language Processing (NLP)
T2  - 2021 IEEE Frontiers in Education Conference (FIE)
SP  - 1
EP  - 9
AU  - T. Rahman
AU  - J. Nwokeji
AU  - R. Matovu
AU  - S. Frezza
AU  - H. Sugnanam
AU  - A. Pisolkar
PY  - 2021
DO  - 10.1109/FIE49875.2021.9637220
JO  - 2021 IEEE Frontiers in Education Conference (FIE)
IS  - 
SN  - 2377-634X
VO  - 
VL  - 
JA  - 2021 IEEE Frontiers in Education Conference (FIE)
Y1  - 13-16 Oct. 2021
AB  - This Full Paper (Research) presents an analysis on the competences in software testing for the fresh graduates in computer science. Software Testing education (ST) is receiving increasing attention in literature, recent studies have evaluated instructional methods used in ST education. However, analysis of competences (skills, knowledge, and ability) required in ST education are lacking in literature. Competences play critical roles in curriculum development e.g., they inform the design of student learning outcomes, learning objectives and program outcomes. This full paper in the research category aims to analyze competences in ST education and then examine the gap between these competences and the current ST curriculum. Using natural language processing (NLP) techniques, we collect 2033 job descriptions from three popular job portals (indeed, monster, and career builder) in the USA and Canada. Also, we collected course syllabi from 20 universities offering ST courses and use these to assess the current curriculum in ST. We analyzed the data using thematic analysis and found that the current software testing curricula do not always teach or equip students with some of the soft skills they require to be successful in software testing career. For instance, our result shows that soft skills such as teamwork, communication, leadership, which are often required by software testing employers are not always taught in ST courses.
ER  - 

TY  - CONF
TI  - An Empirical Evaluation of Regular and Extreme Mutation Testing for Teaching Software Testing
T2  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 405
EP  - 412
AU  - M. Balfroid
AU  - P. Luycx
AU  - B. Vanderose
AU  - X. Devroey
PY  - 2023
DO  - 10.1109/ICSTW58534.2023.00074
JO  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 16-20 April 2023
AB  - Teaching software testing can be challenging due to low student interest, high cognitive load, and lack of alignment with industry needs. Previous research has attempted to address these challenges by using mutation testing, which involves intentionally introducing faults into the code to measure the ability of a test suite to detect faults. Although this method has been proven effective in teaching software testing, it can sometimes be difficult for a novice to write a test to kill some mutants because they are too subtle and there are no hints. In contrast, extreme mutation testing involves more evident changes (e.g., removing a method body) that may be easier for novice testers to identify. This paper investigates extreme mutation testing as an alternative to teaching software testing by comparing it to regular mutation testing in an empirical evaluation with two undergraduate classes. Our results show that both can help teach software testing, with regular mutation testing slightly more effective, and both types of reports were considered clear by a similar number of students.
ER  - 

TY  - CONF
TI  - On Teaching of Computer Networks using Novel Methodologies
T2  - 2020 18th International Conference on Emerging eLearning Technologies and Applications (ICETA)
SP  - 272
EP  - 275
AU  - O. Kainz
AU  - M. Michalko
AU  - F. Jakab
AU  - R. Petija
AU  - J. Uramova
AU  - M. Moravcik
PY  - 2020
DO  - 10.1109/ICETA51985.2020.9379177
JO  - 2020 18th International Conference on Emerging eLearning Technologies and Applications (ICETA)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 18th International Conference on Emerging eLearning Technologies and Applications (ICETA)
Y1  - 12-13 Nov. 2020
AB  - In this study, we focus on the methodologies that were created as a part of the national IT Academia project. We describe the standardized format that each methodology follows, making each methodology quickly understandable for the instructors. As another goal, we deploy the methodologies on the course taught at the local university. The created methodologies have proven to supply adequate output, both for the instructors and students. Outputs of the testing yield positive feedback from the side of students and render methodologies usable in the real practice, as is also proven by the feedback from the secondary school teachers who teach Computer networks courses.
ER  - 

TY  - CONF
TI  - Building Software Testing Skills in Undergraduate Students Using Spiral Model Approach
T2  - 2016 IEEE Eighth International Conference on Technology for Education (T4E)
SP  - 244
EP  - 245
AU  - G. Joshi
AU  - P. Desai
PY  - 2016
DO  - 10.1109/T4E.2016.061
JO  - 2016 IEEE Eighth International Conference on Technology for Education (T4E)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2016 IEEE Eighth International Conference on Technology for Education (T4E)
Y1  - 2-4 Dec. 2016
AB  - Spiral Learning aims to strengthen students' understanding of the basic concepts by revisiting the concepts periodically with different contexts and with increasing sophistication throughout the curriculum. This approach helps to overcome the limitations of the instructional design and delivery such as concepts taught in isolation and not being emphasized in later stages of learning leading to poor appreciation of learned concepts and repetition disregarding earlier knowledge limiting the depth of treatment. Software testing is an important skill required for computer science and engineering professionals. Students are able to write quality programs only if they know what is to be tested. Earlier, “software testing” was taught as a course in higher semester of undergraduate (UG) curriculum of computer science and engineering. As it was taught in isolation it was difficult for to build up required testing skill in the students. This paper discusses the experience of authors in building software testing skills among the students of engineering degree program in computer science and engineering as a solution to make up for the deficiency in the earlier curriculum. Authors explain the need for building software testing skills seamlessly integrating with programming, software engineering and project courses through spiral approach.
ER  - 

TY  - CONF
TI  - Industry-Academia Collaboration in Software Testing: An Overview of TAIC PART 2017
T2  - 2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 42
EP  - 43
AU  - T. Kitamura
AU  - E. Alégroth
AU  - R. Ramler
PY  - 2017
DO  - 10.1109/ICSTW.2017.13
JO  - 2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 13-17 March 2017
AB  - Collaboration between industry and academia in software testing leads to improvement and innovation in industry, and it is the basis for achieving transferable and empirically evaluated results. Thus, the aim of TAIC PART is to forge collaboration between industry and academia on the challenging and exciting problem of real-world software testing. The workshop is promoted by representatives of both industry and academia, bringing together industrial software engineers and testers with researchers working on theory and practice of software testing. We present an overview of the 12th Workshop on Testing: Academia-Industry Collaboration, Practice and Research Techniques (TAIC PART 2017) and its contributions.
ER  - 

TY  - CONF
TI  - Software Testing in Industry and Academia: A View of Both Sides in Japan
T2  - 2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 40
EP  - 41
AU  - S. Masuda
PY  - 2017
DO  - 10.1109/ICSTW.2017.12
JO  - 2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2017 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 13-17 March 2017
AB  - Collaboration between industry and academia is important for solving problems and creating innovations. Both sides of industry and academia are important for each other, but sometimes they are incompatible. In this paper, we discuss software testing in industry and academia from their respective views in Japan on the basis of the author's experiences and studies. High quality software is required and its industry is influenced by economic circumstances. In Japan, there are also problems regarding cost reductions, production of high quality software, adapting businesses, and so on. We have made efforts to solve these problems by collaborating with people in both industry and academia. Our efforts include developing test methodologies, skill standards, education syllabi, and so on.
ER  - 

TY  - CONF
TI  - Gamification of Software Testing
T2  - 2017 IEEE/ACM 12th International Workshop on Automation of Software Testing (AST)
SP  - 2
EP  - 7
AU  - G. Fraser
PY  - 2017
DO  - 10.1109/AST.2017.20
JO  - 2017 IEEE/ACM 12th International Workshop on Automation of Software Testing (AST)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2017 IEEE/ACM 12th International Workshop on Automation of Software Testing (AST)
Y1  - 20-21 May 2017
AB  - Writing good software tests is difficult, not every software developer's favorite occupation, and not a prominent aspect in programming education. However, human involvement in testing is unavoidable: What makes a test good is often down to intuition; what makes a test useful depends on an understanding of the program context; what makes a test find bugs depends on understanding the intended program behaviour. Because the consequences of insufficient testing can be dire, this paper explores a new angle to address the testing problem: Gamification is the approach of converting potentially tedious or boring tasks to components of entertaining gameplay, where the competitive nature of humans motivates them to compete and excel. By applying gamification concepts to software testing, there is potential to fundamentally change software testing in several ways: First, gamification can help to overcome deficiencies in education, where testing is a highly neglected topic. Second, gamification engages practitioners in testing tasks they would otherwise neglect, and gets them to use advanced testing tools and techniques they would otherwise not consider. Finally, gamification makes it possible to crowdsource complex testing tasks through games with a purpose. Collectively, these applications of gamification have the potential to substantially improve software testing practice, and thus software quality.
ER  - 

TY  - CONF
TI  - TestEG — A computational game for teaching of software testing
T2  - 2016 35th International Conference of the Chilean Computer Science Society (SCCC)
SP  - 1
EP  - 10
AU  - B. Oliveira
AU  - P. Afonso
AU  - H. Costa
PY  - 2016
DO  - 10.1109/SCCC.2016.7836022
JO  - 2016 35th International Conference of the Chilean Computer Science Society (SCCC)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2016 35th International Conference of the Chilean Computer Science Society (SCCC)
Y1  - 10-14 Oct. 2016
AB  - Teaching-learning process in software engineering has undergone questioning. One challenge in teaching software engineering is to fulfill the need to use teaching methods that will make this process more effective. This paper presents a computational educational game for software testing - TestEG (Test Educational Game) for theoretical and practical comprehension in this area. For evaluating TestEG in this process, we evaluated using a questionnaire to verify acceptance, playability, and enjoyment. The results showed indications that TestEG meets requirements of educational software and it is an effective tool in supporting to the teaching-learning process in software testing.
ER  - 

TY  - CONF
TI  - ISTQB-based Software Testing Education: Advantages and Challenges
T2  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 389
EP  - 396
AU  - A. Szatmári
AU  - T. Gergely
AU  - Á. Beszédes
PY  - 2023
DO  - 10.1109/ICSTW58534.2023.00072
JO  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 16-20 April 2023
AB  - The International Software Testing Qualifications Board (ISTQB) is a widely-recognized organization that provides a certification scheme in the field of software testing. The knowledge this scheme sets for different levels and areas of software testing has become a standard terminology and requirement for software testers in the industry. In the first part of this paper, in a small survey, we examine the importance of certification in the industry, then we do a literature review to investigate to what extent the ISTQB material is used in university curricula. We examined job-offering portals and discovered that LinkedIn and Jobline mostly had job listings that favored the certificate, however, many jobs required the same skills and knowledge that the ISTQB Foundation Level certificate provides. Therefore, we recommend that universities include software testing in their computer science curriculum and accommodate the principles outlined by ISTQB. In the last part of the paper, we highlight the challenges of using ISTQB material in education based on our experience and show some possible solutions to overcome them. In conclusion, by providing sufficient knowledge, universities can provide an opportunity for students and companies to save time spent on post-graduate training for test-related positions.
ER  - 

TY  - CONF
TI  - Integrating Testing Throughout the CS Curriculum
T2  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 441
EP  - 444
AU  - S. Heckman
AU  - J. Y. Schmidt
AU  - J. King
PY  - 2020
DO  - 10.1109/ICSTW50294.2020.00079
JO  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 24-28 Oct. 2020
AB  - Software testing is a critical component of any software development lifecycle, but becoming an experienced software tester requires understanding many strategies for writing high-quality test cases and a significant amount of practice. Situated learning theory suggests that students should be exposed to things they would see in a professional workplace. In terms of software testing, students should be exposed to real-world software testing practices in a variety of contexts, from the simplest of programs to the very complex. The goal of this paper is to share our experience integrating software testing into our undergraduate curriculum at North Carolina State University. In this paper, we discuss how software testing is taught in our CS1 - Introductory Programming, CS2 - Software Development Fundamentals, and several other courses beyond CS2. Over the past 10 years of teaching software testing in introductory programming courses, we discuss lessons learned and highlight open concerns for future research.
ER  - 

TY  - CONF
TI  - Set the right example when teaching programming: Test Informed Learning with Examples (TILE)
T2  - 2023 IEEE Conference on Software Testing, Verification and Validation (ICST)
SP  - 269
EP  - 280
AU  - N. Doorn
AU  - T. Vos
AU  - B. Marín
AU  - E. Barendsen
PY  - 2023
DO  - 10.1109/ICST57152.2023.00033
JO  - 2023 IEEE Conference on Software Testing, Verification and Validation (ICST)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2023 IEEE Conference on Software Testing, Verification and Validation (ICST)
Y1  - 16-20 April 2023
AB  - Many educators face problems with integrating testing into programming education. For instance: existing courses are already fully packed; testing requires skills that students might not yet have; and testing is, although considered important, not always given priority by students. Educators, in general, do not have time to overhaul a programming course to fully integrate testing, resulting in a situation in which the improvement of testing education seems to have slowed down. In this paper, we propose Test Informed Learning with Examples (TILE), a new concept to create test-awareness in introductory programming courses. TILE aims to introduce testing as early as possible and in a subtle way. As a result, integration into existing curricula can be done seamlessly and requires less effort than completely overhauling existing programming courses. The contributions of this paper are: the presentation of TILE; experiences of having applied this method in the classroom; and an open repository with assignments using our approach. Applying TILE seems to be a promising approach to introduce testing in early programming. Moreover, some TILEs can be added to existing courses with almost no effort from day one. More research is needed to gain confidence in the benefits of using TILE over time and to collect evidence that we reached the final aim of TILE, i.e. students that test because that inherently belongs to programming, and not because it is explicitly asked from them.
ER  - 

TY  - CONF
TI  - Myths and Facts about a Career in Software Testing: The Perspectives of Students and Practitioners
T2  - 2023 IEEE 35th International Conference on Software Engineering Education and Training (CSEE&T)
SP  - 120
EP  - 120
AU  - R. d. S. Santos
AU  - L. F. Capretz
AU  - C. V. C. de Magalhães
AU  - R. Souza
PY  - 2023
DO  - 10.1109/CSEET58097.2023.00024
JO  - 2023 IEEE 35th International Conference on Software Engineering Education and Training (CSEE&T)
IS  - 
SN  - 2377-570X
VO  - 
VL  - 
JA  - 2023 IEEE 35th International Conference on Software Engineering Education and Training (CSEE&T)
Y1  - 7-9 Aug. 2023
AB  - Testing is an indispensable part of software development. However, a career in software testing is reported to be unpopular among technology students. This can potentially create a shortage of testers in the software industry in the future. The question is, whether the perception that undergraduate students have about software testing is accurate and whether it differs from the experience reported by those who work in testing activities in the software development industry. We obtained 63 answers from practitioners in the software industry, and previous surveys analyzed the perceptions of 648 students from software engineering. This investigation demonstrates that a career in software testing is more exciting and rewarding, as reported by professionals working in the field, than students may believe. Therefore, in order to guarantee a workforce focused on software quality, the academy and the software industry need to work together to better inform students about software testing and its essential role in software development. In particular, courses in testing automation are expected to increase the popularity of the area among students.
ER  - 

TY  - CONF
TI  - SBST in the Age of Machine Learning Systems - Challenges Ahead
T2  - 2019 IEEE/ACM 12th International Workshop on Search-Based Software Testing (SBST)
SP  - 2
EP  - 2
AU  - S. Yoo
PY  - 2019
DO  - 10.1109/SBST.2019.000-2
JO  - 2019 IEEE/ACM 12th International Workshop on Search-Based Software Testing (SBST)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2019 IEEE/ACM 12th International Workshop on Search-Based Software Testing (SBST)
Y1  - 26-27 May 2019
AB  - Machine Learning, and especially Deep Neural Network (DNN), is being rapidly adopted by various software systems, including applications in safety-critical systems such as autonomous driving and medical imaging. This calls for an urgent need to test these AI/ML techniques as part of larger systems. However, this task can be very different from testing of traditional software systems. We will briefly examine the fundamentals of software testing as well as the state of the art in Search Based Software Testing (SBST), and try to outline the challenges ahead while highlighting areas where SBST can shine.
ER  - 

TY  - CONF
TI  - An experimental evaluation of peer testing in the context of the teaching of software testing
T2  - 2017 International Symposium on Computers in Education (SIIE)
SP  - 1
EP  - 6
AU  - J. R. Barbosa
AU  - P. Valle
AU  - J. Maldonado
AU  - M. Delamaro
AU  - A. M. R. Vincenzi
PY  - 2017
DO  - 10.1109/SIIE.2017.8259643
JO  - 2017 International Symposium on Computers in Education (SIIE)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2017 International Symposium on Computers in Education (SIIE)
Y1  - 9-11 Nov. 2017
AB  - Context: Software testing is an important task in software product quality assurance. Alternatives approach for teaching and training students and professionals have been addressed in many studies, recently. In this article, peer testing is investigated as one alternative approach to mitigate the current lack of well-trained professionals. Objective: To verify the efficiency and efficacy of peer testing in order to create test cases to promote software testing education and training. Method: Conduct a controlled experiment in which subjects design and implement test cases for three small software units. Results and conclusions: In this study, it has been observed that peer testing was significantly more efficient than individual testing (with t-Test). On the other hand, it has not been observed significant differences in the efficacy of peer testing.
ER  - 

TY  - CONF
TI  - Similarities of Testing Programmed and Learnt Software
T2  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 78
EP  - 81
AU  - F. Dobslaw
AU  - R. Feldt
PY  - 2023
DO  - 10.1109/ICSTW58534.2023.00025
JO  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 16-20 April 2023
AB  - This study examines to what extent the testing of traditional software components and machine learning (ML) models fundamentally differs or not. While some researchers argue that ML software requires new concepts and perspectives for testing, our analysis highlights that, at a fundamental level, the specification and testing of a software component are not dependent on the development process used or on implementation details. Although the software engineering/computer science (SE/CS) and Data Science/ML (DS/ML) communities have developed different expectations, unique perspectives, and varying testing methods, they share clear commonalities that can be leveraged. We argue that both areas can learn from each other, and a non-dual perspective could provide novel insights not only for testing ML but also for testing traditional software. Therefore, we call upon researchers from both communities to collaborate more closely and develop testing methods and tools that can address both traditional and ML software components. While acknowledging their differences has merits, we believe there is great potential in working on unified methods and tools that can address both types of software.
ER  - 

TY  - CONF
TI  - Enhancing Software Testing with Machine Learning Techniques
T2  - 2023 International Conference on Sustainable Computing and Data Communication Systems (ICSCDS)
SP  - 329
EP  - 333
AU  - V. Akila
AU  - A. Vasuki
AU  - J. A. Christaline
AU  - R. Sathiya
AU  - P. Rishi
AU  - A. S. Edward
PY  - 2023
DO  - 10.1109/ICSCDS56580.2023.10105028
JO  - 2023 International Conference on Sustainable Computing and Data Communication Systems (ICSCDS)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2023 International Conference on Sustainable Computing and Data Communication Systems (ICSCDS)
Y1  - 23-25 March 2023
AB  - Software testing is a crucial component of software development that helps ensure the quality and reliability of a software system. By performing tests, developers can identify potential bugs and malfunctions and correct them before the final product is released to the market. The use of machine learning algorithms in software testing not only improves efficiency and accuracy but also helps reduce manual testing efforts. The algorithms analyze patterns and use statistical methods to identify areas that need to be tested. This results in a more comprehensive and thorough testing process, making it possible to deliver high-quality software systems to customers.
ER  - 

TY  - CONF
TI  - Using Search-Based Software Testing to Guide the Strive for Robust Machine Learning Components: Lessons Learned Across Systems and Simulators in the Mobility Domain
T2  - 2022 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 1
EP  - 1
AU  - M. Borg
PY  - 2022
DO  - 10.1109/ICSTW55395.2022.00014
JO  - 2022 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2022 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 4-13 April 2022
AB  - This talk shares lessons learned from using search-based techniques for robustness testing in simulators.
ER  - 

TY  - CONF
TI  - Research on The Key Technologies of Mobile Platform Development of Network Ideological and Political Education Innovation Based on E-class
T2  - 2021 6th International Conference on Smart Grid and Electrical Automation (ICSGEA)
SP  - 431
EP  - 434
AU  - J. WU
PY  - 2021
DO  - 10.1109/ICSGEA53208.2021.00104
JO  - 2021 6th International Conference on Smart Grid and Electrical Automation (ICSGEA)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 6th International Conference on Smart Grid and Electrical Automation (ICSGEA)
Y1  - 29-30 May 2021
AB  - To meet the functional requirements of college students' network ideological and political education informatization, this paper puts forward the overall model of mobile innovation platform of Ideological and political education based on the mobile client of E-class, and Android environment. According to the requirement analysis of the system, we provide the overall design and architecture of the platform. Then, with web development and mobile communication technology as the core, the detailed design and implementation of each functional module are described combined with the user authentication data interface provided by E-class open platform. Finally, JSP script is used to complete the development of app, and the test and analysis are performed in the actual work. The results show that the system runs stably and performs well. It not only opens up the interface between E-class users and ideological and political education teaching, but also provides friendly experience for students.
ER  - 

TY  - CONF
TI  - The Design and Implementation of National Traditional Sports Professional Teaching Resources Platform Based on MVC
T2  - 2016 International Conference on Intelligent Transportation, Big Data & Smart City (ICITBS)
SP  - 277
EP  - 280
AU  - J. Yue
AU  - Y. Ye
AU  - Z. Wei
AU  - Z. Li
PY  - 2016
DO  - 10.1109/ICITBS.2016.111
JO  - 2016 International Conference on Intelligent Transportation, Big Data & Smart City (ICITBS)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2016 International Conference on Intelligent Transportation, Big Data & Smart City (ICITBS)
Y1  - 17-18 Dec. 2016
AB  - China's traditional sports has a long history, profound content, is the main content of college martial arts and national traditional sports professional teaching. Along with the arrival of the era of network information, martial arts and traditional ethnic sports teaching also break through the limitations of previous "words and deeds", and computer information technology combined martial arts and folk traditional sports professional teaching resources platform is constructed, the realization of the sharing of teaching resources. The key to the construction of Wushu and national traditional sports professional teaching resources platform is the integration of teaching resources. Analysis of resource integration scheme of Wushu and national traditional sports professional teaching resources platform, to meet the learners' demand for resources, spread across time and space assisted autonomous learning and teaching resources and inheritance for the purpose, adhere to the integration system to construct teaching resources as the core, establishment of teaching resources integration and coordination center, the establishment of teaching resources integration evaluation system as the guiding ideology, grasp of human nature, scientific and accurate, systematic principle, for school policies, human resources, material resources guarantee, guarantee resources integration of Wushu and national traditional sports professional teaching resources platform implementation, based on this, this paper focuses on the implementation process of MVC mode of the national traditional sports professional teaching resources based on the platform.
ER  - 

TY  - CONF
TI  - Teaching development for SMART devices with focus on future key skills
T2  - 2019 IEEE 17th World Symposium on Applied Machine Intelligence and Informatics (SAMI)
SP  - 171
EP  - 174
AU  - V. Gašpar
PY  - 2019
DO  - 10.1109/SAMI.2019.8782752
JO  - 2019 IEEE 17th World Symposium on Applied Machine Intelligence and Informatics (SAMI)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2019 IEEE 17th World Symposium on Applied Machine Intelligence and Informatics (SAMI)
Y1  - 24-26 Jan. 2019
AB  - This paper presents teaching use-cases that are currently required by the majority of employers that focus on design and development of software solutions, which make use of SMART devices in any form. The use-cases were selected from topics and ideas that cooperating companies considered promising for their business in the future and were later used as diploma or bachelor's theses' topics. Later, we extracted basic knowledge and skills requirements in specific fields like soft skills, project skills, software development skills, quality assurance skills, business skills, data management skills and designed two new subjects (classes) that covered the knowledge. Our evaluation over two years, during which the classes were taught, shows better capabilities of students to adapt to company standards and require less additional education from the employer's side. We also present the progress and results of a student project that attended both new classes.
ER  - 

TY  - CONF
TI  - Transferring Software Testing Tools to Practice
T2  - 2017 IEEE/ACM 12th International Workshop on Automation of Software Testing (AST)
SP  - 8
EP  - 8
AU  - T. Xie
PY  - 2017
DO  - 10.1109/AST.2017.10
JO  - 2017 IEEE/ACM 12th International Workshop on Automation of Software Testing (AST)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2017 IEEE/ACM 12th International Workshop on Automation of Software Testing (AST)
Y1  - 20-21 May 2017
AB  - Achieving successful technology adoption in practice has often been an important goal for both academic and industrial researchers. However, it is generally challenging to transfer research results into industrial products or into tools that are widely adopted. What are the key factors that lead to practical impact for a research project? This talk presents experiences and lessons learned in successfully transferring tools from two testing projects as collaborative efforts between the academia and industry. In the Pex project (research.microsoft.com/pex) [3], nearly a decade's collaborative efforts between Microsoft Research and academia have led to high-impact tools that are now shipped by Microsoft and adopted by the community. These tools include Fakes [2], a test isolation framework shipped with Visual Studio 2012/2013, IntelliTest, an automatic test generation tool shipped with Visual Studio 2015, and Code Hunt (www.codehunt.com) [1] (evolved from Pex4Fun [4]), a popular serious gaming platform for coding contests and practicing programming skills, which has attracted 350,000+ players from May 2014 to August 2016, and has been adopted in large-scale Microsoft Imagine Cup and Beauty of Programming contests. In the WeChat testing project, recent collaborative efforts [5], [6] between Tencent and academia have developed effective techniques for testing Android apps, by improving Google's Monkey, a popularly used Android testing tool in industry. The developed techniques have been applied to test WeChat, one of world's most popular messenger apps with over 800 million monthly active users.
ER  - 

TY  - CONF
TI  - IV&V Software Testing as a Measure of Digital and Entrepreneurship Competence towards Quality Education of Skills for Future Work
T2  - 2020 IEEE Conference on Open Systems (ICOS)
SP  - 13
EP  - 18
AU  - A. Sivaji
AU  - S. H. Hashim
AU  - A. D. N. Kuppusamy
AU  - A. F. Isahak
AU  - A. Deniel
AU  - N. K. Chuan
AU  - N. Sazali
AU  - N. D. Joha
AU  - S. Parahakaran
PY  - 2020
DO  - 10.1109/ICOS50156.2020.9293688
JO  - 2020 IEEE Conference on Open Systems (ICOS)
IS  - 
SN  - 2473-3660
VO  - 
VL  - 
JA  - 2020 IEEE Conference on Open Systems (ICOS)
Y1  - 17-19 Nov. 2020
AB  - For the Sustainable Development Goal measure of Quality Education, the 2019 Global Education Monitoring Report by UNESCO highlighted that there are a limited set of measures to monitor digital literacy skills as compared to financial literacy skills. Furthermore, the United Nation's International Telecommunication Union report shows that across countries, digital skills such as programming skills remains unpopular. Understanding this challenge, the researchers from MIMOS Berhad, Malaysia propose that Independent Verification & Validation (IV&V) Software Testing skill be measured by UNESCO as it is a natural progression in terms of skills enhancements towards programming skills. In partnership with the Ministry of Entrepreneur Development, MIMOS Berhad designed a practical oriented fundamental IV&V Software Testing syllabus for Malaysian working in Small and Medium Enterprise and conducted a training. As a measure of digital literacy skills, a statistically significant improvement from 48.26% to 73.43% average score in IV&V Software Testing skills was observed. By employing a Wilcoxon Matched Pairs Signed-Rank Test, results revealed that the null hypothesis of “no statistically significant differences between SME worker's digital knowledge level in terms of IV&V Software Testing examination score” can be rejected , Z= -5.449, p <; 0.05. Moving forward, an intermediate and advanced level course in software automation testing may be conducted.
ER  - 

TY  - CONF
TI  - Industry-academia collaboration in software testing: An overview of TAIC PART 2015
T2  - 2015 IEEE Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 1
EP  - 2
AU  - N. Alshahwan
AU  - M. Felderer
AU  - R. Ramler
PY  - 2015
DO  - 10.1109/ICSTW.2015.7107463
JO  - 2015 IEEE Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2015 IEEE Eighth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 13-17 April 2015
AB  - Collaboration between industry and academia in software testing leads to improvement and innovation in industry and it is the basis for achieving sustainable and empirically evaluated results. Thus, the aim of TAIC PART is to forge collaboration between industry and academia on the challenging and exciting problem of real-world software testing. The workshop is promoted by representatives of both industry and academia, bringing together industrial software engineers and testers with researchers working on theory and practice of software testing. This paper presents an overview of the 10th Testing: Academic and Industrial Conference - Practice and Research Techniques (TAIC PART 2015) and its contributions.
ER  - 

TY  - CONF
TI  - Education Reform of Software Engineering in the Age of A.I: Keynote Address
T2  - 2023 IEEE/ACIS 23rd International Conference on Computer and Information Science (ICIS)
SP  - 2
EP  - 2
AU  - Z. Chen
PY  - 2023
DO  - 10.1109/ICIS57766.2023.10210230
JO  - 2023 IEEE/ACIS 23rd International Conference on Computer and Information Science (ICIS)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2023 IEEE/ACIS 23rd International Conference on Computer and Information Science (ICIS)
Y1  - 23-25 June 2023
AB  - In the age of artificial intelligence (A.I.), software engineering is facing unprecedented changes. Software developers need to have a deep understanding of, especially large model technologies, since the traditional software development model cannot meet the new needs. Moreover, software engineering also needs to pay more attention to the value of data. The data-driven software development models are growing, and data analysis and machine learning technologies have also been widely used. Software development requires higher efficiency, quality, and flexibility. New methods such as agile development and DevOps have emerged. Software testing also needs to be more intelligent, and test automation has become an essential part in software engineering. This speech focuses on sharing the opportunities and challenges brought by GPT and other big models to software development and testing. It also looks forward to the changes brought by A.I. to software engineering education and how we coped. The reform of software engineering is an inevitable trend, and software developers need to constantly learn new technologies and master new methods in the age of A.I.
ER  - 

TY  - CONF
TI  - Research and Implementation of Curriculum Cluster Modern Teaching Model Based on Multi-objective Optimization Algorithm
T2  - 2022 International Conference on Education, Network and Information Technology (ICENIT)
SP  - 5
EP  - 11
AU  - R. Ding
AU  - R. Ma
AU  - J. Liao
AU  - L. Tong
AU  - Y. Xin
AU  - T. Huo
PY  - 2022
DO  - 10.1109/ICENIT57306.2022.00010
JO  - 2022 International Conference on Education, Network and Information Technology (ICENIT)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2022 International Conference on Education, Network and Information Technology (ICENIT)
Y1  - 2-3 Sept. 2022
AB  - Under the background of engineering education certification, cultivating students&#x0027; innovation, competition and employment competitiveness have become the key to teaching. Based on the idea of multi-objective optimization and modern educational technology, this paper suggests the Zongheng group teaching model of curriculum cluster, which runs software projects through multiple courses to achieve a satisfactory teaching effect that the level of students&#x0027; academic knowledge is balanced, multiple course resources are integrated, and a knowledge system is formed, and reaching the multi-objective goal of cultivating students&#x0027; innovation, competition, and employment competitiveness. To test the effectiveness of multi-objective optimization of information-based teaching model, we also use software engineering major of the College of Computer and Information Technology of Mudanjiang Normal University as an example to carry out teaching practice. In a sense, this research provides a reference for follow-up research of curriculum reform and teaching construction of new engineering.
ER  - 

TY  - CONF
TI  - ChatGPT and Software Testing Education: Promises & Perils
T2  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 4130
EP  - 4137
AU  - S. Jalil
AU  - S. Rafi
AU  - T. D. LaToza
AU  - K. Moran
AU  - W. Lam
PY  - 2023
DO  - 10.1109/ICSTW58534.2023.00078
JO  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 16-20 April 2023
AB  - Over the past decade, predictive language modeling for code has proven to be a valuable tool for enabling new forms of automation for developers. More recently, we have seen the ad-vent of general purpose "large language models", based on neural transformer architectures, that have been trained on massive datasets of human written text, which includes code and natural language. However, despite the demonstrated representational power of such models, interacting with them has historically been constrained to specific task settings, limiting their general applicability. Many of these limitations were recently overcome with the introduction of ChatGPT, a language model created by OpenAI and trained to operate as a conversational agent, enabling it to answer questions and respond to a wide variety of commands from end users.The introduction of models, such as ChatGPT, has already spurred fervent discussion from educators, ranging from fear that students could use these AI tools to circumvent learning, to excitement about the new types of learning opportunities that they might unlock. However, given the nascent nature of these tools, we currently lack fundamental knowledge related to how well they perform in different educational settings, and the potential promise (or danger) that they might pose to traditional forms of instruction. As such, in this paper, we examine how well ChatGPT performs when tasked with answering common questions in a popular software testing curriculum. We found that given its current capabilities, ChatGPT is able to respond to 77.5% of the questions we examined and that, of these questions, it is able to provide correct or partially correct answers in 55.6% of cases, provide correct or partially correct explanations of answers in 53.0% of cases, and that prompting the tool in a shared question context leads to a marginally higher rate of correct answers and explanations. Based on these findings, we discuss the potential promises and perils related to the use of ChatGPT by students and instructors.
ER  - 

TY  - CONF
TI  - Deploying Integrated Environment for Software Testing Tools
T2  - 2015 12th International Conference on Information Technology - New Generations
SP  - 777
EP  - 779
AU  - B. L. Romano
AU  - R. B. d. Souza
AU  - A. M. d. Cunha
PY  - 2015
DO  - 10.1109/ITNG.2015.140
JO  - 2015 12th International Conference on Information Technology - New Generations
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2015 12th International Conference on Information Technology - New Generations
Y1  - 13-15 April 2015
AB  - This paper aims to present the deployment of an integrated environment for software testing tools to increase businesses productivity in software development. It proposes an integrated environment to assist software-testing executions within projects on enterprises having difficulties in assigning testing activities.
ER  - 

TY  - CONF
TI  - Reflection Through Two Lenses: Experiences of Teaching and Taking Undergraduate Software Engineering and Testing Courses
T2  - 2022 IEEE/ACM 4th International Workshop on Software Engineering Education for the Next Generation (SEENG)
SP  - 36
EP  - 42
AU  - B. Whitebread
AU  - K. Gromova
AU  - H. Schafer
AU  - A. Ranjan
AU  - I. Hussain
PY  - 2022
DO  - 10.1145/3528231.3528354
JO  - 2022 IEEE/ACM 4th International Workshop on Software Engineering Education for the Next Generation (SEENG)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2022 IEEE/ACM 4th International Workshop on Software Engineering Education for the Next Generation (SEENG)
Y1  - 17-17 May 2022
AB  - Undergraduate software engineering courses in higher education institutions usually cover many aspects of software development including software testing. In this experience paper, we collectively discuss our learning through realizations and reflections from both instructor's and students' perspectives of teaching and taking two separate courses in parallel, namely software engineering and soft-ware testing. Both courses had a mix of Millennial and Gen Z, junior-to-senior-level computer science students. The paper con-tributes by sharing the courses' design, its motivation behind the different pedagogical methodologies, tools and techniques used, and its recommendations in teaching similar courses to such a co-hort of students in the future for improved learning experience and outcome.
ER  - 

TY  - CONF
TI  - A Cost-Sensitive Approach to Enhance the use of ML Classifiers in Software Testing Efforts
T2  - 2019 18th IEEE International Conference On Machine Learning And Applications (ICMLA)
SP  - 1806
EP  - 1813
AU  - A. Moreira Nascimento
AU  - L. F. Vismari
AU  - P. S. Cugnasca
AU  - J. B. Camargo Júnior
AU  - J. Rady de Almeira Júnior
PY  - 2019
DO  - 10.1109/ICMLA.2019.00292
JO  - 2019 18th IEEE International Conference On Machine Learning And Applications (ICMLA)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2019 18th IEEE International Conference On Machine Learning And Applications (ICMLA)
Y1  - 16-19 Dec. 2019
AB  - The use of Machine Learning (ML) classifiers to predict defective software modules are useful to help on planning software testing activities. Most of those studies use the accuracy as the main metric to evaluate the quality of the ML classifier. However, when unbalanced datasets are used to train and test the classifier, the ML model becomes biased. Biased ML models hide their real accuracy. In this context, this study proposes an approach to enhance the use of ML classifiers for predicting defective software modules even with unbalanced datasets. The results indicate: (1) a significant reduction on the number of false negatives; (2) a considerable gain on the efficacy of the software testing; (3) an increase of the number of modules correctly indicated as defective; however, there were also (4) an increase of the scope of the test suggested by the model; (5) a reduction of the software testing efficiency; (6) an increase of the number of the false positives; and (7) reduction of the overall accuracy. Therefore, the proposed approach imposes a trade-off to be considered when planning the software testing activities. Finally, this study also proposes an approach to help managers to deal with those trade-offs considering the resource constraints.
ER  - 

TY  - CONF
TI  - Artificial Intelligence For Software Testing-Perspectives And Practices
T2  - 2021 Fourth International Conference on Computational Intelligence and Communication Technologies (CCICT)
SP  - 377
EP  - 382
AU  - N. Jha
AU  - R. Popli
PY  - 2021
DO  - 10.1109/CCICT53244.2021.00075
JO  - 2021 Fourth International Conference on Computational Intelligence and Communication Technologies (CCICT)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 Fourth International Conference on Computational Intelligence and Communication Technologies (CCICT)
Y1  - 3-3 July 2021
AB  - Artificial Intelligence (AI) has emerged as a buzzword for current software applications. The modern advancements in the Information Technology sector have invigorated the need to incorporate AI competencies into software services. This objective has constrained the organizations to revisit their software development processes. Software testing plays a vital role in validating the software quality. Both the AI and software testing researchers and Practitioners must lead the innovations to address their integrating challenges. AI and Machine Learning (ML) have the potential to advance the capabilities to test the software intensely. The objective of the paper is to review the state-of-the-art of applying AI in software testing briefly. It also discusses the software testing activities mapped to AI and the related challenges.
ER  - 

TY  - CONF
TI  - Perceptions about Software Testing among UAE Software Students
T2  - 2021 IEEE/ACM 13th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE)
SP  - 119
EP  - 120
AU  - L. F. Capretz
AU  - A. B. Nassif
AU  - S. Harous
PY  - 2021
DO  - 10.1109/CHASE52884.2021.00024
JO  - 2021 IEEE/ACM 13th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE)
IS  - 
SN  - 2574-1837
VO  - 
VL  - 
JA  - 2021 IEEE/ACM 13th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE)
Y1  - 20-21 May 2021
AB  - Software testing is one of the crucial supporting processes of software life cycle. Unfortunately for the software industry, the role is stigmatized, partly due to misperception and partly due to the treatment of the testing role within the software industry. The present study aims to analyse this situation to explore what might inhibit an individual from taking up a software testing career. In order to investigate this issue, we surveyed 132 senior students pursuing a degree in computer science and information and communication technology (ICT) related areas at three universities in the United Arab Emirates: UAE University in Al Ain, Sharjah University in Sharjah and New York University in Abu Dhabi. The students were asked to describe the PROs and CONs of taking up a career in software testing, and to describe the likelihood that they would take up the career themselves. The study identified 7 main PROs and 9 main CONs for pursuing a testing career, and indicated that the role of software tester is perceived as a social role, which may require as many soft skills as technical knowledge. The results also show that the UAE students have a stronger negative attitude towards software testing than do their counterparts where similar investigations have been carried out in different countries in the past three years.
ER  - 

TY  - CONF
TI  - FOREPOST: A Tool for Detecting Performance Problems with Feedback-Driven Learning Software Testing
T2  - 2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C)
SP  - 593
EP  - 596
AU  - Q. Luo
AU  - D. Poshyvanyk
AU  - A. Nair
AU  - M. Grechanik
PY  - 2016
DO  - 
JO  - 2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C)
Y1  - 14-22 May 2016
AB  - A goal of performance testing is to find situations when applications unexpectedly exhibit worsened characteristics for certain combinations of input values. A fundamental question of performance testing is how to select a manageable subset of the input data faster to find performance problems in applications automatically. We present a novel tool, FOREPOST, for finding performance problems in applications automatically using black-box software testing. In this paper, we demonstrate how FOREPOST extracts rules from execution traces of applications by using machine learning algorithms, and then uses these rules to select test input data automatically to steer applications towards computationally intensive paths and to find performance problems. FOREPOST is available in our online appendix (http://www.cs.wm.edu/semeru/data/ICSE16-FOREPOST), which contains the tool, source code and demo video.
ER  - 

TY  - CONF
TI  - Detecting Functional Differences using Automatic Test Generation for Automated Assessment in Programming Education
T2  - 2021 28th Asia-Pacific Software Engineering Conference (APSEC)
SP  - 526
EP  - 530
AU  - R. Izuta
AU  - S. Matsumoto
AU  - H. Igaki
AU  - S. Saiki
AU  - N. Fukuyasu
AU  - S. Kusumoto
PY  - 2021
DO  - 10.1109/APSEC53868.2021.00062
JO  - 2021 28th Asia-Pacific Software Engineering Conference (APSEC)
IS  - 
SN  - 2640-0715
VO  - 
VL  - 
JA  - 2021 28th Asia-Pacific Software Engineering Conference (APSEC)
Y1  - 6-9 Dec. 2021
AB  - Software testing is being leveraged in programming education for automated assessment of programming assignments. When using software testing in programming education, program specifications are provided as unit or integration tests, and students create programs that pass these tests. Although this method has various advantages, such as ensuring objective program specifications and automating the operation check, it also has many disadvantages. For example, detecting innovations, such as original specifications and functional extensions by an individual student, is difficult. The purpose of this research is to automatically detect functional differences among student programs in programming education using tests. In our proposed method, automatic test generation is applied to student programs, and the generated tests are mutually executed for other student programs. Furthermore, we classify the tests based on the execution path to obtain sets of tests that are capable of detecting functional differences.
ER  - 

TY  - CONF
TI  - Use of JiTT in a Graduate Software Testing Course: An Experience Report
T2  - 2018 IEEE/ACM 40th International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET)
SP  - 108
EP  - 115
AU  - A. Martinez
PY  - 2018
DO  - 
JO  - 2018 IEEE/ACM 40th International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2018 IEEE/ACM 40th International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET)
Y1  - 25 May-3 June 2018
AB  - This paper describes our experience using Just-in-Time Teaching (JiTT) in a graduate Software Testing course during two semesters. JiTT is a pedagogical strategy that bridges in-class and out-of-class components through preparatory web-based assignments, known as warm-ups. Our JiTT design was as follows. The preparatory out-of-class component consisted of a reading test, which required students to read a chapter from the textbook and then answer a web-based test available in our virtual platform. Reading tests were due the day before class in order to give the teacher enough time to read over the student's responses and adjust the next lesson accordingly. The in-class component was organized around student common misconceptions or difficulties, extracted from the reading tests submitted by the students. Discussions and cooperative learning activities were among the teaching strategies used in class. Our approach was assessed from the students' and teacher's perspective. The students' perspective was obtained from a survey. The teacher's perspective consisted in an assessment of strengths and limitations. Results from our evaluation show that a vast majority of students believe their learning improves when they prepare for class by reading the material in advance. They also think that reading tests are an effective way of verifying that students did the assigned reading. Most of them also consider that JiTT is an appropriate teaching strategy for the course. From the teacher's perspective, a major strength found was that students were more engaged in class, asking interesting questions that enriched class discussion. Also, the use of open-ended (essay-type) questions in reading tests has the additional benefit of helping them become better writers (organize their ideas better and clarify their thinking through writing)
ER  - 

TY  - CONF
TI  - Towards a Model of Testers' Cognitive Processes: Software Testing as a Problem Solving Approach
T2  - 2020 IEEE 20th International Conference on Software Quality, Reliability and Security Companion (QRS-C)
SP  - 272
EP  - 279
AU  - E. Enoiu
AU  - G. Tukseferi
AU  - R. Feldt
PY  - 2020
DO  - 10.1109/QRS-C51114.2020.00053
JO  - 2020 IEEE 20th International Conference on Software Quality, Reliability and Security Companion (QRS-C)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE 20th International Conference on Software Quality, Reliability and Security Companion (QRS-C)
Y1  - 11-14 Dec. 2020
AB  - Software testing is a complex, intellectual activity based (at least) on analysis, reasoning, decision making, abstraction and collaboration performed in a highly demanding environment. Naturally, it uses and allocates multiple cognitive resources in software testers. However, while a cognitive psychology perspective is increasingly used in the general software engineering literature, it has yet to find its place in software testing. To the best of our knowledge, no theory of software testers' cognitive processes exists. Here, we take the first step towards such a theory by presenting a cognitive model of software testing based on how problem solving is conceptualized in cognitive psychology. Our approach is to instantiate a general problem solving process for the specific problem of creating test cases. We then propose an experiment for testing our cognitive test design model. The experiment makes use of verbal protocol analysis to understand the mechanisms by which human testers choose, design, implement and evaluate test cases. An initial evaluation was then performed with five software engineering master students as subjects. The results support a problem solving-based model of test design for capturing testers' cognitive processes.
ER  - 

TY  - CONF
TI  - Metamorphic testing: A new student engagement approach for a new software testing paradigm
T2  - 2016 IEEE International Conference on Teaching, Assessment, and Learning for Engineering (TALE)
SP  - 218
EP  - 225
AU  - D. Towey
AU  - T. Y. Chen
AU  - F. -C. Kuo
AU  - H. Liu
AU  - Z. Q. Zhou
PY  - 2016
DO  - 10.1109/TALE.2016.7851797
JO  - 2016 IEEE International Conference on Teaching, Assessment, and Learning for Engineering (TALE)
IS  - 
SN  - 2470-6698
VO  - 
VL  - 
JA  - 2016 IEEE International Conference on Teaching, Assessment, and Learning for Engineering (TALE)
Y1  - 7-9 Dec. 2016
AB  - Software testing, as part of the software quality assurance processes in software engineering (SE), is seldom cited as the most engaging part of a software engineer's training. In spite of its importance, it was often a neglected area, and only recently, with the adoption of more agile methodologies, has testing come to the fore. Testers face challenges, including the need to be able to identify when software is not behaving as expected. Metamorphic Testing (MT) first appeared twenty years ago in an effort to help testers facing the oracle problem (not having a mechanism to determine correct software behavior). Although MT is simple in concept, it has demonstrated very impressive fault-finding ability, and has recently been attracting a great deal of interest. Training students and practitioners to effectively apply MT has become an important goal, but to date, no textbook or guidelines have been made readily available. This paper, written by some of the leading voices in the MT community, is a sharing of some of the experiences, reflections and insights gained through teaching MT (and other related subjects). These experiences indicate that not only is MT effective in industry and at fault-finding, it has the potential to really engage students in creative SE classroom activities.
ER  - 

TY  - CONF
TI  - Studies on the Software Testing Profession
T2  - 2019 IEEE/ACM 41st International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
SP  - 262
EP  - 263
AU  - L. F. Capretz
AU  - P. Waychal
AU  - J. Jia
AU  - D. Varona
AU  - Y. Lizama
PY  - 2019
DO  - 10.1109/ICSE-Companion.2019.00105
JO  - 2019 IEEE/ACM 41st International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
IS  - 
SN  - 2574-1934
VO  - 
VL  - 
JA  - 2019 IEEE/ACM 41st International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
Y1  - 25-31 May 2019
AB  - This paper attempts to understand motivators and de-motivators that influence the decisions of software professionals to take up and sustain software testing careers across four different countries, i.e. Canada, China, Cuba, and India. The research question can be framed as "How many software professionals across different geographies are keen to take up testing careers, and what are the reasons for their choices?" Towards that, we developed a cross-sectional but simple survey-based instrument. In this study we investigated how software testers perceived and valued what they do and their environmental settings. The study pointed out the importance of visualizing software testing activities as a set of human-dependent tasks and emphasized the need for research that examines critically individual assessments of software testers about software testing activities. This investigation can help global industry leaders to understand the impact of work-related factors on the motivation of testing professionals, as well as inform and support management and leadership in this context.
ER  - 

TY  - CONF
TI  - Teaching Test-Driven Development and Object-Oriented Design by Example
T2  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 413
EP  - 421
AU  - B. Wei
PY  - 2023
DO  - 10.1109/ICSTW58534.2023.00075
JO  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 16-20 April 2023
AB  - Test-driven development is an effective industrial practice. As educators of future software engineers, we need to effectively teach students test-driven development. Unfortunately, this topic is usually taught in a theoretical way. Students hardly use this approach in their projects. In this paper, we present a simple software development workflow that seamlessly integrates requirements refinement, object-oriented design, and test-driven development. A step-by-step live-coding demonstration which resembles test-driven development tasks students will face in the industry is also provided. By adopting the workflow and exemplary project in a programming class, we hope this provides students with some hands-on experience, thus helping develop good habit of programming.
ER  - 

TY  - CONF
TI  - Towards a Gamified Tool to Improve Unit Test Teaching
T2  - 2019 XIV Latin American Conference on Learning Technologies (LACLO)
SP  - 12
EP  - 19
AU  - M. Marabesi
AU  - I. Frango Silveira
PY  - 2019
DO  - 10.1109/LACLO49268.2019.00013
JO  - 2019 XIV Latin American Conference on Learning Technologies (LACLO)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2019 XIV Latin American Conference on Learning Technologies (LACLO)
Y1  - 30 Oct.-1 Nov. 2019
AB  - Due the constant evolution of software development and its growing complexity, more is being required from professionals to master different phases of the software development process, which includes the testing phase. This has an impact on the training of new professionals, since the undergraduate curricula is supposed to address this complexity. In this sense, software testing has its place in undergraduate CS-related courses, still the literature points out that the needed attention and importance is not given by the students and even by academic curricula. One of the possible causes that can be mentioned is the way of offering this content, which is usually part of a Software Engineering introductory course, perceived by students as something tedious and not important for their career. Thinking about this scenario, this paper describes the design and implementation of Testable.
ER  - 

TY  - CONF
TI  - Clustering The Quality Level of Lecturer Teaching Using The K-Means Method
T2  - 2021 9th International Conference on Cyber and IT Service Management (CITSM)
SP  - 1
EP  - 5
AU  - F. A. Harahap
AU  - M. Sovina
AU  - A. Saleh
PY  - 2021
DO  - 10.1109/CITSM52892.2021.9588948
JO  - 2021 9th International Conference on Cyber and IT Service Management (CITSM)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 9th International Conference on Cyber and IT Service Management (CITSM)
Y1  - 22-23 Sept. 2021
AB  - Universities require faculty who have the quality in the process of learning (PBM). Therefore, it is necessary to level the quality of teaching faculty grouping which aims to assist the academic authorities in determining the quality of teaching faculty decision. Material treated in this study were 104 faculty assessment in the form of questionnaires in the academic year 2018/2019 are sourced from the student and processed using the k-means and then implemented using rapid miner software. The results of testing the accuracy of clustering quality of faculty performance against this method is 100%. The results can be concluded from this study is very precise k-means is used to classify the level of quality of teaching faculty.
ER  - 

TY  - CONF
TI  - Automated GUI-based Software-Testing Using Deep Neuroevolution
T2  - 2022 IEEE Conference on Software Testing, Verification and Validation (ICST)
SP  - 477
EP  - 479
AU  - D. Zimmermann
PY  - 2022
DO  - 10.1109/ICST53961.2022.00060
JO  - 2022 IEEE Conference on Software Testing, Verification and Validation (ICST)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2022 IEEE Conference on Software Testing, Verification and Validation (ICST)
Y1  - 4-14 April 2022
AB  - Testing software applications is an important part of the development process. It improves the quality by reducing possible misbehavior. A common testing method is manual testing, which involves human interaction with the graphical user interface (GUI). Here, testers use their experience and intuition to uncover possible errors, but this is very time-consuming and expensive. In contrast, when using test scripts, a large part of the application under test (AUT) can be examined in a short time by running a high number of test cases, but hidden errors often remain undetected. In addition, such approaches are inflexible in their execution, have a high maintenance effort with a new release, and require a very good system understanding and programming knowledge to create the tests.
ER  - 

TY  - CONF
TI  - Development of a teaching plan to support learning activities of exploratory test design and execution
T2  - 2022 IEEE Frontiers in Education Conference (FIE)
SP  - 1
EP  - 9
AU  - I. E. Ferreira Costa
AU  - S. Ronaldo Bezerra Oliveira
PY  - 2022
DO  - 10.1109/FIE56618.2022.9962486
JO  - 2022 IEEE Frontiers in Education Conference (FIE)
IS  - 
SN  - 2377-634X
VO  - 
VL  - 
JA  - 2022 IEEE Frontiers in Education Conference (FIE)
Y1  - 8-11 Oct. 2022
AB  - This Research Full Paper presents that nowadays it can see the growing evolution of the software development process, making agile methodologies commonly used. In this context, exploratory testing stands out as an alternative used in the industry to meet the needs of agile and / or short-term testing processes. However, professionals use this agile testing approach in an unstructured way, and this may be because they don't really understand how to apply it strategically where they can involve design and execution activities. In this context, this paper aims to present an approach that allows to apply the teaching of design and execution activities of exploratory test following structured procedures and aligned to the curricula (Brazilian and international) of the software engineering together with relevant practices in the industry. This study originates from a literature review, where important gaps are perceived to address exploratory testing education regarding design and execution activities. This involves the need to map the assets present in the curricula of the Brazilian Computer Society (SBC) and the Association for Machinery and Institute of Electrical and Electronics Engineer (ACM / IEEE), as well as being guided by the practices prescribed in the TMMi, by have a process area dedicated to these activities. In addition, we highlight the importance of having conducted interviews with professionals to identify tools, techniques and work products commonly used in the industry so that all this supports the alignment between academic and industrial context. In this way, it was possible to develop a consistent program of studies that allowed the construction of a teaching plan involving active pedagogical practices so that students can "learn by doing" in a more interactive way, that is, provide a student-centered teaching and learning in order to make such an approach more beneficial to the student, conditioning them to obtain the competences and abilities expected in the industry.
ER  - 

TY  - CONF
TI  - Scoring Mechanism of Defect Report Based on Text Similarity
T2  - 2019 10th International Conference on Information Technology in Medicine and Education (ITME)
SP  - 182
EP  - 185
AU  - M. Zhu
AU  - J. Sun
AU  - X. Li
AU  - L. Xiao
PY  - 2019
DO  - 10.1109/ITME.2019.00050
JO  - 2019 10th International Conference on Information Technology in Medicine and Education (ITME)
IS  - 
SN  - 2474-3828
VO  - 
VL  - 
JA  - 2019 10th International Conference on Information Technology in Medicine and Education (ITME)
Y1  - 23-25 Aug. 2019
AB  - With the rapid development of the software industry in recent years, the demand for software testing talents in the society is also growing. Therefore, more and more colleges and universities set up "software testing technology" courses in related majors. Finding defects is a basic skill of software testing technology training. Some defects are difficult to find and some defects are easy to find. How to give reasonable evaluation according to the difficulty and quantity of defects in the defect report submitted by students often requires much of teacher's time and effort. This paper proposes a defect repetitive detection method based on the combination of TF-IDF and cosine similarity and proposes a defect report scoring mechanism based on the difficulty level and number of defects found by students. Comparing the manually scores of the defect reports by the teachers, the scoring mechanism is reasonable and effective, and greatly improves the work efficiency of the teachers.
ER  - 

TY  - CONF
TI  - Hey Teachers, Teach Those Kids Some Software Testing
T2  - 2023 IEEE/ACM 5th International Workshop on Software Engineering Education for the Next Generation (SEENG)
SP  - 9
EP  - 16
AU  - B. Ardic
AU  - A. Zaidman
PY  - 2023
DO  - 10.1109/SEENG59157.2023.00007
JO  - 2023 IEEE/ACM 5th International Workshop on Software Engineering Education for the Next Generation (SEENG)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2023 IEEE/ACM 5th International Workshop on Software Engineering Education for the Next Generation (SEENG)
Y1  - 16-16 May 2023
AB  - Software testing is generally acknowledged to be an important weapon in the arsenal of software engineers to produce correct and reliable software systems. However, given the importance of the topic, little is known about where software engineers get their testing knowledge and skills from. Is this through (higher) education, training programmes in the industry, or rather is it self-taught? In this paper, we investigate the curricula of 100 highly ranked universities and survey 51 software engineers to shed light on the state-of-the-practice in software testing education, in terms of both academic education and education of software engineers in the industry.
ER  - 

TY  - CONF
TI  - Enhancing the Student Learning Experience by Adopting TDD and BDD in Course Projects
T2  - 2021 IEEE Global Engineering Education Conference (EDUCON)
SP  - 1116
EP  - 1125
AU  - F. G. Rocha
AU  - L. S. Souza
AU  - T. S. Silva
AU  - G. Rodríguez
PY  - 2021
DO  - 10.1109/EDUCON46332.2021.9453916
JO  - 2021 IEEE Global Engineering Education Conference (EDUCON)
IS  - 
SN  - 2165-9567
VO  - 
VL  - 
JA  - 2021 IEEE Global Engineering Education Conference (EDUCON)
Y1  - 21-23 April 2021
AB  - A demonstration of the application and contribution of Test-Driven Development (TDD) and Behavior-Driven Development (BDD) in the student learning experience in the context of a Software Engineering course. Background: Software testing is an activity for ensuring software quality. Although teaching testing rigorously to students is a priority in academia, undergraduate students often encounter difficulties performing testing tasks effectively. Intended Outcomes: To increase satisfaction rate and course grades, and reduce delivery time. Application Design: We experimented with the Software Engineering Laboratory (LES) course of a Private University in the Bachelor of Computer Science and Information Systems courses. This experiment corroborated the learning difficulties of students. Collected data were assessed both quantitatively and qualitatively. Findings: Backed up with statistical tests, the results showed a reduction in student absences, higher student satisfaction rate, and higher grades in the courses. Furthermore, our approach allowed students to deliver a product in a short period, representing a possibility of adoption of BDD due to their successful learning experience. Finally, we aim to foster a discussion of appropriate teaching methods of software testing.
ER  - 

TY  - CONF
TI  - Automating Root Cause Analysis via Machine Learning in Agile Software Testing Environments
T2  - 2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST)
SP  - 379
EP  - 390
AU  - J. Kahles
AU  - J. Törrönen
AU  - T. Huuhtanen
AU  - A. Jung
PY  - 2019
DO  - 10.1109/ICST.2019.00047
JO  - 2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST)
Y1  - 22-27 April 2019
AB  - We apply machine learning to automate the root cause analysis in agile software testing environments. In particular, we extract relevant features from raw log data after interviewing testing engineers (human experts). Initial efforts are put into clustering the unlabeled data, and despite obtaining weak correlations between several clusters and failure root causes, the vagueness in the rest of the clusters leads to the consideration of labeling. A new round of interviews with the testing engineers leads to the definition of five ground-truth categories. Using manually labeled data, we train artificial neural networks that either classify the data or pre-process it for clustering. The resulting method achieves an accuracy of 88.9%. The methodology of this paper serves as a prototype or baseline approach for the extraction of expert knowledge and its adaptation to machine learning techniques for root cause analysis in agile environments.
ER  - 

TY  - CONF
TI  - The Maturation of Search-Based Software Testing: Successes and Challenges
T2  - 2019 IEEE/ACM 12th International Workshop on Search-Based Software Testing (SBST)
SP  - 13
EP  - 14
AU  - M. B. Cohen
PY  - 2019
DO  - 10.1109/SBST.2019.00013
JO  - 2019 IEEE/ACM 12th International Workshop on Search-Based Software Testing (SBST)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2019 IEEE/ACM 12th International Workshop on Search-Based Software Testing (SBST)
Y1  - 26-27 May 2019
AB  - In this paper we revisit the field of search-based software testing (SBST) in the context of its technological maturity. We highlight some successes with respect to tools, hybrid approaches, extensions and industry adoption. We then discuss some open challenges that remain for SBST including the need for new approaches to system testing, automated oracle generation, incorporating humans into the search process, and leveraging learning through hyper-heuristic search.
ER  - 

TY  - CONF
TI  - Towards Explainable Test Case Prioritisation with Learning-to-Rank Models
T2  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 66
EP  - 69
AU  - A. Ramírez
AU  - M. Berrios
AU  - J. R. Romero
AU  - R. Feldt
PY  - 2023
DO  - 10.1109/ICSTW58534.2023.00023
JO  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 16-20 April 2023
AB  - Test case prioritisation (TCP) is a critical task in regression testing to ensure quality as software evolves. Machine learning has become a common way to achieve it. In particular, learning-to-rank (LTR) algorithms provide an effective method of ordering and prioritising test cases. However, their use poses a challenge in terms of explainability, both globally at the model level and locally for particular results. Here, we present and discuss scenarios that require different explanations and how the particularities of TCP (multiple builds over time, test case and test suite variations, etc.) could influence them. We include a preliminary experiment to analyse the similarity of explanations, showing that they do not only vary depending on test case-specific predictions, but also on the relative ranks.
ER  - 

TY  - CONF
TI  - Students vs. Professionals: Improving the Learning of Software Testing
T2  - 2022 IEEE/ACM 44th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
SP  - 294
EP  - 296
AU  - Z. Chen
PY  - 2022
DO  - 10.1145/3510454.3517058
JO  - 2022 IEEE/ACM 44th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
IS  - 
SN  - 2574-1926
VO  - 
VL  - 
JA  - 2022 IEEE/ACM 44th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)
Y1  - 22-24 May 2022
AB  - Software testing is a crucial phase of software development. Educators now are assessing tests written by students. Methods have been proposed to assess the completeness of student-written tests. However, there is more to good test quality than completeness, and these additional quality are not assessed by the previous work. Test smells are patterns of poorly designed tests that may negatively affect the quality of test and production code. We propose to assess test smells in students’ code to improve the quality of software tests they write. In the early stages of this research, we will examine whether practitioners actually spend time and energy to remove those test smells summarized by researchers backed by real-world software projects. Then, we will develop and evaluate our new assessment method.
ER  - 

TY  - CONF
TI  - Predictive Analytics for Software Testing
T2  - 2018 IEEE/ACM 11th International Workshop on Search-Based Software Testing (SBST)
SP  - 1
EP  - 1
AU  - F. Sarro
PY  - 2018
DO  - 
JO  - 2018 IEEE/ACM 11th International Workshop on Search-Based Software Testing (SBST)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2018 IEEE/ACM 11th International Workshop on Search-Based Software Testing (SBST)
Y1  - 28-29 May 2018
AB  - This keynote discusses the use of Predictive Analytics for Software Engineering, and in particular for Software Defect Prediction and Software Testing, by presenting the latest results achieved in these fields leveraging Artificial Intelligence, Search-based and Machine Learning methods, and by giving some directions for future work.
ER  - 

TY  - CONF
TI  - Implementation and Comparison of Artificial Intelligence Techniques in Software Testing
T2  - 2023 6th International Conference on Information Systems and Computer Networks (ISCON)
SP  - 1
EP  - 9
AU  - I. Verma
AU  - D. Kumar
AU  - R. Goel
PY  - 2023
DO  - 10.1109/ISCON57294.2023.10112041
JO  - 2023 6th International Conference on Information Systems and Computer Networks (ISCON)
IS  - 
SN  - 2832-143X
VO  - 
VL  - 
JA  - 2023 6th International Conference on Information Systems and Computer Networks (ISCON)
Y1  - 3-4 March 2023
AB  - AI is a prominent innovation of the current digital world. It powers most of the cutting-edge digital devices. It is a blend of unique technologies from machine learning (ML) to mixed reality (MR), and more. AI has significantly touched many sectors including healthcare, life sciences, manufacturing, retail, and agriculture. AI, as many expect, is going to be the future of the computing world. Artificial Intelligence has been a boon to the software industry as well. The software testing area has been highly touched by AI. Any applications that are built, need to be tested before providing it to the client. It becomes tedious if it’s a complex timebound application. Manual testing in those scenarios doesn’t seem to be a feasible solution. Although test automation has been incorporated in many companies, they aren’t efficient in all cases. AI, on the other hand, helps test the applications effectively. Machine learning and deep learning technologies of AI are playing a crucial role in training and inferring massive amounts of data resulting in faster testing of the application. In this paper, we discuss the implementation and comparison of machine learning and deep learning techniques in Software Testing.
ER  - 

TY  - CONF
TI  - Methods and Forms of Increasing the Student Involvement in Online Education Process for Computer Science Students
T2  - 2022 12th International Conference on Advanced Computer Information Technologies (ACIT)
SP  - 601
EP  - 604
AU  - O. Haitan
PY  - 2022
DO  - 10.1109/ACIT54803.2022.9913088
JO  - 2022 12th International Conference on Advanced Computer Information Technologies (ACIT)
IS  - 
SN  - 2770-5226
VO  - 
VL  - 
JA  - 2022 12th International Conference on Advanced Computer Information Technologies (ACIT)
Y1  - 26-28 Sept. 2022
AB  - An effective way to involve students in the educational process and, as a result, to improve the education quality is the use of modern innovative and interactive technologies in education. The paper considers various innovative technologies in online education of the Computer Science students. Examples of such technologies for the specific academic disciplines, in particular, “Discrete Mathematics”, “Basics of Algorithmization and Programming”, “Algorithms and Data Structures”, “Information Security”, “Methods of Software Testing and Quality Assurance”, and “Web Programming and Web Design” are given.
ER  - 

TY  - CONF
TI  - Issues in student valuing of software engineering best practices
T2  - 2016 IEEE Frontiers in Education Conference (FIE)
SP  - 1
EP  - 4
AU  - S. T. Frezza
PY  - 2016
DO  - 10.1109/FIE.2016.7757556
JO  - 2016 IEEE Frontiers in Education Conference (FIE)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2016 IEEE Frontiers in Education Conference (FIE)
Y1  - 12-15 Oct. 2016
AB  - This paper outlines the need for valuing of software engineering skills as a means to improve software engineering education. It presents a brief introduction to affective domain learning, and a survey of the education literature on software engineering skills related to software testing and quality assurance, which suggests that the competencies and skills needed extend beyond cognitive-domain learning. It then proposes a means for studying student valuing of these `best practice' skill areas.
ER  - 

TY  - CONF
TI  - Incorporating Testing Topics in an Object-Oriented Programming Course
T2  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 452
EP  - 456
AU  - R. Pitts
PY  - 2020
DO  - 10.1109/ICSTW50294.2020.00087
JO  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 24-28 Oct. 2020
AB  - Despite the significance of software testing, and the huge body of knowledge associated with it, programming course curriculum often does not include it at all. This short paper discusses one instructor's simple techniques for incorporating software testing into a course curriculum that otherwise does not include it.
ER  - 

TY  - CONF
TI  - Scaffolds and design factors to increase creative outcomes in teaching software design and testing
T2  - 2015 IEEE International Conference on Industrial Engineering and Engineering Management (IEEM)
SP  - 451
EP  - 454
AU  - C. -S. Lee
AU  - K. D. Wong
AU  - S. B. -Y. Lau
PY  - 2015
DO  - 10.1109/IEEM.2015.7385687
JO  - 2015 IEEE International Conference on Industrial Engineering and Engineering Management (IEEM)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2015 IEEE International Conference on Industrial Engineering and Engineering Management (IEEM)
Y1  - 6-9 Dec. 2015
AB  - Graduates are expected to be able to provide holistic solutions, capable of meeting diverse objectives simultaneously. Furthermore, opportunities are often “found” or “made.” The quality of solutions, however, is mediated by different conceptualizations of contexts. Thus, we aim to investigate how students would conceptualize, make sense, desire to know, find solutions and subsequently progress to collaborate, communicate and create new artefacts. We hypothesize that there would be a higher likelihood of better quality design process, explanations as well as modelling outcomes if first, students can relate between the ability to analyse problems with the ability to conceptualize/model and second, the design of the task focuses on not only functional but more importantly sustaining positive user experience. Findings highlight the importance of key design factors contributing to more creative outcomes.
ER  - 

TY  - CONF
TI  - Mutation Testing and Self/Peer Assessment: Analyzing their Effect on Students in a Software Testing Course
T2  - 2021 IEEE/ACM 43rd International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET)
SP  - 231
EP  - 240
AU  - P. Delgado-Pérez
AU  - I. Medina-Bulo
AU  - M. Á. Álvarez-García
AU  - K. J. Valle-Gómez
PY  - 2021
DO  - 10.1109/ICSE-SEET52601.2021.00033
JO  - 2021 IEEE/ACM 43rd International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2021 IEEE/ACM 43rd International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET)
Y1  - 25-28 May 2021
AB  - Testing is a crucial activity in the development of software systems. With the increasing complexity of software projects, the industry requires incorporating graduates with adequate testing skills and preparation in this field. A challenge in software testing education is to make students perceive the benefits of writing tests and assess their quality with advanced testing techniques. In this paper, we present an experience integrating both mutation testing and self/peer assessment - two of the most used techniques to that end in the past - into a software testing course during three years. This experience allowed us to analyze the effect of applying these strategies on the students' perception of their manually-written test suites. Noticeably, the computation of the mutation score significantly undermined the initial expectations they had on the developed test suites. Also, the application of peer testing helped them estimate the relative quality of two comparable test suites, as we found a notable correspondence with their respective mutation coverage. Besides, a more in-depth analysis revealed that the students' test suites with more test cases did not always achieve the highest scores, that they found more readable their own tests, and that they tended to cover the basic operations while forgetting about more advanced features. An opinion survey confirmed the impact that the use of mutants had on their perception about testing, and they mostly supported paying a higher level of attention to testing concepts in software engineering degree plans.
ER  - 

TY  - CONF
TI  - A Case-based Approach for introducing Testing Tools and Principles
T2  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 429
EP  - 436
AU  - F. Dadeau
AU  - J. -P. Gros
AU  - F. Peureux
PY  - 2020
DO  - 10.1109/ICSTW50294.2020.00077
JO  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2020 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 24-28 Oct. 2020
AB  - We present, in this paper, teaching material and experience report on teaching software testing to 3rd year bachelor's degree students. Our approach covers a wide range of techniques from unit testing, to functional testing, through test-first design and black-box testing. To motivate students, we rely on the use of a running case study, that is developed and tested all the way through. This paper presents both teaching material and experience report based on the feedback that we get from the students, and the observations we made regarding the discovery of the software testing aspects.
ER  - 

TY  - CONF
TI  - Peer Instruction in Online Synchronous Software Engineering - Findings from fine-grained clicker data
T2  - 2021 IEEE Frontiers in Education Conference (FIE)
SP  - 1
EP  - 8
AU  - B. Gopal
AU  - S. Cooper
PY  - 2021
DO  - 10.1109/FIE49875.2021.9637353
JO  - 2021 IEEE Frontiers in Education Conference (FIE)
IS  - 
SN  - 2377-634X
VO  - 
VL  - 
JA  - 2021 IEEE Frontiers in Education Conference (FIE)
Y1  - 13-16 Oct. 2021
AB  - In this Research Full paper, we present the results of a replication study in a semester-long, sophomore-level software engineering course utilizing Peer Instruction (PI). PI is an active learning pedagogy with roots in STEM Education. In this study, we examine the relationship between student response data from in-class PI correctness and students' performance on quizzes and exams. We worked with a fully remote, synchronous course offered over Zoom. The study we replicated was with an honors cohort of students with a diversity of undergraduate majors, while we focused on a non-honors course containing computing-related majors. Our intervention design included a flipped-classroom approach for each class session with required readings, reading quizzes, followed by PI in class using online breakout rooms for peer discussion. Our course modules were heavily based on industry practices and knowledge from the workforce, across several varied modules that encompass the complete software development lifecycle, and were as follows: Software Process Models (SPM), Software Architecture (SA), Databases (DB), User Interface/user Experience (UI/UX), Software Testing (ST), and Continuous Integration (CI). Our data points for analysis with fine-grained PI student response data were two-fold: scores from weekly online quizzes, and a summative final exam, administered online through a course management system (CMS), at different points during the semester after the PI sessions. The online quizzes and the online exam were timed, closed book/notes, and conducted during class periods. We analyzed and classified individual student responses before and after each question in each module and attempted to create response patterns for each module. We correlated these response patterns with exam and quiz scores using ANOVA techniques, on a variety of questions including Parson's problems. We report overall correctness on each type of vote, track student response patterns from in-class to quizzes and the exam, and quantify absolute percentages of students that demonstrate longer-term learning from the PI process. Our results show that 58% of students exhibited cognitive gains across all modules during PI sessions. Students who learn in class from PI perform well on the quizzes and the final exam, indicating persistence of the knowledge gained during PI several weeks after the actual sessions. We also found that those who fail to learn from the PI process in the class perform worse on quizzes and the final exam. Our results were consistent across all modules. More significantly, we found PI to be an effective way to teach our software engineering course based on student learning before and after PI, in a completely virtual environment, a result unique to our study. Based on our results, we discuss the implications for software engineering education, both in-person and virtual.
ER  - 

TY  - CONF
TI  - Test Cost Reduction for 5G and Beyond using Machine Learning
T2  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 373
EP  - 376
AU  - M. Havakeshian
AU  - Y. Labiche
AU  - S. Nejati
AU  - S. Desjardins
AU  - K. Haghighi
PY  - 2023
DO  - 10.1109/ICSTW58534.2023.00069
JO  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 16-20 April 2023
AB  - Software testing is essential, but expensive, especially for significant issues, feature-rich systems such as telecommunication systems evolving toward 5G and beyond. There is a need in this domain for effective testing techniques to ensure that a minimal number of test cases assess the most important combinations of system functions with respect to domain-specific criteria.Our approach aims to address this challenge by first automatically mapping existing test cases to the combinations of system capabilities they exercise and visualizing the mappings using decision tree learners. Then, the approach uses a combination of the engineers’ feedback (domain-specific criteria), mapping data, and test execution logs to propose new test cases covering newly-added capabilities or better exercising/verifying existing ones while ensuring the efficacy at fault detection, code coverage, equipment cost, test execution time, redundancy avoidance, among other things.
ER  - 

TY  - CONF
TI  - Challenges to integrate software testing into introductory programming courses
T2  - 2017 IEEE Frontiers in Education Conference (FIE)
SP  - 1
EP  - 9
AU  - L. P. Scatalon
AU  - E. F. Barbosa
AU  - R. E. Garcia
PY  - 2017
DO  - 10.1109/FIE.2017.8190557
JO  - 2017 IEEE Frontiers in Education Conference (FIE)
IS  - 
SN  - 
VO  - 
VL  - 
JA  - 2017 IEEE Frontiers in Education Conference (FIE)
Y1  - 18-21 Oct. 2017
AB  - Several studies suggest that the teaching of software testing should begin as early as possible, since introductory programming courses. In this way, the teaching of both subjects, programming and testing, becomes an integrated teaching approach. Testing practices in this context can provide a timely feedback to students while they are still working on programming assignments and, as a result, increase the quality of their code. Besides, developing students' testing skills earlier is useful to improve their programming skills as well, since both kinds of skills are complementary. However, this integration is not straightforward, because lecture hours and the coverage of programming topics must remain the same, while testing concepts and practices are introduced. For this reason, when designing an educational approach to introduce testing practices to novice programmers, there is also the need to address potential difficulties faced by both students and instructors. Considering this scenario, this paper aims at identifying the challenges raised due to the integration of software testing into introductory programming courses. The goal is to provide support for instructors who intend to adopt the integrated approach. The challenges have been identified from the results of a systematic mapping we conducted of the literature in this domain. The main contribution of this paper refers to the establishment of a catalog of challenges faced to integrate software testing into introductory programming courses. We also discuss possible solutions to design courses using the integrated approach and point out challenges that have been scarcely addressed in the literature. Finally, we indicate directions that can be explored in future educational empirical studies in this context.
ER  - 

TY  - CONF
TI  - Automating GUI-based Software Testing with GPT-3
T2  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
SP  - 62
EP  - 65
AU  - D. Zimmermann
AU  - A. Koziolek
PY  - 2023
DO  - 10.1109/ICSTW58534.2023.00022
JO  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
IS  - 
SN  - 2159-4848
VO  - 
VL  - 
JA  - 2023 IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)
Y1  - 16-20 April 2023
AB  - This paper introduces a new method for GUI-based software testing that utilizes GPT-3, a state-of-the-art language model. The approach uses GPT-3’s transformer architecture to interpret natural language test cases and programmatically navigate through the application under test. To overcome the memory limitations of the transformer architecture, we propose incorporating the current state of all GUI elements into the input prompt at each time step. Additionally, we suggest using a test automation framework to interact with the GUI elements and provide GPT-3 with information about the application’s current state. To simplify the process of acquiring training data, we also present a tool for this purpose. The proposed approach has the potential to improve the efficiency of software testing by eliminating the need for manual input and allowing non-technical users to easily input test cases for both desktop and mobile applications.
ER  - 

TY  - CONF
TI  - Experiential Learning for Software Engineering using Agile Modeling in Umple
T2  - 2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T)
SP  - 1
EP  - 2
AU  - T. C. Lethbridge
PY  - 2020
DO  - 10.1109/CSEET49119.2020.9206221
JO  - 2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T)
IS  - 
SN  - 2377-570X
VO  - 
VL  - 
JA  - 2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T)
Y1  - 9-12 Nov. 2020
AB  - In this tutorial we will discuss a method of teaching a variety of software engineering topics in an integrated and experiential manner. Topics covered include agile processes, software modeling, open source development tools and processes, code generation and testing. Our approach involves using a textual modeling language called Umple that enables agile, model-driven, test-driven development. Students are introduced to this tool in an introduction to software engineering course, where they learn the basics of the above topics. Then in their capstone course they are able to actually contribute to the tool itself.
ER  - 

