"id","score","player_id","challenge_id","attempt_type","comment","test_cases"
1,100,1,1,"PASS","Testing comments... I did very well!","binary data"
2,100,2,1,"PASS","To reach coverage in line 9, I moved the piece to x = -1, since one of the possible conditions was for the destination's x coordinate to be negative.","binary data"
3,200,2,2,"PASS","To reach decision coverage on lines 7-8, I made a move outside of bounds and one inside the bounds. This means that the expression evaluates to False and True respectively.","binary data"
4,250,2,26,"PASS","We have two conditions involving the number of pieces of both colors, so to reach condition coverage, we need each condition to be evaluated as True and as False. So, we can have a board state with the normal number of pieces on each side, and another one with more than 12 pieces of each color.","binary data"
5,250,2,25,"PASS","Same as 2.8, but we have to be sure that the whole condition evaluates to True and to False. This doesn't happen if, for example, A = True, B = False, and vice-versa. Both A and B are evaluated as True and False, but the whole condition is evaluated as True in both cases.","binary data"
6,300,2,22,"PASS","To achieve MCDC, we need at least these three cases:
A = True; B = False
A = False; B = True
A = False; B = False

","binary data"
7,500,2,3,"PASS","Each condition needs to be True at least once, and we also need the case in which every condition is False. This corresponds to a move outside of bounds in each direction and a valid move.","binary data"
8,100,2,4,"PASS","If the vertical displacement is different from the horizontal displacement, i.e., the move direction angle is not a multiple of 45ยบ, the move is invalid.","binary data"
9,200,2,5,"PASS","Same as 1.4, but we need both a valid and invalid case.","binary data"
10,150,2,6,"PASS","Only diagonal moves to and adjacent square are valid (like in real checkers).","binary data"
11,150,2,7,"PASS","Same as 1.6, but we must make sure the square in which we're moving to is empty.","binary data"
12,150,2,8,"PASS","We need to have a checker of the opposite color in the middle square of our move.","binary data"
13,350,2,9,"PASS","Both a diagonal move to an adjacent square and another diagonal move to further square.","binary data"
14,175,2,10,"PASS","Diagonal move to an adjacent empty square.","binary data"
15,175,2,11,"PASS","Moving to non-empty square.","binary data"
16,250,2,12,"PASS","Moving to an empty and non-empty square.","binary data"
17,175,2,13,"PASS","Valid capture move.","binary data"
18,175,2,14,"PASS","Trying to capture piece of the same color.","binary data"
19,225,2,15,"PASS","Capturing a piece of the opposite color.","binary data"
20,225,2,16,"PASS","Capturing both a piece of the same and the opposite color.","binary data"
21,175,2,17,"PASS","Moving two squares in the diagonal to a non-empty square.","binary data"
22,175,2,18,"PASS","Making a capture on a empty and non-empty square.","binary data"
23,100,2,19,"PASS","More than 12 red or blue pieces","binary data"
24,100,2,20,"PASS","No pieces of neither color","binary data"
25,200,2,21,"PASS","Empty board and board with more than 12 pieces of a color.","binary data"
26,300,2,23,"PASS","No red pieces, no blue pieces and pieces of both colors.","binary data"
27,250,2,24,"PASS","No pieces and pieces of both colors.","binary data"
28,250,2,27,"PASS","No pieces and pieces of both colors.","binary data"
29,250,2,29,"PASS","Odd row piece in odd column.","binary data"
