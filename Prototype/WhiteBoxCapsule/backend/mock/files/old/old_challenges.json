[
    {
        "id": 0,
        "name": "Challenge 1.1: Baby's First Statement Coverage Challenge",
        "description": "This challenge is a tutorial. It will teach you how to play the game!",
        "test_cases_count": 1,
        "score": 300,
        "hint": "You may cover the statement through the true or false branch - only one is needed!",
        "objective": "Statement coverage of line 10.",
        "initial_board": 2,
        "code_file": 1,
        "challenge_type": "statement",
        "passing_criteria": {
            "condition_count": null,
            "preconditions": [
                "input.log[input.currentKey].length > 0"
            ],
            "tests": [
                "Math.abs(input.log[input.currentKey][input.log[input.currentKey].length - 1].start.x - input.log[input.currentKey][input.log[input.currentKey].length - 1].destination.x) > 2"
            ]
        },
        "achievement_criteria": null,
        "difficulty": "Very Easy",
        "owner_id": 1
    },
    {
        "id": 0,
        "name": "Challenge 1.2: Baby's First Decision Coverage Challenge",
        "description": "This challenge is a bit more difficult than the first one... but you can take it, right?",
        "test_cases_count": 2,
        "score": 250,
        "hint": "There are two branches to cover. You must cover both!",
        "objective": "Decision coverage of line 10.",
        "initial_board": 2,
        "code_file": 1,
        "challenge_type": "decision",
        "passing_criteria": {
            "condition_count": null,
            "preconditions": [
                "input.log[case_num].length > 0",
                "Math.abs(input.log[case_num][input.log[case_num].length - 1].start.x - input.log[case_num][input.log[case_num].length - 1].destination.x) > 2"
            ],
            "tests": [
                "Math.abs(input.log[case_num][input.log[case_num].length - 1].start.y - input.log[case_num][input.log[case_num].length - 1].destination.y) < 2",
                "Math.abs(input.log[case_num][input.log[case_num].length - 1].start.y - input.log[case_num][input.log[case_num].length - 1].destination.y) >= 2"
            ]
        },
        "achievement_criteria": null,
        "difficulty": "Easy",
        "owner_id": 1
    },
    {
        "id": 0,
        "name": "Challenge 2.1: Red vs. Blue, Round 1",
        "description": "In a game of Checkers, only one color can win. In this challenge, you'll explore a new way to interact with the board.",
        "test_cases_count": 1,
        "score": 180,
        "hint": "You can only cover the objective in one way. Also: don't get hung up on the function calls - they mean exactly what their name says!",
        "objective": "Statement coverage of line 12.",
        "initial_board": 1,
        "code_file": 2,
        "challenge_type": "statement",
        "passing_criteria": {
            "condition_count": null,
            "preconditions": [
                "utils.count_empty_spaces(input, input.currentKey) != 64"
            ],
            "tests": [
                "Math.abs(utils.count_blue_pieces(input, input.currentKey) - utils.count_red_pieces(input, input.currentKey)) == 1"
            ]
        },
        "achievement_criteria": null,
        "difficulty": "Very Easy",
        "owner_id": 1
    },
    {
        "id": 0,
        "name": "Challenge 2.2: Red vs. Blue, Round 2",
        "description": "Not exactly trickier, but everyone needs practice. Both sides have an army this time, which color will win this round?",
        "test_cases_count": 1,
        "score": 180,
        "hint": "The objective can be covered in one of two ways, but remember you're dealing with a switch case, not True and False branches!",
        "objective": "Statement coverage of line 14.",
        "initial_board": 4,
        "code_file": 2,
        "challenge_type": "statement",
        "passing_criteria": {
            "condition_count": null,
            "preconditions": [
                "utils.count_empty_spaces(input, input.currentKey) != 64",
                "Math.abs(utils.count_blue_pieces(input, input.currentKey) - utils.count_red_pieces(input, input.currentKey)) != 0"
            ],
            "tests": [
                "Math.abs(utils.count_blue_pieces(input, input.currentKey) - utils.count_red_pieces(input, input.currentKey)) == 2 || Math.abs(utils.count_blue_pieces(input, input.currentKey) - utils.count_red_pieces(input, input.currentKey)) == 3"
            ]
        },
        "achievement_criteria": null,
        "difficulty": "Easy",
        "owner_id": 1
    },
    {
        "id": 0,
        "name": "Challenge 2.3: Red vs. Blue, Round 3",
        "description": "This will look familiar... do you remember the last two rounds?",
        "test_cases_count": 3,
        "score": 300,
        "hint": "There are a lot of ways to cover that default branch... but only one way to cover the objective!",
        "objective": "Decision coverage of line 10.",
        "initial_board": 1,
        "code_file": 2,
        "challenge_type": "decision",
        "passing_criteria": {
            "condition_count": null,
            "preconditions": [
                "utils.count_empty_spaces(input, case_num) != 64"
            ],
            "tests": [
                "Math.abs(utils.count_blue_pieces(input, case_num) - utils.count_red_pieces(input, case_num)) == 1",
                "Math.abs(utils.count_blue_pieces(input, case_num) - utils.count_red_pieces(input, case_num)) == 2 || Math.abs(utils.count_blue_pieces(input, case_num) - utils.count_red_pieces(input, case_num)) == 3",
                "Math.abs(utils.count_blue_pieces(input, case_num) - utils.count_red_pieces(input, case_num)) != 1 && Math.abs(utils.count_blue_pieces(input, case_num) - utils.count_red_pieces(input, case_num)) != 2 && Math.abs(utils.count_blue_pieces(input, case_num) - utils.count_red_pieces(input, case_num)) != 3"
            ]
        },
        "achievement_criteria": null,
        "difficulty": "Normal",
        "owner_id": 1
    },
    
    {
        "id": 0,
        "name": "Challenge 4.1: A 1v1 for the Ages",
        "description": "Red and Blue remains a classic. But... how can they settle their feel- We mean, differences?",
        "test_cases_count": 1,
        "score": 200,
        "hint": "Even if you think you can't do something... you can. Come on, try it! However, you can't cover the objective by only using the Add function of the board. You need to make at least 1 move. Also: the utils functions work linearly (they search from top to bottom).",
        "objective": "Statement coverage of line 11.",
        "initial_board": 1,
        "code_file": 4,
        "challenge_type": "statement",
        "passing_criteria": {
            "condition_count": null,
            "preconditions": [
                "utils.find_first_blue_piece(input, input.currentKey).position.x != -2",
                "utils.find_first_red_piece(input, input.currentKey).position.x != -2"
            ],
            "tests": [
                "utils.find_first_blue_piece(input, input.currentKey).position == utils.find_first_red_piece(input, input.currentKey).position"
            ]
        },
        "achievement_criteria": null,
        "difficulty": "Normal",
        "owner_id": 1
    },
    {
        "id": 0,
        "name": "Challenge 4.2: God Help The Outcasts",
        "description": "The title's joke would be better in Portuguese, but one red piece has got to go! Which one will it be?",
        "test_cases_count": 1,
        "score": 150,
        "hint": "That (-1, -1) spot looks mighty helpful, doesn't it?",
        "objective": "Statement coverage of line 13.",
        "initial_board": 1,
        "code_file": 4,
        "challenge_type": "statement",
        "passing_criteria": {
            "condition_count": null,
            "preconditions": [
                "utils.find_first_red_piece(input, input.currentKey).position.x != -2"
            ],
            "tests": [
                "utils.find_first_red_piece(input, input.currentKey).position.x == -1 || utils.find_first_red_piece(input, input.currentKey).position.y == -1"
            ]
        },
        "achievement_criteria": null,
        "difficulty": "Very Easy",
        "owner_id": 1
    },
    {
        "id": 0,
        "name": "Challenge 4.3: The Last Joke is Funnier The Second Time, Really",
        "description": "Blue pieces are the new red pieces. Or something like that.",
        "test_cases_count": 1,
        "score": 150,
        "hint": "That (-1, -1) spot looks mighty helpful, doesn't it? If you saw the other hint before this one, this is probably unneeded.",
        "objective": "Statement coverage of line 15.",
        "initial_board": 1,
        "code_file": 4,
        "challenge_type": "statement",
        "passing_criteria": {
            "condition_count": null,
            "preconditions": [
                "utils.find_first_blue_piece(input, input.currentKey).position.x != -2"
            ],
            "tests": [
                "utils.find_first_blue_piece(input, input.currentKey).position.x == -1 || utils.find_first_blue_piece(input, input.currentKey).position.y == -1"
            ]
        },
        "achievement_criteria": null,
        "difficulty": "Very Easy",
        "owner_id": 1
    },
    {
        "id": 0,
        "name": "Challenge 4.4: Third Time's the Charm",
        "description": "Ok, ok, this is the last time. But you have a bunch of cases to cover, so get to it! ",
        "test_cases_count": 4,
        "score": 300,
        "hint": ".",
        "objective": "Decision coverage of line 10.",
        "initial_board": 1,
        "code_file": 4,
        "challenge_type": "decision",
        "passing_criteria": {
            "condition_count": null,
            "preconditions": [
                "utils.find_first_red_piece(input, case_num).position.x != -2 || utils.find_first_blue_piece(input, case_num).position.x != -2"
            ],
            "tests": [
                "utils.find_first_red_piece(input, case_num).position.x == -1 || utils.find_first_red_piece(input, case_num).position.y == -1",
                "utils.find_first_blue_piece(input, case_num).position.x == -1 || utils.find_first_blue_piece(input, case_num).position.y == -1",
                "utils.find_first_blue_piece(input, case_num).position == utils.find_first_red_piece(input, case_num).position",
                "utils.find_first_blue_piece(input, case_num).position != utils.find_first_red_piece(input, case_num).position && utils.find_first_blue_piece(input, case_num).position != { x: -1, y: -1} && utils.find_first_red_piece(input, case_num).position != { x: -1, y: -1}"
            ]
        },
        "achievement_criteria": null,
        "difficulty": "Hard",
        "owner_id": 1
    },
    {
        "id": 0,
        "name": "Challenge 5.1: Even Numbers Are Better",
        "description": "Stacking pieces starts with an even number... how many pieces will you stack?",
        "test_cases_count": 1,
        "score": 150,
        "hint": "The number of pieces in the stack must be even AND it can't be equal to...?",
        "objective": "Statement coverage of line 11.",
        "initial_board": 1,
        "code_file": 5,
        "challenge_type": "statement",
        "passing_criteria": {
            "condition_count": null,
            "preconditions": [
                "utils.find_first_stack(input, input.currentKey).position.x != -2"
            ],
            "tests": [
                "(utils.find_first_stack(input, input.currentKey).stack.red + utils.find_first_stack(input, input.currentKey).stack.blue) < 6 && (utils.find_first_stack(input, input.currentKey).stack.red + utils.find_first_stack(input, input.currentKey).stack.blue) % 2 == 0"
            ]
        },
        "achievement_criteria": null,
        "difficulty": "Easy",
        "owner_id": 1
    },
    {
        "id": 0,
        "name": "Challenge 5.2: Even Numbers Aren't (Always) Better",
        "description": "Because odd numbers need love too... And stacking pieces is still fun, right?",
        "test_cases_count": 2,
        "score": 200,
        "hint": "The number of pieces in the stack can't be even AND it can't be equal to...?",
        "objective": "Decision coverage of line 9.",
        "initial_board": 1,
        "code_file": 5,
        "challenge_type": "decision",
        "passing_criteria": {
            "condition_count": null,
            "preconditions": [
                "utils.find_first_stack(input, case_num).position.x != -2"
            ],
            "tests": [
                "utils.find_first_stack(input, case_num).stack.red + utils.find_first_stack(input, case_num).stack.red < 6 && (utils.find_first_stack(input, case_num).stack.red + utils.find_first_stack(input, case_num).stack.blue) % 2 == 0",
                "utils.find_first_stack(input, case_num).stack.red + utils.find_first_stack(input, case_num).stack.red > 6 || (utils.find_first_stack(input, case_num).stack.red + utils.find_first_stack(input, case_num).stack.blue) % 2 != 0"
            ]
        },
        "achievement_criteria": null,
        "difficulty": "Easy",
        "owner_id": 1
    },
    {
        "id": 0,
        "name": "Challenge 5.3: Odd Numbers, Let's Go!",
        "description": "But can a stack handle it?",
        "test_cases_count": 1,
        "score": 150,
        "hint": "You're dealing with a conjunction - both sides of the condition must be true!",
        "objective": "Statement coverage of line 13.",
        "initial_board": 1,
        "code_file": 5,
        "challenge_type": "statement",
        "passing_criteria": {
            "condition_count": null,
            "preconditions": [
                "utils.find_first_stack(input, input.currentKey).position.x != -2"
            ],
            "tests": [
                "utils.find_first_stack(input, input.currentKey).stack.red + utils.find_first_stack(input, input.currentKey).stack.red > 6 || (utils.find_first_stack(input, input.currentKey).stack.red + utils.find_first_stack(input, input.currentKey).stack.blue) % 2 != 0"
            ]
        },
        "achievement_criteria": null,
        "difficulty": "Easy",
        "owner_id": 1
    },
    {
        "id": 0,
        "name": "Challenge 5.4: Stack... Overflow?",
        "description": "Shoutout! But a condition is a condition, and it must be covered.",
        "test_cases_count": 2,
        "score": 150,
        "hint": "Remember: each side of the condition must be True and False at least once, across the test cases!",
        "objective": "Condition coverage of line 9.",
        "initial_board": 1,
        "code_file": 5,
        "challenge_type": "condition",
        "passing_criteria": {
            "condition_count": 2,
            "preconditions": [
                "utils.find_first_stack(input, case_num).position.x != -2"
            ],
            "tests": [
                "utils.find_first_stack(input, case_num).stack.red + utils.find_first_stack(input, case_num).stack.blue < 6",
                "(utils.find_first_stack(input, case_num).stack.red + utils.find_first_stack(input, case_num).stack.blue) % 2 == 0",
                "!(utils.find_first_stack(input, case_num).stack.red + utils.find_first_stack(input, case_num).stack.blue < 6)",
                "!((utils.find_first_stack(input, case_num).stack.red + utils.find_first_stack(input, case_num).stack.blue) % 2 == 0)"
            ]
        },
        "achievement_criteria": null,
        "difficulty": "Easy",
        "owner_id": 1
    },
    ,
    {
        "id": 0,
        "name": "Challenge 7.1: Out of Bounds!",
        "description": "A new type of coverage is introduced in this challenge... it's more extensive than the others!",
        "test_cases_count": 4,
        "score": 400,
        "hint": "Read the code carefully. The If statement you're dealing with involves the from and the to, not just the first!",
        "objective": "Condition/decision coverage of line 4.",
        "initial_board": 2,
        "code_file": 7,
        "challenge_type": "path",
        "passing_criteria": {
            "condition_count": 2,
            "preconditions": [
                "input.log[case_num].length > 0",
                "input.log[case_num][input.log[case_num].length - 1].type == 'move'"
            ],
            "tests": [
                "input.log[case_num][input.log[case_num].length - 1].start.x >= 7 && input.log[case_num][input.log[case_num].length - 1].destination.x <= 0",
                "!(input.log[case_num][input.log[case_num].length - 1].start.x >= 7) && input.log[case_num][input.log[case_num].length - 1].destination.x <= 0",
                "input.log[case_num][input.log[case_num].length - 1].start.x >= 7 && !(input.log[case_num][input.log[case_num].length - 1].destination.x <= 0)",
                "!(input.log[case_num][input.log[case_num].length - 1].start.x >= 7) && !(input.log[case_num][input.log[case_num].length - 1].destination.x <= 0)"
            ]
        },
        "achievement_criteria": null,
        "difficulty": "Hard",
        "owner_id": 1
    },
    {
        "id": 0,
        "name": "Challenge 7.2: Out of Bounds... Again!",
        "description": "A new type of coverage is introduced in this challenge... it's more extensive than the others!",
        "test_cases_count": 3,
        "score": 400,
        "hint": "Read the code carefully. The If statement you're dealing with involves the from and the to, not just the first!",
        "objective": "Modified condition/decision coverage of line 4.",
        "initial_board": 2,
        "code_file": 7,
        "challenge_type": "mcdc",
        "passing_criteria": {
            "condition_count": 2,
            "preconditions": [
                "input.log[case_num].length > 0",
                "input.log[case_num][input.log[case_num].length - 1].type == 'move'"
            ],
            "tests": [
                "!(input.log[case_num][input.log[case_num].length - 1].start.x >= 7) && input.log[case_num][input.log[case_num].length - 1].destination.x <= 0",
                "input.log[case_num][input.log[case_num].length - 1].start.x >= 7 && !(input.log[case_num][input.log[case_num].length - 1].destination.x <= 0)",
                "!(input.log[case_num][input.log[case_num].length - 1].start.x >= 7) && !(input.log[case_num][input.log[case_num].length - 1].destination.x <= 0)"
            ]
        },
        "achievement_criteria": null,
        "difficulty": "Hard",
        "owner_id": 1
    }
]