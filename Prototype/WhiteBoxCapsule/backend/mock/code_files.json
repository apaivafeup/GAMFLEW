[
    {
        "id": 1,
        "name": "Test File 1: Is Move Valid?",
        "content": "// board includes the board's state.\n// start: the (x, y) position from where a piece last moved.\n// destination: the (x, y) position to where a piece last moved.\nfunction is_valid_move(board, start, destination) {\n\t// Math.abs() gives you the absolute value of whatever you call it with.\n\t// Math.abs(-1) == 1\n\tif (destination.x < 0 || destination.x > 7 ||\n\t\tdestination.y < 0 || destination.y > 7) {\n\t\treturn false;\n\t}\n\n\tvar lineDifference = Math.abs(start.x - destination.x);\n\tvar columnDifference = Math.abs(start.y - destination.y);\n\n\tif (lineDifference != columnDifference) {\n\t\treturn false;\n\t} else {\n\t\tif (lineDifference == 1) {\n\t\t\tif (board[destination.x][destination.y].color == Color.EMPTY) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (lineDifference == 2) {\n\t\t\tif (board[destination.x][destination.y].color == Color.EMPTY) {\n\t\t\t\tvar middlePiece = board[Math.round((start.x + destination.x) / 2)][Math.round((start.y + destination.y) / 2)];\n\t\t\t\tif (middlePiece.color == board[start.x][start.y].color) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (middlePiece.color != Color.EMPTY) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n}"
    },
    {
        "id": 2,
        "name": "Test File 2: Is Board Valid?",
        "content": "function is_board_valid(board) { // board is the board's state.\n\tvar bluePieces = this.count_blue_pieces(board);\n\tvar redPieces = this.count_red_pieces(board);\n\n\tif (bluePieces > 12 || redPieces > 12) {\n\t\treturn false;\n\t} else if (bluePieces == 0 || redPieces == 0) {\n\t\treturn false;\n\t}\n\n\tvar pieces = this.get_pieces(board);\n\tvar odd = [1, 3, 5, 7], even = [0, 2, 4, 6];\n\n\tfor (p in pieces) {\n\t\tif (p.position.x % 2 != 0) {\n\t\t\tif (!odd.includes(p.position.y)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (!even.includes(p.position.y)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}"
    },
    {
        "id": 3,
        "name": "Test File 3: Can Piece Move?",
        "content": "function can_piece_move(piece) {\n\t// Checking diagonals, clockwise, starting on top-right quadrant.\n\t// Quadrants are: top-right, bottom-right, bottom-left, top-left.\n\tvar directions = [\n\t\t{ x: 1, y: 1 },\n\t\t{ x: 1, y: -1 },\n\t\t{ x: -1, y: -1 },\n\t\t{ x: -1, y: 1 },\n\t];\n\n\t// Kings can move in all directions.\n\tif (piece.isKing) {\n\t\tfor (var d of directions) {\n\t\t\tvar destination_x = piece.position.x + d.x,\n\t\t\t\tdestination_y = piece.position.y + d.y ;\n\n\t\t\tif ((board[destination_x][destination_y].color == Color.EMPTY) ||\n\t\t\t\t(board[destination_x][destination_y].color != piece.color &&\n\t\t\t\tboard[destination_x + d.x][destination_y + d.y].color == Color.EMPTY)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normal pieces can only move in half the directions.\n\t// Blue and red pieces move in opposite directions!\n\tif (piece.color == Color.RED) {\n\t\tfor (var d of directions.slice(0, 2)) {\n\t\t\tvar destination_x = piece.position.x + d.x,\n\t\t\t\tdestination_y = piece.position.y + d.y ;\n\n\t\t\t// Color.EMPTY represents an empty space.\n\t\t\tif (board[destination_x][destination_y].color == Color.EMPTY ||\n\t\t\t\t(board[destination_x][destination_y].color != piece.color &&\n\t\t\t\tboard[destination_x + d.x][destination_y + d.y].color == Color.EMPTY)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// .slice() returns a new list with the elements from the\n\t\t// original list, starting from the first index and ending\n\t\t// at the second index (exclusive).\n\t\tfor (var d of directions.slice(2, 4)) {\n\t\t\tvar destination_x = piece.position.x + d.x,\n\t\t\t\tdestination_y = piece.position.y + d.y ;\n\n\t\t\tif (board[destination_x][destination_y].color == Color.EMPTY ||\n\t\t\t\t(board[destination_x][destination_y].color != piece.color &&\n\t\t\t\tboard[destination_x + d.x][destination_y + d.y].color == Color.EMPTY)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n}"
    },
    {
        "id": 4,
        "name": "Test File 4: Has Game Ended?",
        "content": "function has_game_ended(board) {\n\tvar pieces = utils.get_pieces(board);\n\n\t// If there is only one piece left, the game has ended.\n\tif (pieces.length == 1) {\n\t\treturn true;\n\t} else if (pieces.all(p => p.color == Color.RED) || pieces.all(p => p.color == Color.BLUE)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}"
    },
    {
        "id": 5,
        "name": "Test File 5: Who Won?",
        "content": "function who_won(board) {\n\tvar blue = utils.count_blue_pieces(board),\n\t\tred = utils.count_red_pieces(board);\n\n\tif (blue == red) {\n\t\tif (utils.count_empty_spaces(board) != 64) {\n\t\t\t// Tie\n\t\t\treturn [Color.RED, Color.BLUE];\n\t\t} else {\n\t\t\t// Invalid board.\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\tif (blue > red) {\n\t\t\treturn Color.BLUE;\n\t\t} else {\n\t\t\treturn Color.RED;\n\t\t}\n\t}\n}"
    }
]